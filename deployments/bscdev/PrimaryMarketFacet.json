{
  "address": "0x1Be9Bca9dc11E35183666C5AE1f15cd2dd6Dee8B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "allowanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "allowances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimFrom",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "strategyType",
          "type": "uint8"
        }
      ],
      "name": "getStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "royaltyBps",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "royaltyCap",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pricingStrategies",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "allowanceStrategies",
          "type": "address[]"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "priceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "strategyType",
          "type": "uint8"
        }
      ],
      "name": "registerStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "registeredStrategyType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalEarned",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "setAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "setPricing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "royaltyBps",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "royaltyCap",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3dc29730b6926d38def2966fee0cdc3a9c5962a065685d333388f1f2d80e46fc",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0x1Be9Bca9dc11E35183666C5AE1f15cd2dd6Dee8B",
    "transactionIndex": 3,
    "gasUsed": "2879106",
    "logsBloom": "0x
    "blockHash": "0x9b99bb201ffde62736c7cc447c98e45bb673a0a71ec12ad84d68d22bb9bbca5c",
    "transactionHash": "0x3dc29730b6926d38def2966fee0cdc3a9c5962a065685d333388f1f2d80e46fc",
    "logs": [],
    "blockNumber": 16983447,
    "cumulativeGasUsed": "3217701",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "dcdf536ceb931b0d458d3b0d33badb21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"allowanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimFrom\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"strategyType\",\"type\":\"uint8\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"royaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"royaltyCap\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pricingStrategies\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowanceStrategies\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"priceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"strategyType\",\"type\":\"uint8\"}],\"name\":\"registerStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"registeredStrategyType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"setAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"setPricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"royaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"royaltyCap\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shu Dong\",\"kind\":\"dev\",\"methods\":{},\"title\":\"PrimaryMarketFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facet contract holding functions for primary market sale\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agent/facets/PrimaryMarketFacet.sol\":\"PrimaryMarketFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"contracts/agent/facets/PrimaryMarketFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport '../../shared/lib/LibPausable.sol';\\nimport '../lib/AppStorage.sol';\\nimport '../interfaces/IPricingStrategy.sol';\\nimport '../interfaces/IAllowanceStrategy.sol';\\n\\n/**\\n * @title PrimaryMarketFacet\\n * @author Shu Dong\\n * @notice Facet contract holding functions for primary market sale\\n */\\ncontract PrimaryMarketFacet is\\n    PausableModifier,\\n    OwnableInternal,\\n    StorageBase\\n{\\n    using SafeERC20 for IERC20;\\n\\n    event Claim(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to\\n    );\\n\\n    struct ClaimState {\\n        uint tokenCost;\\n        uint totalCost;\\n        uint totalEarned;\\n    }\\n\\n    function init(\\n        uint16 royaltyBps,\\n        uint royaltyCap,\\n        address[] calldata pricingStrategies,\\n        address[] calldata allowanceStrategies\\n    ) external onlyOwner {\\n        setRoyaltyInfo(royaltyBps, royaltyCap);\\n        for (uint i = 0; i < pricingStrategies.length; i++) {\\n            s.strategyRegistry[pricingStrategies[i]] = 1;\\n        }\\n        for (uint i = 0; i < allowanceStrategies.length; i++) {\\n            s.strategyRegistry[allowanceStrategies[i]] = 2;\\n        }\\n    }\\n\\n    function setRoyaltyInfo(\\n        uint16 royaltyBps,\\n        uint royaltyCap\\n    ) public onlyOwner {\\n        require(s.royaltyBps <= 10000, 'Mining3Agent: Invalid royalty bps');\\n        s.royaltyBps = royaltyBps;\\n        s.royaltyCap = royaltyCap;\\n    }\\n\\n    function registerStrategy(\\n        address strategy,\\n        uint8 strategyType\\n    ) external onlyOwner {\\n        s.strategyRegistry[strategy] = strategyType;\\n    }\\n\\n    function registeredStrategyType(\\n        address strategy\\n    ) external view returns(uint8) {\\n        return s.strategyRegistry[strategy];\\n    }\\n\\n    function setStrategy(address strategy) external {\\n        uint8 strategyType = s.strategyRegistry[strategy];\\n        require(\\n            strategyType > 0,\\n            'Mining3Agent: strategy not registered'\\n        );\\n        s.strategies[msg.sender][strategyType] = strategy;\\n    }\\n\\n    function getStrategy(uint8 strategyType) external view returns(address) {\\n        return s.strategies[msg.sender][strategyType];\\n    }\\n\\n    function setPricing(bytes memory args) external {\\n        address pricing = s.strategies[msg.sender][1];\\n        require(\\n            pricing != address(0),\\n            'Mining3Agent: pricing strategy not set'\\n        );\\n        (\\n            bool success,\\n            bytes memory result\\n        ) = pricing.delegatecall(\\n            abi.encodeWithSelector(\\n                IPricingStrategy.set.selector,\\n                msg.sender,\\n                s.tokenCost,\\n                args\\n            )\\n        );\\n        require(success, string(result));\\n    }\\n\\n    function setAllowance(address buyer, bytes memory args) external {\\n        address allowance = s.strategies[msg.sender][2];\\n        require(\\n            allowance != address(0),\\n            'Mining3Agent: allowance strategy not set'\\n        );\\n        (\\n            bool success,\\n            bytes memory result\\n        ) = allowance.delegatecall(\\n            abi.encodeWithSelector(\\n                IAllowanceStrategy.set.selector,\\n                msg.sender,\\n                buyer,\\n                args\\n            )\\n        );\\n        require(success, string(result));\\n    }\\n\\n    function claimFrom(\\n        address from,\\n        address to,\\n        uint[] calldata ids,\\n        uint[] calldata amounts\\n    ) external whenNotPaused returns(uint[] memory) {\\n        require(\\n            to == msg.sender || to == address(0),\\n            'Mining3Agent: invalid operator'\\n        );\\n        require(\\n            ids.length == amounts.length,\\n            \\\"TokenLocker: array length mismatch\\\"\\n        );\\n        checkAllowances(from, to, ids, amounts);\\n        uint[] memory prices = priceOfBatch(from, ids);\\n        ClaimState memory cs = ClaimState(s.tokenCost, 0, 0);\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint balance = s.balances[ids[i]][from];\\n            require(\\n                amounts[i] <= balance,\\n                'Mining3Agent: insufficient balance'\\n            );\\n            unchecked {\\n                s.balances[ids[i]][from] = balance - amounts[i];\\n            }\\n            cs.totalCost += cs.tokenCost * amounts[i];\\n            cs.totalEarned += (prices[i] - cs.tokenCost) * amounts[i];\\n        }\\n        IERC20 payment = IERC20(s.paymentToken);\\n        uint royalty = royaltyInfo(cs.totalEarned);\\n        payment.safeTransferFrom(msg.sender, s.custodian, cs.totalCost + royalty);\\n        payment.safeTransferFrom(msg.sender, from, cs.totalEarned - royalty);\\n        s.nft.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n        emit Claim(msg.sender, from, to);\\n        return amounts;\\n    }\\n\\n    function royaltyInfo(uint totalEarned) public view returns(uint) {\\n        uint royalty = (totalEarned * s.royaltyBps) / 10000;\\n        uint royaltyCap = s.royaltyCap;\\n        return royaltyCap > 0 && royalty > royaltyCap ? royaltyCap : royalty;\\n    }\\n\\n    function priceOfBatch(\\n        address account,\\n        uint[] calldata ids\\n    ) public view returns(uint[] memory prices) {\\n        address pricing = s.strategies[account][1];\\n        require(pricing != address(0), 'Mining3Agent: pricing not set');\\n        (\\n            bool success,\\n            bytes memory result\\n        ) = pricing.staticcall(\\n            abi.encodeWithSelector(\\n                IPricingStrategy.priceOfBatch.selector,\\n                msg.sender,\\n                ids\\n            )\\n        );\\n        require(success, string(result));\\n        prices = abi.decode(result, (uint[]));\\n    }\\n\\n    function allowanceOfBatch(\\n        address owner,\\n        address buyer,\\n        uint[] calldata ids\\n    ) external view returns(uint[] memory allowances) {\\n        address allowance = s.strategies[owner][2];\\n        require(\\n            allowance != address(0),\\n            'Mining3Agent: allowance strategy not set'\\n        );\\n        (\\n            bool success,\\n            bytes memory result\\n        ) = allowance.staticcall(\\n            abi.encodeWithSelector(\\n                IAllowanceStrategy.allowanceOfBatch.selector,\\n                owner,\\n                buyer,\\n                ids\\n            )\\n        );\\n        require(success, string(result));\\n        allowances = abi.decode(result, (uint[]));\\n    }\\n\\n    function checkAllowances(\\n        address owner,\\n        address buyer,\\n        uint[] calldata ids,\\n        uint[] calldata amounts\\n    ) private {\\n        address allowance = s.strategies[owner][2];\\n        require(\\n            allowance != address(0),\\n            'Mining3Agent: allowance strategy not set'\\n        );\\n        (\\n            bool success,\\n            bytes memory result\\n        ) = allowance.delegatecall(\\n            abi.encodeWithSelector(\\n                IAllowanceStrategy.checkAllowances.selector,\\n                owner,\\n                buyer,\\n                ids,\\n                amounts\\n            )\\n        );\\n        require(success, string(result));\\n    }\\n}\\n\",\"keccak256\":\"0x4ad2dfcf2828552333c0148e3780031da9f11d85d7ae9b0063c6c99bb57251b2\",\"license\":\"MIT\"},\"contracts/agent/interfaces/IAllowanceStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IAllowanceStrategy {\\n    function set(\\n        address owner,\\n        address buyer,\\n        bytes memory args\\n    ) external;\\n\\n    function checkAllowances(\\n        address owner,\\n        address buyer,\\n        uint[] memory ids,\\n        uint[] memory amounts\\n    ) external;\\n\\n    function allowanceOfBatch(\\n        address owner,\\n        address buyer,\\n        uint[] memory ids\\n    ) external view returns(uint[] memory);\\n}\\n\",\"keccak256\":\"0xc7f982fe16c300e00c7bbce5489b6ca22b01de8e402545a663420c37b4335a08\",\"license\":\"MIT\"},\"contracts/agent/interfaces/IPricingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IPricingStrategy {\\n    function set(\\n        address owner,\\n        uint minPrice,\\n        bytes memory args\\n    ) external;\\n\\n    function priceOfBatch(\\n        address owner,\\n        uint[] memory ids\\n    ) external view returns(uint[] memory);\\n}\\n\",\"keccak256\":\"0x2696d00c9c0ec81bf9598ef710258afcb18fd832b69eb75c4590b85b3b859d42\",\"license\":\"MIT\"},\"contracts/agent/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '../../nft/interfaces/IERC1155Rewardable.sol';\\n\\nstruct BillingStatement {\\n    uint balance;  // Today's total locked (not liquidated) NFT for today\\n    uint surplus;  // Today's surplus (mined target tokens - the part to payoff unpaid cost) in incomeToken\\n    uint debt;  // The debt in paymentToken if today's mined target tokens cannot pay off cost\\n}\\n\\nstruct AppStorage {\\n    uint tokenCost; // cost per nft in payment token\\n\\n    IERC1155Rewardable nft; // DeMineNFT contract address\\n    address paymentToken; // The type of token to pay off cost (e.g. USDT)\\n    address custodian; // payee account address, could be contract\\n    uint16 royaltyBps;  // royalty bps, 10000 based\\n    uint royaltyCap;  // max royalty value to accept\\n\\n    mapping(uint => mapping(address => uint)) balances;  // owner => buyer => allowance\\n\\n    // billing related\\n    mapping(uint256 => BillingStatement) statements; // Billing statement for each NFT token.\\n    address chainlink;\\n    address swapRouter;\\n    uint8 swapRouterVersion; // 2 or 3 supported\\n    uint16 earningTokenSaleDiscount10000Based; // 10000 based\\n\\n    // primary market sale related\\n    // 0: unregistered, 1: pricing strategy, 2: allowance strategy\\n    mapping(address => uint8) strategyRegistry;\\n    mapping(address => mapping(uint8 => address)) strategies;\\n}\\n\\nabstract contract StorageBase {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0xdc8d02880e411807cbe1d99fac40c4b5bc573be6fcf8bc16df13733fb6fd6a3e\",\"license\":\"MIT\"},\"contracts/nft/interfaces/IERC1155Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IERC1155Rewardable is IERC1155 {\\n    function custodian() external view returns(address);\\n\\n    function earningToken() external view returns(address);\\n}\\n\",\"keccak256\":\"0xac6ed88e2b851fcbc70ca389bbe6c6db551b619fe70375995fe7f11d69d69b47\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xb33768d5a13e8aa6c9c15a2988d677ec850db777536db6ab0c38f0f768f71569\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x86af35526539727370e6cfcd7132918c2b8923052391f7a1816458066006979a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613359806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806357efe3741161007157806357efe3741461019d5780639e5dd438146101cd578063a77c9a63146101e9578063c9a3510014610219578063cef6d36814610235578063f2ef10d414610265576100b4565b80630c23763f146100b95780631cfed885146100d557806333a100ca1461010557806348f60b99146101215780634bbaaced1461013d5780634d57cee71461016d575b600080fd5b6100d360048036038101906100ce9190611e5e565b610281565b005b6100ef60048036038101906100ea9190611ee0565b6104a0565b6040516100fc9190611f4e565b60405180910390f35b61011f600480360381019061011a9190611f95565b610522565b005b61013b60048036038101906101369190612032565b610657565b005b610157600480360381019061015291906120d2565b61077a565b60405161016491906121f0565b60405180910390f35b61018760048036038101906101829190611f95565b6109b1565b6040516101949190612221565b60405180910390f35b6101b760048036038101906101b2919061223c565b610a09565b6040516101c491906121f0565b60405180910390f35b6101e760048036038101906101e29190612306565b610c43565b005b61020360048036038101906101fe91906123ad565b610e38565b60405161021091906121f0565b60405180910390f35b610233600480360381019061022e9190612454565b611418565b005b61024f600480360381019061024a9190612494565b611510565b60405161025c91906124d0565b60405180910390f35b61027f600480360381019061027a91906124eb565b611572565b005b600080600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561036c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610363906125ca565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16635973921b60e01b336000800154876040516024016103a793929190612672565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161041191906126ec565b600060405180830381855af49150503d806000811461044c576040519150601f19603f3d011682016040523d82523d6000602084013e610451565b606091505b5091509150818190610499576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104909190612747565b60405180910390fd5b5050505050565b600080600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905060008160ff16116105bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b2906127db565b60405180910390fd5b816000600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61065f61178e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e790612847565b60405180910390fd5b612710600060030160149054906101000a900461ffff1661ffff16111561074c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610743906128d9565b60405180910390fd5b81600060030160146101000a81548161ffff021916908361ffff160217905550806000600401819055505050565b6060600080600a0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e90612945565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16634bbaaced60e01b33888860405160240161089e939291906129c6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161090891906126ec565b600060405180830381855afa9150503d8060008114610943576040519150601f19603f3d011682016040523d82523d6000602084013e610948565b606091505b5091509150818190610990576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109879190612747565b60405180910390fd5b50808060200190518101906109a59190612ad0565b93505050509392505050565b60008060090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6060600080600a0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600260ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90612b8b565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff166357efe37460e01b89898989604051602401610b2f9493929190612bab565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610b9991906126ec565b600060405180830381855afa9150503d8060008114610bd4576040519150601f19603f3d011682016040523d82523d6000602084013e610bd9565b606091505b5091509150818190610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c189190612747565b60405180910390fd5b5080806020019051810190610c369190612ad0565b9350505050949350505050565b610c4b61178e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd390612847565b60405180910390fd5b610ce68686610657565b60005b84849050811015610d8a57600160006009016000878785818110610d1057610d0f612beb565b5b9050602002016020810190610d259190611f95565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080610d8290612c49565b915050610ce9565b5060005b82829050811015610e2f57600260006009016000858585818110610db557610db4612beb565b5b9050602002016020810190610dca9190611f95565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080610e2790612c49565b915050610d8e565b50505050505050565b6060610e426117bb565b60000160009054906101000a900460ff1615610e93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8a90612cde565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480610ef95750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f90612d4a565b60405180910390fd5b828290508585905014610f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7790612ddc565b60405180910390fd5b610f8e8787878787876117e8565b6000610f9b88878761077a565b90506000604051806060016040528060008001548152602001600081526020016000815250905060005b878790508110156111e35760008060050160008a8a85818110610feb57610fea612beb565b5b90506020020135815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508087878481811061105457611053612beb565b5b90506020020135111561109c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109390612e6e565b60405180910390fd5b8686838181106110af576110ae612beb565b5b905060200201358103600060050160008b8b868181106110d2576110d1612beb565b5b90506020020135815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555086868381811061113b5761113a612beb565b5b9050602002013583600001516111519190612e8e565b836020018181516111629190612ee8565b9150818152505086868381811061117c5761117b612beb565b5b90506020020135836000015185848151811061119b5761119a612beb565b5b60200260200101516111ad9190612f3e565b6111b79190612e8e565b836040018181516111c89190612ee8565b915081815250505080806111db90612c49565b915050610fc5565b5060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600061121c8360400151611510565b905061127f33600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168386602001516112589190612ee8565b8573ffffffffffffffffffffffffffffffffffffffff16611a0e909392919063ffffffff16565b6112bb338c8386604001516112949190612f3e565b8573ffffffffffffffffffffffffffffffffffffffff16611a0e909392919063ffffffff16565b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632eb2c2d630338c8c8c8c6040518763ffffffff1660e01b815260040161132396959493929190612f98565b600060405180830381600087803b15801561133d57600080fd5b505af1158015611351573d6000803e3d6000fd5b505050508973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcac3ed26c9dd72a2c44999857298af9c72ba2d1ca9784f5dad48c933e2224c1160405160405180910390a4868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509450505050509695505050505050565b61142061178e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a890612847565b60405180910390fd5b80600060090160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505050565b600080612710600060030160149054906101000a900461ffff1661ffff16846115399190612e8e565b6115439190613031565b905060008060040154905060008111801561155d57508082115b6115675781611569565b805b92505050919050565b600080600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600260ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561165d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165490612b8b565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1663b8ac1b6860e01b33878760405160240161169493929190613062565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516116fe91906126ec565b600060405180830381855af49150503d8060008114611739576040519150601f19603f3d011682016040523d82523d6000602084013e61173e565b606091505b5091509150818190611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d9190612747565b60405180910390fd5b505050505050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b600080600a0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600260ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ca90612b8b565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16632196f29160e01b8a8a8a8a8a8a604051602401611910969594939291906130a0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161197a91906126ec565b600060405180830381855af49150503d80600081146119b5576040519150601f19603f3d011682016040523d82523d6000602084013e6119ba565b606091505b5091509150818190611a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f99190612747565b60405180910390fd5b50505050505050505050565b611a91846323b872dd60e01b858585604051602401611a2f939291906130f7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a97565b50505050565b6000611af9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b5e9092919063ffffffff16565b9050600081511115611b595780806020019051810190611b199190613166565b611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f90613205565b60405180910390fd5b5b505050565b6060611b6d8484600085611b76565b90509392505050565b606082471015611bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb290613297565b60405180910390fd5b611bc485611c8a565b611c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfa90613303565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c2c91906126ec565b60006040518083038185875af1925050503d8060008114611c69576040519150601f19603f3d011682016040523d82523d6000602084013e611c6e565b606091505b5091509150611c7e828286611c9d565b92505050949350505050565b600080823b905060008111915050919050565b60608315611cad57829050611cfd565b600083511115611cc05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf49190612747565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d6b82611d22565b810181811067ffffffffffffffff82111715611d8a57611d89611d33565b5b80604052505050565b6000611d9d611d04565b9050611da98282611d62565b919050565b600067ffffffffffffffff821115611dc957611dc8611d33565b5b611dd282611d22565b9050602081019050919050565b82818337600083830152505050565b6000611e01611dfc84611dae565b611d93565b905082815260208101848484011115611e1d57611e1c611d1d565b5b611e28848285611ddf565b509392505050565b600082601f830112611e4557611e44611d18565b5b8135611e55848260208601611dee565b91505092915050565b600060208284031215611e7457611e73611d0e565b5b600082013567ffffffffffffffff811115611e9257611e91611d13565b5b611e9e84828501611e30565b91505092915050565b600060ff82169050919050565b611ebd81611ea7565b8114611ec857600080fd5b50565b600081359050611eda81611eb4565b92915050565b600060208284031215611ef657611ef5611d0e565b5b6000611f0484828501611ecb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f3882611f0d565b9050919050565b611f4881611f2d565b82525050565b6000602082019050611f636000830184611f3f565b92915050565b611f7281611f2d565b8114611f7d57600080fd5b50565b600081359050611f8f81611f69565b92915050565b600060208284031215611fab57611faa611d0e565b5b6000611fb984828501611f80565b91505092915050565b600061ffff82169050919050565b611fd981611fc2565b8114611fe457600080fd5b50565b600081359050611ff681611fd0565b92915050565b6000819050919050565b61200f81611ffc565b811461201a57600080fd5b50565b60008135905061202c81612006565b92915050565b6000806040838503121561204957612048611d0e565b5b600061205785828601611fe7565b92505060206120688582860161201d565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261209257612091611d18565b5b8235905067ffffffffffffffff8111156120af576120ae612072565b5b6020830191508360208202830111156120cb576120ca612077565b5b9250929050565b6000806000604084860312156120eb576120ea611d0e565b5b60006120f986828701611f80565b935050602084013567ffffffffffffffff81111561211a57612119611d13565b5b6121268682870161207c565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61216781611ffc565b82525050565b6000612179838361215e565b60208301905092915050565b6000602082019050919050565b600061219d82612132565b6121a7818561213d565b93506121b28361214e565b8060005b838110156121e35781516121ca888261216d565b97506121d583612185565b9250506001810190506121b6565b5085935050505092915050565b6000602082019050818103600083015261220a8184612192565b905092915050565b61221b81611ea7565b82525050565b60006020820190506122366000830184612212565b92915050565b6000806000806060858703121561225657612255611d0e565b5b600061226487828801611f80565b945050602061227587828801611f80565b935050604085013567ffffffffffffffff81111561229657612295611d13565b5b6122a28782880161207c565b925092505092959194509250565b60008083601f8401126122c6576122c5611d18565b5b8235905067ffffffffffffffff8111156122e3576122e2612072565b5b6020830191508360208202830111156122ff576122fe612077565b5b9250929050565b6000806000806000806080878903121561232357612322611d0e565b5b600061233189828a01611fe7565b965050602061234289828a0161201d565b955050604087013567ffffffffffffffff81111561236357612362611d13565b5b61236f89828a016122b0565b9450945050606087013567ffffffffffffffff81111561239257612391611d13565b5b61239e89828a016122b0565b92509250509295509295509295565b600080600080600080608087890312156123ca576123c9611d0e565b5b60006123d889828a01611f80565b96505060206123e989828a01611f80565b955050604087013567ffffffffffffffff81111561240a57612409611d13565b5b61241689828a0161207c565b9450945050606087013567ffffffffffffffff81111561243957612438611d13565b5b61244589828a0161207c565b92509250509295509295509295565b6000806040838503121561246b5761246a611d0e565b5b600061247985828601611f80565b925050602061248a85828601611ecb565b9150509250929050565b6000602082840312156124aa576124a9611d0e565b5b60006124b88482850161201d565b91505092915050565b6124ca81611ffc565b82525050565b60006020820190506124e560008301846124c1565b92915050565b6000806040838503121561250257612501611d0e565b5b600061251085828601611f80565b925050602083013567ffffffffffffffff81111561253157612530611d13565b5b61253d85828601611e30565b9150509250929050565b600082825260208201905092915050565b7f4d696e696e67334167656e743a2070726963696e67207374726174656779206e60008201527f6f74207365740000000000000000000000000000000000000000000000000000602082015250565b60006125b4602683612547565b91506125bf82612558565b604082019050919050565b600060208201905081810360008301526125e3816125a7565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612624578082015181840152602081019050612609565b83811115612633576000848401525b50505050565b6000612644826125ea565b61264e81856125f5565b935061265e818560208601612606565b61266781611d22565b840191505092915050565b60006060820190506126876000830186611f3f565b61269460208301856124c1565b81810360408301526126a68184612639565b9050949350505050565b600081905092915050565b60006126c6826125ea565b6126d081856126b0565b93506126e0818560208601612606565b80840191505092915050565b60006126f882846126bb565b915081905092915050565b600081519050919050565b600061271982612703565b6127238185612547565b9350612733818560208601612606565b61273c81611d22565b840191505092915050565b60006020820190508181036000830152612761818461270e565b905092915050565b7f4d696e696e67334167656e743a207374726174656779206e6f7420726567697360008201527f7465726564000000000000000000000000000000000000000000000000000000602082015250565b60006127c5602583612547565b91506127d082612769565b604082019050919050565b600060208201905081810360008301526127f4816127b8565b9050919050565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b6000612831601d83612547565b915061283c826127fb565b602082019050919050565b6000602082019050818103600083015261286081612824565b9050919050565b7f4d696e696e67334167656e743a20496e76616c696420726f79616c747920627060008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006128c3602183612547565b91506128ce82612867565b604082019050919050565b600060208201905081810360008301526128f2816128b6565b9050919050565b7f4d696e696e67334167656e743a2070726963696e67206e6f7420736574000000600082015250565b600061292f601d83612547565b915061293a826128f9565b602082019050919050565b6000602082019050818103600083015261295e81612922565b9050919050565b600080fd5b6000612976838561213d565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156129a9576129a8612965565b5b6020830292506129ba838584611ddf565b82840190509392505050565b60006040820190506129db6000830186611f3f565b81810360208301526129ee81848661296a565b9050949350505050565b600067ffffffffffffffff821115612a1357612a12611d33565b5b602082029050602081019050919050565b600081519050612a3381612006565b92915050565b6000612a4c612a47846129f8565b611d93565b90508083825260208201905060208402830185811115612a6f57612a6e612077565b5b835b81811015612a985780612a848882612a24565b845260208401935050602081019050612a71565b5050509392505050565b600082601f830112612ab757612ab6611d18565b5b8151612ac7848260208601612a39565b91505092915050565b600060208284031215612ae657612ae5611d0e565b5b600082015167ffffffffffffffff811115612b0457612b03611d13565b5b612b1084828501612aa2565b91505092915050565b7f4d696e696e67334167656e743a20616c6c6f77616e636520737472617465677960008201527f206e6f7420736574000000000000000000000000000000000000000000000000602082015250565b6000612b75602883612547565b9150612b8082612b19565b604082019050919050565b60006020820190508181036000830152612ba481612b68565b9050919050565b6000606082019050612bc06000830187611f3f565b612bcd6020830186611f3f565b8181036040830152612be081848661296a565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c5482611ffc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c8757612c86612c1a565b5b600182019050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612cc8601083612547565b9150612cd382612c92565b602082019050919050565b60006020820190508181036000830152612cf781612cbb565b9050919050565b7f4d696e696e67334167656e743a20696e76616c6964206f70657261746f720000600082015250565b6000612d34601e83612547565b9150612d3f82612cfe565b602082019050919050565b60006020820190508181036000830152612d6381612d27565b9050919050565b7f546f6b656e4c6f636b65723a206172726179206c656e677468206d69736d617460008201527f6368000000000000000000000000000000000000000000000000000000000000602082015250565b6000612dc6602283612547565b9150612dd182612d6a565b604082019050919050565b60006020820190508181036000830152612df581612db9565b9050919050565b7f4d696e696e67334167656e743a20696e73756666696369656e742062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e58602283612547565b9150612e6382612dfc565b604082019050919050565b60006020820190508181036000830152612e8781612e4b565b9050919050565b6000612e9982611ffc565b9150612ea483611ffc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612edd57612edc612c1a565b5b828202905092915050565b6000612ef382611ffc565b9150612efe83611ffc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f3357612f32612c1a565b5b828201905092915050565b6000612f4982611ffc565b9150612f5483611ffc565b925082821015612f6757612f66612c1a565b5b828203905092915050565b50565b6000612f826000836125f5565b9150612f8d82612f72565b600082019050919050565b600060a082019050612fad6000830189611f3f565b612fba6020830188611f3f565b8181036040830152612fcd81868861296a565b90508181036060830152612fe281848661296a565b90508181036080830152612ff581612f75565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061303c82611ffc565b915061304783611ffc565b92508261305757613056613002565b5b828204905092915050565b60006060820190506130776000830186611f3f565b6130846020830185611f3f565b81810360408301526130968184612639565b9050949350505050565b60006080820190506130b56000830189611f3f565b6130c26020830188611f3f565b81810360408301526130d581868861296a565b905081810360608301526130ea81848661296a565b9050979650505050505050565b600060608201905061310c6000830186611f3f565b6131196020830185611f3f565b61312660408301846124c1565b949350505050565b60008115159050919050565b6131438161312e565b811461314e57600080fd5b50565b6000815190506131608161313a565b92915050565b60006020828403121561317c5761317b611d0e565b5b600061318a84828501613151565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006131ef602a83612547565b91506131fa82613193565b604082019050919050565b6000602082019050818103600083015261321e816131e2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613281602683612547565b915061328c82613225565b604082019050919050565b600060208201905081810360008301526132b081613274565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006132ed601d83612547565b91506132f8826132b7565b602082019050919050565b6000602082019050818103600083015261331c816132e0565b905091905056fea26469706673582212206ad1e22937824ff4158ccea743e665834ba5952fa57437741b26db24ee47551d64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806357efe3741161007157806357efe3741461019d5780639e5dd438146101cd578063a77c9a63146101e9578063c9a3510014610219578063cef6d36814610235578063f2ef10d414610265576100b4565b80630c23763f146100b95780631cfed885146100d557806333a100ca1461010557806348f60b99146101215780634bbaaced1461013d5780634d57cee71461016d575b600080fd5b6100d360048036038101906100ce9190611e5e565b610281565b005b6100ef60048036038101906100ea9190611ee0565b6104a0565b6040516100fc9190611f4e565b60405180910390f35b61011f600480360381019061011a9190611f95565b610522565b005b61013b60048036038101906101369190612032565b610657565b005b610157600480360381019061015291906120d2565b61077a565b60405161016491906121f0565b60405180910390f35b61018760048036038101906101829190611f95565b6109b1565b6040516101949190612221565b60405180910390f35b6101b760048036038101906101b2919061223c565b610a09565b6040516101c491906121f0565b60405180910390f35b6101e760048036038101906101e29190612306565b610c43565b005b61020360048036038101906101fe91906123ad565b610e38565b60405161021091906121f0565b60405180910390f35b610233600480360381019061022e9190612454565b611418565b005b61024f600480360381019061024a9190612494565b611510565b60405161025c91906124d0565b60405180910390f35b61027f600480360381019061027a91906124eb565b611572565b005b600080600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561036c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610363906125ca565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16635973921b60e01b336000800154876040516024016103a793929190612672565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161041191906126ec565b600060405180830381855af49150503d806000811461044c576040519150601f19603f3d011682016040523d82523d6000602084013e610451565b606091505b5091509150818190610499576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104909190612747565b60405180910390fd5b5050505050565b600080600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905060008160ff16116105bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b2906127db565b60405180910390fd5b816000600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61065f61178e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e790612847565b60405180910390fd5b612710600060030160149054906101000a900461ffff1661ffff16111561074c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610743906128d9565b60405180910390fd5b81600060030160146101000a81548161ffff021916908361ffff160217905550806000600401819055505050565b6060600080600a0160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600160ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e90612945565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16634bbaaced60e01b33888860405160240161089e939291906129c6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161090891906126ec565b600060405180830381855afa9150503d8060008114610943576040519150601f19603f3d011682016040523d82523d6000602084013e610948565b606091505b5091509150818190610990576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109879190612747565b60405180910390fd5b50808060200190518101906109a59190612ad0565b93505050509392505050565b60008060090160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6060600080600a0160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600260ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90612b8b565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff166357efe37460e01b89898989604051602401610b2f9493929190612bab565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610b9991906126ec565b600060405180830381855afa9150503d8060008114610bd4576040519150601f19603f3d011682016040523d82523d6000602084013e610bd9565b606091505b5091509150818190610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c189190612747565b60405180910390fd5b5080806020019051810190610c369190612ad0565b9350505050949350505050565b610c4b61178e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd390612847565b60405180910390fd5b610ce68686610657565b60005b84849050811015610d8a57600160006009016000878785818110610d1057610d0f612beb565b5b9050602002016020810190610d259190611f95565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080610d8290612c49565b915050610ce9565b5060005b82829050811015610e2f57600260006009016000858585818110610db557610db4612beb565b5b9050602002016020810190610dca9190611f95565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080610e2790612c49565b915050610d8e565b50505050505050565b6060610e426117bb565b60000160009054906101000a900460ff1615610e93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8a90612cde565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480610ef95750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f90612d4a565b60405180910390fd5b828290508585905014610f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7790612ddc565b60405180910390fd5b610f8e8787878787876117e8565b6000610f9b88878761077a565b90506000604051806060016040528060008001548152602001600081526020016000815250905060005b878790508110156111e35760008060050160008a8a85818110610feb57610fea612beb565b5b90506020020135815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508087878481811061105457611053612beb565b5b90506020020135111561109c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109390612e6e565b60405180910390fd5b8686838181106110af576110ae612beb565b5b905060200201358103600060050160008b8b868181106110d2576110d1612beb565b5b90506020020135815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555086868381811061113b5761113a612beb565b5b9050602002013583600001516111519190612e8e565b836020018181516111629190612ee8565b9150818152505086868381811061117c5761117b612beb565b5b90506020020135836000015185848151811061119b5761119a612beb565b5b60200260200101516111ad9190612f3e565b6111b79190612e8e565b836040018181516111c89190612ee8565b915081815250505080806111db90612c49565b915050610fc5565b5060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600061121c8360400151611510565b905061127f33600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168386602001516112589190612ee8565b8573ffffffffffffffffffffffffffffffffffffffff16611a0e909392919063ffffffff16565b6112bb338c8386604001516112949190612f3e565b8573ffffffffffffffffffffffffffffffffffffffff16611a0e909392919063ffffffff16565b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632eb2c2d630338c8c8c8c6040518763ffffffff1660e01b815260040161132396959493929190612f98565b600060405180830381600087803b15801561133d57600080fd5b505af1158015611351573d6000803e3d6000fd5b505050508973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcac3ed26c9dd72a2c44999857298af9c72ba2d1ca9784f5dad48c933e2224c1160405160405180910390a4868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509450505050509695505050505050565b61142061178e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a890612847565b60405180910390fd5b80600060090160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505050565b600080612710600060030160149054906101000a900461ffff1661ffff16846115399190612e8e565b6115439190613031565b905060008060040154905060008111801561155d57508082115b6115675781611569565b805b92505050919050565b600080600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600260ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561165d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165490612b8b565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1663b8ac1b6860e01b33878760405160240161169493929190613062565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516116fe91906126ec565b600060405180830381855af49150503d8060008114611739576040519150601f19603f3d011682016040523d82523d6000602084013e61173e565b606091505b5091509150818190611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d9190612747565b60405180910390fd5b505050505050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b600080600a0160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600260ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ca90612b8b565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16632196f29160e01b8a8a8a8a8a8a604051602401611910969594939291906130a0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161197a91906126ec565b600060405180830381855af49150503d80600081146119b5576040519150601f19603f3d011682016040523d82523d6000602084013e6119ba565b606091505b5091509150818190611a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f99190612747565b60405180910390fd5b50505050505050505050565b611a91846323b872dd60e01b858585604051602401611a2f939291906130f7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a97565b50505050565b6000611af9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b5e9092919063ffffffff16565b9050600081511115611b595780806020019051810190611b199190613166565b611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f90613205565b60405180910390fd5b5b505050565b6060611b6d8484600085611b76565b90509392505050565b606082471015611bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb290613297565b60405180910390fd5b611bc485611c8a565b611c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfa90613303565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c2c91906126ec565b60006040518083038185875af1925050503d8060008114611c69576040519150601f19603f3d011682016040523d82523d6000602084013e611c6e565b606091505b5091509150611c7e828286611c9d565b92505050949350505050565b600080823b905060008111915050919050565b60608315611cad57829050611cfd565b600083511115611cc05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf49190612747565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d6b82611d22565b810181811067ffffffffffffffff82111715611d8a57611d89611d33565b5b80604052505050565b6000611d9d611d04565b9050611da98282611d62565b919050565b600067ffffffffffffffff821115611dc957611dc8611d33565b5b611dd282611d22565b9050602081019050919050565b82818337600083830152505050565b6000611e01611dfc84611dae565b611d93565b905082815260208101848484011115611e1d57611e1c611d1d565b5b611e28848285611ddf565b509392505050565b600082601f830112611e4557611e44611d18565b5b8135611e55848260208601611dee565b91505092915050565b600060208284031215611e7457611e73611d0e565b5b600082013567ffffffffffffffff811115611e9257611e91611d13565b5b611e9e84828501611e30565b91505092915050565b600060ff82169050919050565b611ebd81611ea7565b8114611ec857600080fd5b50565b600081359050611eda81611eb4565b92915050565b600060208284031215611ef657611ef5611d0e565b5b6000611f0484828501611ecb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f3882611f0d565b9050919050565b611f4881611f2d565b82525050565b6000602082019050611f636000830184611f3f565b92915050565b611f7281611f2d565b8114611f7d57600080fd5b50565b600081359050611f8f81611f69565b92915050565b600060208284031215611fab57611faa611d0e565b5b6000611fb984828501611f80565b91505092915050565b600061ffff82169050919050565b611fd981611fc2565b8114611fe457600080fd5b50565b600081359050611ff681611fd0565b92915050565b6000819050919050565b61200f81611ffc565b811461201a57600080fd5b50565b60008135905061202c81612006565b92915050565b6000806040838503121561204957612048611d0e565b5b600061205785828601611fe7565b92505060206120688582860161201d565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261209257612091611d18565b5b8235905067ffffffffffffffff8111156120af576120ae612072565b5b6020830191508360208202830111156120cb576120ca612077565b5b9250929050565b6000806000604084860312156120eb576120ea611d0e565b5b60006120f986828701611f80565b935050602084013567ffffffffffffffff81111561211a57612119611d13565b5b6121268682870161207c565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61216781611ffc565b82525050565b6000612179838361215e565b60208301905092915050565b6000602082019050919050565b600061219d82612132565b6121a7818561213d565b93506121b28361214e565b8060005b838110156121e35781516121ca888261216d565b97506121d583612185565b9250506001810190506121b6565b5085935050505092915050565b6000602082019050818103600083015261220a8184612192565b905092915050565b61221b81611ea7565b82525050565b60006020820190506122366000830184612212565b92915050565b6000806000806060858703121561225657612255611d0e565b5b600061226487828801611f80565b945050602061227587828801611f80565b935050604085013567ffffffffffffffff81111561229657612295611d13565b5b6122a28782880161207c565b925092505092959194509250565b60008083601f8401126122c6576122c5611d18565b5b8235905067ffffffffffffffff8111156122e3576122e2612072565b5b6020830191508360208202830111156122ff576122fe612077565b5b9250929050565b6000806000806000806080878903121561232357612322611d0e565b5b600061233189828a01611fe7565b965050602061234289828a0161201d565b955050604087013567ffffffffffffffff81111561236357612362611d13565b5b61236f89828a016122b0565b9450945050606087013567ffffffffffffffff81111561239257612391611d13565b5b61239e89828a016122b0565b92509250509295509295509295565b600080600080600080608087890312156123ca576123c9611d0e565b5b60006123d889828a01611f80565b96505060206123e989828a01611f80565b955050604087013567ffffffffffffffff81111561240a57612409611d13565b5b61241689828a0161207c565b9450945050606087013567ffffffffffffffff81111561243957612438611d13565b5b61244589828a0161207c565b92509250509295509295509295565b6000806040838503121561246b5761246a611d0e565b5b600061247985828601611f80565b925050602061248a85828601611ecb565b9150509250929050565b6000602082840312156124aa576124a9611d0e565b5b60006124b88482850161201d565b91505092915050565b6124ca81611ffc565b82525050565b60006020820190506124e560008301846124c1565b92915050565b6000806040838503121561250257612501611d0e565b5b600061251085828601611f80565b925050602083013567ffffffffffffffff81111561253157612530611d13565b5b61253d85828601611e30565b9150509250929050565b600082825260208201905092915050565b7f4d696e696e67334167656e743a2070726963696e67207374726174656779206e60008201527f6f74207365740000000000000000000000000000000000000000000000000000602082015250565b60006125b4602683612547565b91506125bf82612558565b604082019050919050565b600060208201905081810360008301526125e3816125a7565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612624578082015181840152602081019050612609565b83811115612633576000848401525b50505050565b6000612644826125ea565b61264e81856125f5565b935061265e818560208601612606565b61266781611d22565b840191505092915050565b60006060820190506126876000830186611f3f565b61269460208301856124c1565b81810360408301526126a68184612639565b9050949350505050565b600081905092915050565b60006126c6826125ea565b6126d081856126b0565b93506126e0818560208601612606565b80840191505092915050565b60006126f882846126bb565b915081905092915050565b600081519050919050565b600061271982612703565b6127238185612547565b9350612733818560208601612606565b61273c81611d22565b840191505092915050565b60006020820190508181036000830152612761818461270e565b905092915050565b7f4d696e696e67334167656e743a207374726174656779206e6f7420726567697360008201527f7465726564000000000000000000000000000000000000000000000000000000602082015250565b60006127c5602583612547565b91506127d082612769565b604082019050919050565b600060208201905081810360008301526127f4816127b8565b9050919050565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b6000612831601d83612547565b915061283c826127fb565b602082019050919050565b6000602082019050818103600083015261286081612824565b9050919050565b7f4d696e696e67334167656e743a20496e76616c696420726f79616c747920627060008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006128c3602183612547565b91506128ce82612867565b604082019050919050565b600060208201905081810360008301526128f2816128b6565b9050919050565b7f4d696e696e67334167656e743a2070726963696e67206e6f7420736574000000600082015250565b600061292f601d83612547565b915061293a826128f9565b602082019050919050565b6000602082019050818103600083015261295e81612922565b9050919050565b600080fd5b6000612976838561213d565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156129a9576129a8612965565b5b6020830292506129ba838584611ddf565b82840190509392505050565b60006040820190506129db6000830186611f3f565b81810360208301526129ee81848661296a565b9050949350505050565b600067ffffffffffffffff821115612a1357612a12611d33565b5b602082029050602081019050919050565b600081519050612a3381612006565b92915050565b6000612a4c612a47846129f8565b611d93565b90508083825260208201905060208402830185811115612a6f57612a6e612077565b5b835b81811015612a985780612a848882612a24565b845260208401935050602081019050612a71565b5050509392505050565b600082601f830112612ab757612ab6611d18565b5b8151612ac7848260208601612a39565b91505092915050565b600060208284031215612ae657612ae5611d0e565b5b600082015167ffffffffffffffff811115612b0457612b03611d13565b5b612b1084828501612aa2565b91505092915050565b7f4d696e696e67334167656e743a20616c6c6f77616e636520737472617465677960008201527f206e6f7420736574000000000000000000000000000000000000000000000000602082015250565b6000612b75602883612547565b9150612b8082612b19565b604082019050919050565b60006020820190508181036000830152612ba481612b68565b9050919050565b6000606082019050612bc06000830187611f3f565b612bcd6020830186611f3f565b8181036040830152612be081848661296a565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c5482611ffc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c8757612c86612c1a565b5b600182019050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612cc8601083612547565b9150612cd382612c92565b602082019050919050565b60006020820190508181036000830152612cf781612cbb565b9050919050565b7f4d696e696e67334167656e743a20696e76616c6964206f70657261746f720000600082015250565b6000612d34601e83612547565b9150612d3f82612cfe565b602082019050919050565b60006020820190508181036000830152612d6381612d27565b9050919050565b7f546f6b656e4c6f636b65723a206172726179206c656e677468206d69736d617460008201527f6368000000000000000000000000000000000000000000000000000000000000602082015250565b6000612dc6602283612547565b9150612dd182612d6a565b604082019050919050565b60006020820190508181036000830152612df581612db9565b9050919050565b7f4d696e696e67334167656e743a20696e73756666696369656e742062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e58602283612547565b9150612e6382612dfc565b604082019050919050565b60006020820190508181036000830152612e8781612e4b565b9050919050565b6000612e9982611ffc565b9150612ea483611ffc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612edd57612edc612c1a565b5b828202905092915050565b6000612ef382611ffc565b9150612efe83611ffc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f3357612f32612c1a565b5b828201905092915050565b6000612f4982611ffc565b9150612f5483611ffc565b925082821015612f6757612f66612c1a565b5b828203905092915050565b50565b6000612f826000836125f5565b9150612f8d82612f72565b600082019050919050565b600060a082019050612fad6000830189611f3f565b612fba6020830188611f3f565b8181036040830152612fcd81868861296a565b90508181036060830152612fe281848661296a565b90508181036080830152612ff581612f75565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061303c82611ffc565b915061304783611ffc565b92508261305757613056613002565b5b828204905092915050565b60006060820190506130776000830186611f3f565b6130846020830185611f3f565b81810360408301526130968184612639565b9050949350505050565b60006080820190506130b56000830189611f3f565b6130c26020830188611f3f565b81810360408301526130d581868861296a565b905081810360608301526130ea81848661296a565b9050979650505050505050565b600060608201905061310c6000830186611f3f565b6131196020830185611f3f565b61312660408301846124c1565b949350505050565b60008115159050919050565b6131438161312e565b811461314e57600080fd5b50565b6000815190506131608161313a565b92915050565b60006020828403121561317c5761317b611d0e565b5b600061318a84828501613151565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006131ef602a83612547565b91506131fa82613193565b604082019050919050565b6000602082019050818103600083015261321e816131e2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613281602683612547565b915061328c82613225565b604082019050919050565b600060208201905081810360008301526132b081613274565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006132ed601d83612547565b91506132f8826132b7565b602082019050919050565b6000602082019050818103600083015261331c816132e0565b905091905056fea26469706673582212206ad1e22937824ff4158ccea743e665834ba5952fa57437741b26db24ee47551d64736f6c634300080b0033",
  "devdoc": {
    "author": "Shu Dong",
    "kind": "dev",
    "methods": {},
    "title": "PrimaryMarketFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Facet contract holding functions for primary market sale",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1674,
        "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)1671_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155Rewardable)1691": {
        "encoding": "inplace",
        "label": "contract IERC1155Rewardable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(BillingStatement)1628_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BillingStatement)",
        "numberOfBytes": "32",
        "value": "t_struct(BillingStatement)1628_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AppStorage)1671_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 1630,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "tokenCost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1633,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "nft",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC1155Rewardable)1691"
          },
          {
            "astId": 1635,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "paymentToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1637,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "custodian",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1639,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "royaltyBps",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 1641,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "royaltyCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1647,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "balances",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 1652,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "statements",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(BillingStatement)1628_storage)"
          },
          {
            "astId": 1654,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "chainlink",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1656,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "swapRouter",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 1658,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "swapRouterVersion",
            "offset": 20,
            "slot": "8",
            "type": "t_uint8"
          },
          {
            "astId": 1660,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "earningTokenSaleDiscount10000Based",
            "offset": 21,
            "slot": "8",
            "type": "t_uint16"
          },
          {
            "astId": 1664,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "strategyRegistry",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint8)"
          },
          {
            "astId": 1670,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "strategies",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_address))"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(BillingStatement)1628_storage": {
        "encoding": "inplace",
        "label": "struct BillingStatement",
        "members": [
          {
            "astId": 1623,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1625,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "surplus",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1627,
            "contract": "contracts/agent/facets/PrimaryMarketFacet.sol:PrimaryMarketFacet",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}