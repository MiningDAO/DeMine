{
  "address": "0x43e190dc64E33815c22AE76CF8898e9b371492CE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expireAt",
          "type": "uint256"
        }
      ],
      "name": "BillingSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "billing",
          "type": "uint256"
        }
      ],
      "name": "CloseBilling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LockPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "billing",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxToPay",
          "type": "uint256"
        }
      ],
      "name": "buyWithLockedPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "collectResidue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "getStatement",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "income",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            }
          ],
          "internalType": "struct Statement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unitSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manualCloseBilling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryBilling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x31ba9f37387f46e5c96fdc111232130bc93c8b2ec07f79a07fa09a1982c606f1",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0x43e190dc64E33815c22AE76CF8898e9b371492CE",
    "transactionIndex": 0,
    "gasUsed": "2633455",
    "logsBloom": "0x
    "blockHash": "0x8b0c83855df7ee97882da4db1db8fa84dc7f711a53393afa81ecaf5986159fe4",
    "transactionHash": "0x31ba9f37387f46e5c96fdc111232130bc93c8b2ec07f79a07fa09a1982c606f1",
    "logs": [],
    "blockNumber": 16356693,
    "cumulativeGasUsed": "2633455",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4094bf7bc15c68cbad2d342107209c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireAt\",\"type\":\"uint256\"}],\"name\":\"BillingSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"billing\",\"type\":\"uint256\"}],\"name\":\"CloseBilling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"billing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"name\":\"RewardTokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxToPay\",\"type\":\"uint256\"}],\"name\":\"buyWithLockedPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"collectResidue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"getStatement\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"internalType\":\"struct Statement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unitSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualCloseBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shu Dong\",\"kind\":\"dev\",\"methods\":{\"buyWithLockedPrice(uint256)\":{\"params\":{\"maxToPay\":\"The max amount of cost to pay\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"recipient\":\"Address of account to accept payment\"}}},\"title\":\"BillingFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyWithLockedPrice(uint256)\":{\"notice\":\"buy income token with locked price\"},\"collectResidue(address,uint256,uint256)\":{\"notice\":\"Collect income leftover, no waste\"},\"lockPrice()\":{\"notice\":\"lock price to buy income token in income token sale\"},\"tryBilling()\":{\"notice\":\"It will try to sell income token at Uniswap to pay bill and start income token sale if it fails\"},\"withdraw(address,uint256)\":{\"notice\":\"withdraw payment from contract\"}},\"notice\":\"billing related functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agent/facets/BillingFacet.sol\":\"BillingFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x947bcb3e54346eb9721847ded4ebfa3f1ad3487fb0260ff53ce38f1445ff409e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x4320cf85e76e22ddc87d010c9836a91e2150d631d33f5b23ac60231a7a751b7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xfac19be5f0d198ac556731a5589a4ae1c0c1622437d0b6b53b2cf3f317071acd\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/agent/facets/BillingFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\nimport '../../nft/interfaces/IERC1155Rewardable.sol';\\nimport '../../shared/lib/LibPausable.sol';\\nimport '../../shared/lib/Util.sol';\\nimport '../lib/AppStorage.sol';\\nimport '../lib/BillingStorage.sol';\\n\\n/**\\n * @title BillingFacet\\n * @author Shu Dong\\n * @notice billing related functions\\n */\\ncontract BillingFacet is PausableModifier, OwnableInternal {\\n    AppStorage internal s;\\n\\n    using SafeERC20 for IERC20;\\n\\n    event RewardTokenSold(address indexed billing, uint sold, uint paid);\\n    event CloseBilling(uint indexed billing);\\n    event BillingSale(uint indexed, uint expireAt);\\n    event LockPrice(uint indexed, uint indexed);\\n    event Withdraw(address indexed recipient, uint amount);\\n\\n    /**\\n     * @notice withdraw payment from contract\\n     * @param recipient Address of account to accept payment\\n     * @param amount Amount to withdraw\\n     */\\n    function withdraw(address recipient, uint amount) external onlyOwner {\\n        s.payment.safeTransfer(recipient, amount);\\n        emit Withdraw(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice It will try to sell income token at Uniswap\\n     * to pay bill and start income token sale if it fails\\n     */\\n    function tryBilling() external onlyOwner {\\n        BillingStorage.Layout storage l = BillingStorage.layout();\\n        require(\\n            l.stage == BillingStorage.Stage.NOT_STARTED,\\n            'DeMineAgent: billing in progress'\\n        );\\n        uint billing = s.billing;\\n        IERC1155Rewardable nft = s.nft;\\n        uint balance = nft.balanceOf(address(this), billing);\\n        uint debt = s.tokenCost * balance;\\n        if (debt == 0) {\\n            close(l, billing);\\n            return;\\n        }\\n        address alchemist = nft.getAlchemist();\\n        uint prevBalance = s.income.balanceOf(address(this));\\n        nft.safeTransferFrom(\\n            address(this), alchemist, billing, balance, ''\\n        );\\n        uint income = s.income.balanceOf(address(this)) - prevBalance;\\n        if (income == 0) {\\n            s.statements[billing].balance = balance;\\n            s.statements[billing].debt = debt;\\n            s.deposit -= s.statements[billing].debt;\\n            close(l, billing);\\n            return;\\n        }\\n        (bool success, uint sold) = trySwap(\\n            l.swapRouter, address(s.income), address(s.payment), income, debt\\n        );\\n        if (success) {\\n            s.statements[billing].balance = balance;\\n            s.statements[billing].income = income - sold;\\n            close(l, billing);\\n        } else {\\n            s.statements[billing] = Statement(balance, income, debt);\\n            uint saleExpireAt = block.timestamp + l.saleDuration;\\n            l.saleExpireAt = saleExpireAt;\\n            l.stage = BillingStorage.Stage.SALE_ONGOING;\\n            emit BillingSale(billing, saleExpireAt);\\n        }\\n    }\\n\\n    /**\\n     * @notice lock price to buy income token in income token sale\\n     */\\n    function lockPrice() external returns(uint unitSize, uint unitPrice) {\\n        BillingStorage.Layout storage l = BillingStorage.layout();\\n        require(\\n            l.stage == BillingStorage.Stage.SALE_ONGOING,\\n            'DeMineAgent: no sale on-going'\\n        );\\n        Statement memory st = s.statements[s.billing];\\n        uint price = getNormalizedChainlinkPriceWithDiscount(l);\\n        uint incomeBase = base(s.income);\\n        uint maxCostTokenTraded = price * st.income / incomeBase;\\n        (unitSize, unitPrice) = maxCostTokenTraded > st.debt\\n            ? calcUnitPrice(price, incomeBase)\\n            : calcUnitPrice(st.debt, st.income);\\n        l.lockedPrices[msg.sender] = BillingStorage.LockedPrice(\\n            unitSize, unitPrice, block.timestamp + l.priceLockDuration\\n        );\\n        emit LockPrice(unitSize, unitPrice);\\n    }\\n\\n    /**\\n     * @notice buy income token with locked price\\n     * @param maxToPay The max amount of cost to pay\\n     */\\n    function buyWithLockedPrice(uint maxToPay) external {\\n        BillingStorage.Layout storage l = BillingStorage.layout();\\n        require(\\n            l.stage == BillingStorage.Stage.SALE_ONGOING,\\n            'DeMineAgent: no sale on-going'\\n        );\\n        BillingStorage.LockedPrice memory p = l.lockedPrices[msg.sender];\\n        require(block.timestamp < p.expireAt, 'DeMineAgent: price expired');\\n        uint billing = s.billing;\\n        Statement memory st = s.statements[billing];\\n        uint unitToBuy = Util.min3(\\n            maxToPay / p.unitPrice,\\n            Util.ceil(st.debt, p.unitPrice),\\n            st.income / p.unitSize\\n        );\\n        uint checkout = unitToBuy * p.unitPrice;\\n        uint rewardTokenSold = unitToBuy * p.unitSize;\\n        s.statements[billing].income = st.income - rewardTokenSold;\\n        if (checkout < st.debt) {\\n            s.statements[billing].debt = st.debt - checkout;\\n        } else {\\n            s.statements[billing].debt = 0;\\n            close(l, s.billing);\\n        }\\n        s.payment.safeTransferFrom(msg.sender, s.payee, checkout);\\n        s.income.safeTransfer(msg.sender, rewardTokenSold);\\n        emit RewardTokenSold(msg.sender, rewardTokenSold, checkout);\\n    }\\n\\n    function manualCloseBilling() external onlyOwner {\\n        BillingStorage.Layout storage l = BillingStorage.layout();\\n        BillingStorage.Stage stage = l.stage;\\n        require(\\n            stage == BillingStorage.Stage.SALE_ONGOING &&\\n                block.timestamp > l.saleExpireAt,\\n            'DeMineAgent: no action required yet'\\n        );\\n        uint billing = s.billing;\\n        s.deposit -= s.statements[s.billing].debt;\\n        close(l, billing);\\n    }\\n\\n    /**\\n     * @notice Collect income leftover, no waste\\n     */\\n    function collectResidue(\\n        address recipient,\\n        uint start,\\n        uint end\\n    ) external onlyOwner {\\n        require(end < s.billing, 'DeMineAgent: token not billed yet');\\n        uint total;\\n        for (uint id = start; id <= end; id++) {\\n            uint income = s.statements[s.billing].income;\\n            uint balance = s.statements[s.billing].income;\\n            total += income - (income / balance) * balance;\\n        }\\n        s.income.safeTransferFrom(address(this), recipient, total);\\n    }\\n\\n    function getStatement(uint token) external view returns(Statement memory) {\\n        return s.statements[token];\\n    }\\n\\n    function trySwap(\\n        address swapRouter,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountInMaximum,\\n        uint amountOut\\n    ) internal returns(bool, uint) {\\n        TransferHelper.safeApprove(tokenIn, swapRouter, amountInMaximum);\\n        ISwapRouter.ExactOutputSingleParams memory param =\\n            ISwapRouter.ExactOutputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: 3000, // 0.3%\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum,\\n                sqrtPriceLimitX96: 0\\n        });\\n        (bool success, bytes memory encoded) = swapRouter.call(\\n            abi.encodeWithSignature(\\n                'exactOutputSingle((address,address,uint24,address,uint,uiint256,uint,uint160))',\\n                param\\n            )\\n        );\\n        TransferHelper.safeApprove(tokenIn, swapRouter, 0);\\n        if (success) {\\n            (uint amountIn) = abi.decode(encoded, (uint));\\n            return (true, amountIn);\\n        } else {\\n            return (false, 0);\\n        }\\n    }\\n\\n    function getNormalizedChainlinkPriceWithDiscount(\\n        BillingStorage.Layout storage l\\n    ) private view returns(uint) {\\n        (,int price, , ,) = l.chainlink.latestRoundData();\\n        if (price <= 0) { return 0; }\\n        uint chainlinkBase = 10 ** (l.chainlink.decimals());\\n        uint normalized = uint(price) * base(s.payment) / chainlinkBase;\\n        return normalized * l.discount / 10000;\\n    }\\n\\n    function base(IERC20 token) private view returns(uint) {\\n        uint8 decimals = IERC20Metadata(address(token)).decimals();\\n        return 10 ** decimals;\\n    }\\n\\n    function calcUnitPrice(\\n          uint cost,\\n          uint income\\n    ) private pure returns(uint, uint) {\\n        if (cost > income) {\\n            /**\\n              cost = 100, income = 1000, then unit = 10, price = 1,\\n              which means you have to buy at least 10 income tokens\\n              each time and each unit cost 1 cost token\\n            */\\n            return (1, Util.ceil(cost, income));\\n        } else {\\n            /**\\n              cost = 1000, income = 100, then unit = 1, price = 10,\\n              which means you can buy at least 1 income token each\\n              time and each income token cost 10 cost token\\n            */\\n            uint unitSize = Util.ceil(income, cost);\\n            return (unitSize, Util.ceil(cost, income / unitSize));\\n        }\\n    }\\n\\n    function close(BillingStorage.Layout storage l, uint billing) private {\\n        s.billing = billing + 1;\\n        l.stage = BillingStorage.Stage.NOT_STARTED;\\n        emit CloseBilling(billing);\\n    }\\n}\\n\",\"keccak256\":\"0xbaaa8a4c4a11c2d7cb72effe81303abc334a7360d1fbc28fbba8a70577369757\",\"license\":\"MIT\"},\"contracts/agent/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport '../../nft/interfaces/IERC1155Rewardable.sol';\\n\\nstruct Account {\\n    uint start; // starting from 2**256 - 1 - start\\n    uint end;\\n    uint maxBalance;\\n}\\n\\nstruct Statement {\\n    uint balance;\\n    uint income;\\n    uint debt;\\n}\\n\\nstruct AppStorage {\\n    uint tokenCost; // cost per nft in cost token\\n\\n    IERC20 income;\\n    IERC20 payment;\\n    IERC1155Rewardable nft; // DeMineNFT contract address\\n    address payee; // payee account address, could be contract\\n\\n    bool initialized;\\n    uint8 depositMultiplier; // deposit = maxBalance * tokenCost * depositMultiplier\\n    uint deposit; // total deposit in cost token\\n    uint billing; // current billing token\\n    // billing statement\\n    mapping(uint => Statement) statements;\\n    // account info\\n    mapping(address => Account) accounts;\\n    // tokenId => account => price\\n    mapping(uint => mapping(address => uint)) balances;\\n    // owner => buyer => allowance\\n    mapping(address => mapping(address => mapping(uint => uint))) allowances;\\n}\\n\",\"keccak256\":\"0x5aec62920461e39e7ad1a1c6e5664a49205b5c823df44412e7de46555d8f910f\",\"license\":\"MIT\"},\"contracts/agent/lib/BillingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary BillingStorage {\\n    enum Stage{ NOT_STARTED, SALE_ONGOING }\\n\\n    struct LockedPrice {\\n        uint unitSize;\\n        uint unitPrice;\\n        uint expireAt;\\n    }\\n\\n    struct Layout {\\n        AggregatorV3Interface chainlink;\\n        address swapRouter;\\n        Stage stage;\\n        uint8 shrinkSize; // num of tokens we shrink starting from mining\\n        uint16 discount; // 10000 based\\n        uint16 saleDuration; // as second\\n        uint16 priceLockDuration; // as second\\n        uint shrinked; // latest token shrinked\\n        uint saleExpireAt; // timestamp\\n        mapping(address => LockedPrice) lockedPrices;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.agent.contracts.storage.Billing');\\n\\n    function layout() internal pure returns(Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x592f215a9b4511b0920d3b920ece945438a9015d5029dd5388a247cd411b8c61\",\"license\":\"MIT\"},\"contracts/nft/interfaces/IERC1155Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IERC1155Rewardable is IERC1155 {\\n    function getRewardToken() external view returns (address);\\n\\n    function getAlchemist() external view returns (address);\\n}\\n\",\"keccak256\":\"0x09ea4e949a032f37aba6efc00da2bc04b487c515aed23d12d3d566ed71aa1e74\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x18947b3b25f2912d86757e56560ee9d2d7c15bc4210e532d5de21006e90168f2\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xaf03bc9d579efb830f432cab5ba9dd61eb10015af38b7344f4ef46c42844ec59\",\"license\":\"MIT\"},\"contracts/shared/lib/Util.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary Util {\\n    function ceil(uint a, uint m) internal pure returns(uint) {\\n        return ((a + m - 1) / m) * m;\\n    }\\n\\n    function max3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a > b ? max2(a, c) : max2(b, c);\\n    }\\n\\n    function max2(uint a, uint b) internal pure returns(uint) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min2(uint a, uint b) internal pure returns(uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function min3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a < b ? min2(a, c) : min2(b, c);\\n    }\\n}\\n\",\"keccak256\":\"0x193f1007ad3b88a0004c61926889148930897c66b930fea0680af8cae124a68c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612ee8806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a620ec071161005b578063a620ec07146100ed578063d28cecdd146100f7578063f3fef3a314610101578063faaa877e1461011d5761007d565b806350003e69146100825780637c842810146100a15780639258d470146100bd575b600080fd5b61008a610139565b604051610098929190612785565b60405180910390f35b6100bb60048036038101906100b691906120cc565b6103b9565b005b6100d760048036038101906100d291906120cc565b6107ab565b6040516100e4919061274f565b60405180910390f35b6100f56107f9565b005b6100ff610f3e565b005b61011b60048036038101906101169190612018565b61110b565b005b61013760048036038101906101329190612054565b611246565b005b6000806000610146611413565b9050600180811115610181577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160010160149054906101000a900460ff1660018111156101cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461020b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020290612613565b60405180910390fd5b60008060070160008060060154815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050600061025c83611440565b9050600061028e600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611631565b90506000818460200151846102a391906129e9565b6102ad9190612847565b9050836040015181116102d1576102cc846040015185602001516116c9565b6102dc565b6102db83836116c9565b5b8097508198505050604051806060016040528088815260200187815260200186600101601a9054906101000a900461ffff1661ffff164261031d91906127f1565b8152508560040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505085877fdb9383e44e66cc8811d91a1ec82db8af408c60044293a6a08cff49c88dfd258960405160405180910390a350505050509091565b60006103c3611413565b90506001808111156103fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160010160149054906101000a900460ff166001811115610448577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047f90612613565b60405180910390fd5b60008160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060400151421061053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390612673565b60405180910390fd5b60008060060154905060008060070160008381526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060006105c784602001518761059c9190612847565b6105ae8460400151876020015161171a565b866000015185602001516105c29190612847565b611752565b905060008460200151826105db91906129e9565b905060008560000151836105ef91906129e9565b90508084602001516106019190612a43565b6000600701600087815260200190815260200160002060010181905550836040015182101561065c5781846040015161063a9190612a43565b600060070160008781526020019081526020016000206002018190555061068a565b6000806007016000878152602001908152602001600020600201819055506106898760006006015461177e565b5b61070133600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611818909392919063ffffffff16565b6107513382600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118a19092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f47f1fea3b5815b5f572137784f8bc49ca165c79598976847d9f917ad8911db388284604051610799929190612785565b60405180910390a25050505050505050565b6107b3611f26565b6000600701600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b610801611927565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088990612653565b60405180910390fd5b600061089c611413565b9050600060018111156108d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160010160149054906101000a900460ff166001811115610922577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610962576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610959906126d3565b60405180910390fd5b60008060060154905060008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1662fdd58e30856040518363ffffffff1660e01b81526004016109d09291906125a8565b60206040518083038186803b1580156109e857600080fd5b505afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906120f5565b90506000816000800154610a3491906129e9565b90506000811415610a5357610a49858561177e565b5050505050610f3c565b60008373ffffffffffffffffffffffffffffffffffffffff16633759425d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190611fef565b905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b3491906124fe565b60206040518083038186803b158015610b4c57600080fd5b505afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8491906120f5565b90508473ffffffffffffffffffffffffffffffffffffffff1663f242432a308489886040518563ffffffff1660e01b8152600401610bc59493929190612550565b600060405180830381600087803b158015610bdf57600080fd5b505af1158015610bf3573d6000803e3d6000fd5b50505050600081600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c5891906124fe565b60206040518083038186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca891906120f5565b610cb29190612a43565b90506000811415610d4557846000600701600089815260200190815260200160002060000181905550836000600701600089815260200190815260200160002060020181905550600060070160008881526020019081526020016000206002015460006005016000828254610d279190612a43565b92505081905550610d38888861177e565b5050505050505050610f3c565b600080610dc38a60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868a611954565b915091508115610e235786600060070160008b8152602001908152602001600020600001819055508083610df79190612a43565b600060070160008b815260200190815260200160002060010181905550610e1e8a8a61177e565b610f31565b604051806060016040528088815260200184815260200187815250600060070160008b815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505060008a60010160189054906101000a900461ffff1661ffff1642610e9991906127f1565b9050808b6003018190555060018b60010160146101000a81548160ff02191690836001811115610ef2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550897f31aa8189dff134dd0576f04235144fccd57510d46d9bade2f5289251219ab82982604051610f27919061276a565b60405180910390a2505b505050505050505050505b565b610f46611927565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce90612653565b60405180910390fd5b6000610fe1611413565b905060008160010160149054906101000a900460ff169050600180811115611032577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600181111561106b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14801561107b5750816003015442115b6110ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b1906126f3565b60405180910390fd5b600080600601549050600060070160008060060154815260200190815260200160002060020154600060050160008282546110f59190612a43565b92505081905550611106838261177e565b505050565b611113611927565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612653565b60405180910390fd5b6111f48282600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118a19092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161123a919061276a565b60405180910390a25050565b61124e611927565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d690612653565b60405180910390fd5b6000600601548110611326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131d90612713565b60405180910390fd5b6000808390505b8281116113ba576000806007016000806006015481526020019081526020016000206001015490506000806007016000806006015481526020019081526020016000206001015490508081836113839190612847565b61138d91906129e9565b826113989190612a43565b846113a391906127f1565b9350505080806113b290612b2e565b91505061132d565b5061140d308583600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611818909392919063ffffffff16565b50505050565b6000807f1ae9d8d83f6f65ae1abd9acc0aca63e8c998a929dbd5efa644fcec5a336894a690508091505090565b6000808260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156114ad57600080fd5b505afa1580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e5919061211e565b505050915050600081136114fd57600091505061162c565b60008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a19190612195565b600a6115ad91906128cb565b90506000816115e0600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611631565b846115eb91906129e9565b6115f59190612847565b90506127108560010160169054906101000a900461ffff1661ffff168261161c91906129e9565b6116269190612847565b93505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561167a57600080fd5b505afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190612195565b905080600a6116c191906128cb565b915050919050565b600080828411156116e95760016116e0858561171a565b91509150611713565b60006116f5848661171a565b90508061170d8683876117089190612847565b61171a565b92509250505b9250929050565b600081826001848661172c91906127f1565b6117369190612a43565b6117409190612847565b61174a91906129e9565b905092915050565b600082841061176a576117658383611b4b565b611775565b6117748483611b4b565b5b90509392505050565b60018161178b91906127f1565b60006006018190555060008260010160146101000a81548160ff021916908360018111156117e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550807f3b60a8eedd1361983e95cb96ee4a32b37bf8480d8fa8d11a909f9deee6e2e5c660405160405180910390a25050565b61189b846323b872dd60e01b85858560405160240161183993929190612519565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b64565b50505050565b6119228363a9059cbb60e01b84846040516024016118c09291906125a8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b64565b505050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b600080611962868886611c2b565b60006040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001858152602001868152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090506000808973ffffffffffffffffffffffffffffffffffffffff1683604051602401611a2b9190612733565b6040516020818303038152906040527f3ed209e4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611ab591906124e7565b6000604051808303816000865af19150503d8060008114611af2576040519150601f19603f3d011682016040523d82523d6000602084013e611af7565b606091505b5091509150611b08898b6000611c2b565b8115611b3657600081806020019051810190611b2491906120f5565b90506001819550955050505050611b41565b600080945094505050505b9550959350505050565b6000818310611b5a5781611b5c565b825b905092915050565b6000611bc6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611d809092919063ffffffff16565b9050600081511115611c265780806020019051810190611be691906120a3565b611c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1c906126b3565b60405180910390fd5b5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401611c609291906125a8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611cca91906124e7565b6000604051808303816000865af19150503d8060008114611d07576040519150601f19603f3d011682016040523d82523d6000602084013e611d0c565b606091505b5091509150818015611d3a5750600081511480611d39575080806020019051810190611d3891906120a3565b5b5b611d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d70906125f3565b60405180910390fd5b5050505050565b6060611d8f8484600085611d98565b90509392505050565b606082471015611ddd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd490612633565b60405180910390fd5b611de685611eac565b611e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1c90612693565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611e4e91906124e7565b60006040518083038185875af1925050503d8060008114611e8b576040519150601f19603f3d011682016040523d82523d6000602084013e611e90565b606091505b5091509150611ea0828286611ebf565b92505050949350505050565b600080823b905060008111915050919050565b60608315611ecf57829050611f1f565b600083511115611ee25782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1691906125d1565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b600081359050611f5681612e28565b92915050565b600081519050611f6b81612e28565b92915050565b600081519050611f8081612e3f565b92915050565b600081519050611f9581612e56565b92915050565b600081359050611faa81612e6d565b92915050565b600081519050611fbf81612e6d565b92915050565b600081519050611fd481612e9b565b92915050565b600081519050611fe981612e84565b92915050565b60006020828403121561200157600080fd5b600061200f84828501611f5c565b91505092915050565b6000806040838503121561202b57600080fd5b600061203985828601611f47565b925050602061204a85828601611f9b565b9150509250929050565b60008060006060848603121561206957600080fd5b600061207786828701611f47565b935050602061208886828701611f9b565b925050604061209986828701611f9b565b9150509250925092565b6000602082840312156120b557600080fd5b60006120c384828501611f71565b91505092915050565b6000602082840312156120de57600080fd5b60006120ec84828501611f9b565b91505092915050565b60006020828403121561210757600080fd5b600061211584828501611fb0565b91505092915050565b600080600080600060a0868803121561213657600080fd5b600061214488828901611fc5565b955050602061215588828901611f86565b945050604061216688828901611fb0565b935050606061217788828901611fb0565b925050608061218888828901611fc5565b9150509295509295909350565b6000602082840312156121a757600080fd5b60006121b584828501611fda565b91505092915050565b6121c781612a77565b82525050565b6121d681612a77565b82525050565b60006121e7826127ae565b6121f181856127d5565b9350612201818560208601612afb565b80840191505092915050565b6000612218826127b9565b61222281856127e0565b9350612232818560208601612afb565b61223b81612bd5565b840191505092915050565b60006122536002836127e0565b915061225e82612bf3565b602082019050919050565b6000612276601d836127e0565b915061228182612c1c565b602082019050919050565b60006122996026836127e0565b91506122a482612c45565b604082019050919050565b60006122bc601d836127e0565b91506122c782612c94565b602082019050919050565b60006122df601a836127e0565b91506122ea82612cbd565b602082019050919050565b60006123026000836127c4565b915061230d82612ce6565b600082019050919050565b6000612325601d836127e0565b915061233082612ce9565b602082019050919050565b6000612348602a836127e0565b915061235382612d12565b604082019050919050565b600061236b6020836127e0565b915061237682612d61565b602082019050919050565b600061238e6023836127e0565b915061239982612d8a565b604082019050919050565b60006123b16021836127e0565b91506123bc82612dd9565b604082019050919050565b610100820160008201516123de60008501826121be565b5060208201516123f160208501826121be565b50604082015161240460408501826124ba565b50606082015161241760608501826121be565b50608082015161242a60808501826124c9565b5060a082015161243d60a08501826124c9565b5060c082015161245060c08501826124c9565b5060e082015161246360e08501826124ab565b50505050565b60608201600082015161247f60008501826124c9565b50602082015161249260208501826124c9565b5060408201516124a560408501826124c9565b50505050565b6124b481612a9f565b82525050565b6124c381612abf565b82525050565b6124d281612ace565b82525050565b6124e181612ace565b82525050565b60006124f382846121dc565b915081905092915050565b600060208201905061251360008301846121cd565b92915050565b600060608201905061252e60008301866121cd565b61253b60208301856121cd565b61254860408301846124d8565b949350505050565b600060a08201905061256560008301876121cd565b61257260208301866121cd565b61257f60408301856124d8565b61258c60608301846124d8565b818103608083015261259d816122f5565b905095945050505050565b60006040820190506125bd60008301856121cd565b6125ca60208301846124d8565b9392505050565b600060208201905081810360008301526125eb818461220d565b905092915050565b6000602082019050818103600083015261260c81612246565b9050919050565b6000602082019050818103600083015261262c81612269565b9050919050565b6000602082019050818103600083015261264c8161228c565b9050919050565b6000602082019050818103600083015261266c816122af565b9050919050565b6000602082019050818103600083015261268c816122d2565b9050919050565b600060208201905081810360008301526126ac81612318565b9050919050565b600060208201905081810360008301526126cc8161233b565b9050919050565b600060208201905081810360008301526126ec8161235e565b9050919050565b6000602082019050818103600083015261270c81612381565b9050919050565b6000602082019050818103600083015261272c816123a4565b9050919050565b60006101008201905061274960008301846123c7565b92915050565b60006060820190506127646000830184612469565b92915050565b600060208201905061277f60008301846124d8565b92915050565b600060408201905061279a60008301856124d8565b6127a760208301846124d8565b9392505050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006127fc82612ace565b915061280783612ace565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561283c5761283b612b77565b5b828201905092915050565b600061285282612ace565b915061285d83612ace565b92508261286d5761286c612ba6565b5b828204905092915050565b6000808291508390505b60018511156128c25780860481111561289e5761289d612b77565b5b60018516156128ad5780820291505b80810290506128bb85612be6565b9450612882565b94509492505050565b60006128d682612ace565b91506128e183612ad8565b925061290e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612916565b905092915050565b60008261292657600190506129e2565b8161293457600090506129e2565b816001811461294a576002811461295457612983565b60019150506129e2565b60ff84111561296657612965612b77565b5b8360020a91508482111561297d5761297c612b77565b5b506129e2565b5060208310610133831016604e8410600b84101617156129b85782820a9050838111156129b3576129b2612b77565b5b6129e2565b6129c58484846001612878565b925090508184048111156129dc576129db612b77565b5b81810290505b9392505050565b60006129f482612ace565b91506129ff83612ace565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612a3857612a37612b77565b5b828202905092915050565b6000612a4e82612ace565b9150612a5983612ace565b925082821015612a6c57612a6b612b77565b5b828203905092915050565b6000612a8282612a9f565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b83811015612b19578082015181840152602081019050612afe565b83811115612b28576000848401525b50505050565b6000612b3982612ace565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b6c57612b6b612b77565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f44654d696e654167656e743a206e6f2073616c65206f6e2d676f696e67000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b7f44654d696e654167656e743a2070726963652065787069726564000000000000600082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a2062696c6c696e6720696e2070726f6772657373600082015250565b7f44654d696e654167656e743a206e6f20616374696f6e2072657175697265642060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a20746f6b656e206e6f742062696c6c656420796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b612e3181612a77565b8114612e3c57600080fd5b50565b612e4881612a89565b8114612e5357600080fd5b50565b612e5f81612a95565b8114612e6a57600080fd5b50565b612e7681612ace565b8114612e8157600080fd5b50565b612e8d81612ad8565b8114612e9857600080fd5b50565b612ea481612ae5565b8114612eaf57600080fd5b5056fea2646970667358221220940480358c4428fea5cafd944a8b93007c5733afbbb3eb820116adb0c01ae46364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a620ec071161005b578063a620ec07146100ed578063d28cecdd146100f7578063f3fef3a314610101578063faaa877e1461011d5761007d565b806350003e69146100825780637c842810146100a15780639258d470146100bd575b600080fd5b61008a610139565b604051610098929190612785565b60405180910390f35b6100bb60048036038101906100b691906120cc565b6103b9565b005b6100d760048036038101906100d291906120cc565b6107ab565b6040516100e4919061274f565b60405180910390f35b6100f56107f9565b005b6100ff610f3e565b005b61011b60048036038101906101169190612018565b61110b565b005b61013760048036038101906101329190612054565b611246565b005b6000806000610146611413565b9050600180811115610181577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160010160149054906101000a900460ff1660018111156101cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461020b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020290612613565b60405180910390fd5b60008060070160008060060154815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050600061025c83611440565b9050600061028e600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611631565b90506000818460200151846102a391906129e9565b6102ad9190612847565b9050836040015181116102d1576102cc846040015185602001516116c9565b6102dc565b6102db83836116c9565b5b8097508198505050604051806060016040528088815260200187815260200186600101601a9054906101000a900461ffff1661ffff164261031d91906127f1565b8152508560040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505085877fdb9383e44e66cc8811d91a1ec82db8af408c60044293a6a08cff49c88dfd258960405160405180910390a350505050509091565b60006103c3611413565b90506001808111156103fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160010160149054906101000a900460ff166001811115610448577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047f90612613565b60405180910390fd5b60008160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060400151421061053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390612673565b60405180910390fd5b60008060060154905060008060070160008381526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060006105c784602001518761059c9190612847565b6105ae8460400151876020015161171a565b866000015185602001516105c29190612847565b611752565b905060008460200151826105db91906129e9565b905060008560000151836105ef91906129e9565b90508084602001516106019190612a43565b6000600701600087815260200190815260200160002060010181905550836040015182101561065c5781846040015161063a9190612a43565b600060070160008781526020019081526020016000206002018190555061068a565b6000806007016000878152602001908152602001600020600201819055506106898760006006015461177e565b5b61070133600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611818909392919063ffffffff16565b6107513382600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118a19092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f47f1fea3b5815b5f572137784f8bc49ca165c79598976847d9f917ad8911db388284604051610799929190612785565b60405180910390a25050505050505050565b6107b3611f26565b6000600701600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b610801611927565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088990612653565b60405180910390fd5b600061089c611413565b9050600060018111156108d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160010160149054906101000a900460ff166001811115610922577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610962576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610959906126d3565b60405180910390fd5b60008060060154905060008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1662fdd58e30856040518363ffffffff1660e01b81526004016109d09291906125a8565b60206040518083038186803b1580156109e857600080fd5b505afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906120f5565b90506000816000800154610a3491906129e9565b90506000811415610a5357610a49858561177e565b5050505050610f3c565b60008373ffffffffffffffffffffffffffffffffffffffff16633759425d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190611fef565b905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b3491906124fe565b60206040518083038186803b158015610b4c57600080fd5b505afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8491906120f5565b90508473ffffffffffffffffffffffffffffffffffffffff1663f242432a308489886040518563ffffffff1660e01b8152600401610bc59493929190612550565b600060405180830381600087803b158015610bdf57600080fd5b505af1158015610bf3573d6000803e3d6000fd5b50505050600081600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c5891906124fe565b60206040518083038186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca891906120f5565b610cb29190612a43565b90506000811415610d4557846000600701600089815260200190815260200160002060000181905550836000600701600089815260200190815260200160002060020181905550600060070160008881526020019081526020016000206002015460006005016000828254610d279190612a43565b92505081905550610d38888861177e565b5050505050505050610f3c565b600080610dc38a60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868a611954565b915091508115610e235786600060070160008b8152602001908152602001600020600001819055508083610df79190612a43565b600060070160008b815260200190815260200160002060010181905550610e1e8a8a61177e565b610f31565b604051806060016040528088815260200184815260200187815250600060070160008b815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505060008a60010160189054906101000a900461ffff1661ffff1642610e9991906127f1565b9050808b6003018190555060018b60010160146101000a81548160ff02191690836001811115610ef2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550897f31aa8189dff134dd0576f04235144fccd57510d46d9bade2f5289251219ab82982604051610f27919061276a565b60405180910390a2505b505050505050505050505b565b610f46611927565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce90612653565b60405180910390fd5b6000610fe1611413565b905060008160010160149054906101000a900460ff169050600180811115611032577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600181111561106b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14801561107b5750816003015442115b6110ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b1906126f3565b60405180910390fd5b600080600601549050600060070160008060060154815260200190815260200160002060020154600060050160008282546110f59190612a43565b92505081905550611106838261177e565b505050565b611113611927565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612653565b60405180910390fd5b6111f48282600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118a19092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161123a919061276a565b60405180910390a25050565b61124e611927565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d690612653565b60405180910390fd5b6000600601548110611326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131d90612713565b60405180910390fd5b6000808390505b8281116113ba576000806007016000806006015481526020019081526020016000206001015490506000806007016000806006015481526020019081526020016000206001015490508081836113839190612847565b61138d91906129e9565b826113989190612a43565b846113a391906127f1565b9350505080806113b290612b2e565b91505061132d565b5061140d308583600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611818909392919063ffffffff16565b50505050565b6000807f1ae9d8d83f6f65ae1abd9acc0aca63e8c998a929dbd5efa644fcec5a336894a690508091505090565b6000808260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156114ad57600080fd5b505afa1580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e5919061211e565b505050915050600081136114fd57600091505061162c565b60008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a19190612195565b600a6115ad91906128cb565b90506000816115e0600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611631565b846115eb91906129e9565b6115f59190612847565b90506127108560010160169054906101000a900461ffff1661ffff168261161c91906129e9565b6116269190612847565b93505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561167a57600080fd5b505afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190612195565b905080600a6116c191906128cb565b915050919050565b600080828411156116e95760016116e0858561171a565b91509150611713565b60006116f5848661171a565b90508061170d8683876117089190612847565b61171a565b92509250505b9250929050565b600081826001848661172c91906127f1565b6117369190612a43565b6117409190612847565b61174a91906129e9565b905092915050565b600082841061176a576117658383611b4b565b611775565b6117748483611b4b565b5b90509392505050565b60018161178b91906127f1565b60006006018190555060008260010160146101000a81548160ff021916908360018111156117e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550807f3b60a8eedd1361983e95cb96ee4a32b37bf8480d8fa8d11a909f9deee6e2e5c660405160405180910390a25050565b61189b846323b872dd60e01b85858560405160240161183993929190612519565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b64565b50505050565b6119228363a9059cbb60e01b84846040516024016118c09291906125a8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b64565b505050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b600080611962868886611c2b565b60006040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001858152602001868152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090506000808973ffffffffffffffffffffffffffffffffffffffff1683604051602401611a2b9190612733565b6040516020818303038152906040527f3ed209e4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611ab591906124e7565b6000604051808303816000865af19150503d8060008114611af2576040519150601f19603f3d011682016040523d82523d6000602084013e611af7565b606091505b5091509150611b08898b6000611c2b565b8115611b3657600081806020019051810190611b2491906120f5565b90506001819550955050505050611b41565b600080945094505050505b9550959350505050565b6000818310611b5a5781611b5c565b825b905092915050565b6000611bc6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611d809092919063ffffffff16565b9050600081511115611c265780806020019051810190611be691906120a3565b611c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1c906126b3565b60405180910390fd5b5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401611c609291906125a8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611cca91906124e7565b6000604051808303816000865af19150503d8060008114611d07576040519150601f19603f3d011682016040523d82523d6000602084013e611d0c565b606091505b5091509150818015611d3a5750600081511480611d39575080806020019051810190611d3891906120a3565b5b5b611d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d70906125f3565b60405180910390fd5b5050505050565b6060611d8f8484600085611d98565b90509392505050565b606082471015611ddd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd490612633565b60405180910390fd5b611de685611eac565b611e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1c90612693565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611e4e91906124e7565b60006040518083038185875af1925050503d8060008114611e8b576040519150601f19603f3d011682016040523d82523d6000602084013e611e90565b606091505b5091509150611ea0828286611ebf565b92505050949350505050565b600080823b905060008111915050919050565b60608315611ecf57829050611f1f565b600083511115611ee25782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1691906125d1565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b600081359050611f5681612e28565b92915050565b600081519050611f6b81612e28565b92915050565b600081519050611f8081612e3f565b92915050565b600081519050611f9581612e56565b92915050565b600081359050611faa81612e6d565b92915050565b600081519050611fbf81612e6d565b92915050565b600081519050611fd481612e9b565b92915050565b600081519050611fe981612e84565b92915050565b60006020828403121561200157600080fd5b600061200f84828501611f5c565b91505092915050565b6000806040838503121561202b57600080fd5b600061203985828601611f47565b925050602061204a85828601611f9b565b9150509250929050565b60008060006060848603121561206957600080fd5b600061207786828701611f47565b935050602061208886828701611f9b565b925050604061209986828701611f9b565b9150509250925092565b6000602082840312156120b557600080fd5b60006120c384828501611f71565b91505092915050565b6000602082840312156120de57600080fd5b60006120ec84828501611f9b565b91505092915050565b60006020828403121561210757600080fd5b600061211584828501611fb0565b91505092915050565b600080600080600060a0868803121561213657600080fd5b600061214488828901611fc5565b955050602061215588828901611f86565b945050604061216688828901611fb0565b935050606061217788828901611fb0565b925050608061218888828901611fc5565b9150509295509295909350565b6000602082840312156121a757600080fd5b60006121b584828501611fda565b91505092915050565b6121c781612a77565b82525050565b6121d681612a77565b82525050565b60006121e7826127ae565b6121f181856127d5565b9350612201818560208601612afb565b80840191505092915050565b6000612218826127b9565b61222281856127e0565b9350612232818560208601612afb565b61223b81612bd5565b840191505092915050565b60006122536002836127e0565b915061225e82612bf3565b602082019050919050565b6000612276601d836127e0565b915061228182612c1c565b602082019050919050565b60006122996026836127e0565b91506122a482612c45565b604082019050919050565b60006122bc601d836127e0565b91506122c782612c94565b602082019050919050565b60006122df601a836127e0565b91506122ea82612cbd565b602082019050919050565b60006123026000836127c4565b915061230d82612ce6565b600082019050919050565b6000612325601d836127e0565b915061233082612ce9565b602082019050919050565b6000612348602a836127e0565b915061235382612d12565b604082019050919050565b600061236b6020836127e0565b915061237682612d61565b602082019050919050565b600061238e6023836127e0565b915061239982612d8a565b604082019050919050565b60006123b16021836127e0565b91506123bc82612dd9565b604082019050919050565b610100820160008201516123de60008501826121be565b5060208201516123f160208501826121be565b50604082015161240460408501826124ba565b50606082015161241760608501826121be565b50608082015161242a60808501826124c9565b5060a082015161243d60a08501826124c9565b5060c082015161245060c08501826124c9565b5060e082015161246360e08501826124ab565b50505050565b60608201600082015161247f60008501826124c9565b50602082015161249260208501826124c9565b5060408201516124a560408501826124c9565b50505050565b6124b481612a9f565b82525050565b6124c381612abf565b82525050565b6124d281612ace565b82525050565b6124e181612ace565b82525050565b60006124f382846121dc565b915081905092915050565b600060208201905061251360008301846121cd565b92915050565b600060608201905061252e60008301866121cd565b61253b60208301856121cd565b61254860408301846124d8565b949350505050565b600060a08201905061256560008301876121cd565b61257260208301866121cd565b61257f60408301856124d8565b61258c60608301846124d8565b818103608083015261259d816122f5565b905095945050505050565b60006040820190506125bd60008301856121cd565b6125ca60208301846124d8565b9392505050565b600060208201905081810360008301526125eb818461220d565b905092915050565b6000602082019050818103600083015261260c81612246565b9050919050565b6000602082019050818103600083015261262c81612269565b9050919050565b6000602082019050818103600083015261264c8161228c565b9050919050565b6000602082019050818103600083015261266c816122af565b9050919050565b6000602082019050818103600083015261268c816122d2565b9050919050565b600060208201905081810360008301526126ac81612318565b9050919050565b600060208201905081810360008301526126cc8161233b565b9050919050565b600060208201905081810360008301526126ec8161235e565b9050919050565b6000602082019050818103600083015261270c81612381565b9050919050565b6000602082019050818103600083015261272c816123a4565b9050919050565b60006101008201905061274960008301846123c7565b92915050565b60006060820190506127646000830184612469565b92915050565b600060208201905061277f60008301846124d8565b92915050565b600060408201905061279a60008301856124d8565b6127a760208301846124d8565b9392505050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006127fc82612ace565b915061280783612ace565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561283c5761283b612b77565b5b828201905092915050565b600061285282612ace565b915061285d83612ace565b92508261286d5761286c612ba6565b5b828204905092915050565b6000808291508390505b60018511156128c25780860481111561289e5761289d612b77565b5b60018516156128ad5780820291505b80810290506128bb85612be6565b9450612882565b94509492505050565b60006128d682612ace565b91506128e183612ad8565b925061290e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612916565b905092915050565b60008261292657600190506129e2565b8161293457600090506129e2565b816001811461294a576002811461295457612983565b60019150506129e2565b60ff84111561296657612965612b77565b5b8360020a91508482111561297d5761297c612b77565b5b506129e2565b5060208310610133831016604e8410600b84101617156129b85782820a9050838111156129b3576129b2612b77565b5b6129e2565b6129c58484846001612878565b925090508184048111156129dc576129db612b77565b5b81810290505b9392505050565b60006129f482612ace565b91506129ff83612ace565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612a3857612a37612b77565b5b828202905092915050565b6000612a4e82612ace565b9150612a5983612ace565b925082821015612a6c57612a6b612b77565b5b828203905092915050565b6000612a8282612a9f565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b83811015612b19578082015181840152602081019050612afe565b83811115612b28576000848401525b50505050565b6000612b3982612ace565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b6c57612b6b612b77565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f44654d696e654167656e743a206e6f2073616c65206f6e2d676f696e67000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b7f44654d696e654167656e743a2070726963652065787069726564000000000000600082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a2062696c6c696e6720696e2070726f6772657373600082015250565b7f44654d696e654167656e743a206e6f20616374696f6e2072657175697265642060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a20746f6b656e206e6f742062696c6c656420796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b612e3181612a77565b8114612e3c57600080fd5b50565b612e4881612a89565b8114612e5357600080fd5b50565b612e5f81612a95565b8114612e6a57600080fd5b50565b612e7681612ace565b8114612e8157600080fd5b50565b612e8d81612ad8565b8114612e9857600080fd5b50565b612ea481612ae5565b8114612eaf57600080fd5b5056fea2646970667358221220940480358c4428fea5cafd944a8b93007c5733afbbb3eb820116adb0c01ae46364736f6c63430008040033",
  "devdoc": {
    "author": "Shu Dong",
    "kind": "dev",
    "methods": {
      "buyWithLockedPrice(uint256)": {
        "params": {
          "maxToPay": "The max amount of cost to pay"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "Amount to withdraw",
          "recipient": "Address of account to accept payment"
        }
      }
    },
    "title": "BillingFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyWithLockedPrice(uint256)": {
        "notice": "buy income token with locked price"
      },
      "collectResidue(address,uint256,uint256)": {
        "notice": "Collect income leftover, no waste"
      },
      "lockPrice()": {
        "notice": "lock price to buy income token in income token sale"
      },
      "tryBilling()": {
        "notice": "It will try to sell income token at Uniswap to pay bill and start income token sale if it fails"
      },
      "withdraw(address,uint256)": {
        "notice": "withdraw payment from contract"
      }
    },
    "notice": "billing related functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5907,
        "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)8753_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC1155Rewardable)9901": {
        "encoding": "inplace",
        "label": "contract IERC1155Rewardable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)209": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Account)8700_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)8700_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Statement)8707_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Statement)",
        "numberOfBytes": "32",
        "value": "t_struct(Statement)8707_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Account)8700_storage": {
        "encoding": "inplace",
        "label": "struct Account",
        "members": [
          {
            "astId": 8695,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8697,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8699,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "maxBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AppStorage)8753_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 8709,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "tokenCost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8712,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "income",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)209"
          },
          {
            "astId": 8715,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "payment",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)209"
          },
          {
            "astId": 8718,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "nft",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC1155Rewardable)9901"
          },
          {
            "astId": 8720,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "payee",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 8722,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "initialized",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 8724,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "depositMultiplier",
            "offset": 21,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 8726,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8728,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "billing",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8733,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "statements",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Statement)8707_storage)"
          },
          {
            "astId": 8738,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "accounts",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_struct(Account)8700_storage)"
          },
          {
            "astId": 8744,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "balances",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 8752,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "allowances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Statement)8707_storage": {
        "encoding": "inplace",
        "label": "struct Statement",
        "members": [
          {
            "astId": 8702,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8704,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "income",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8706,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}