{
  "address": "0x802Ca0D70a4f81a7D16EA6f34B4b34A0C7d8e4D9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "discountInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtToPay",
          "type": "uint256"
        }
      ],
      "name": "purchaseEarningTokenToPayDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "chainlink",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouter",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "swapRouterVersion",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "discount10000Based",
          "type": "uint16"
        }
      ],
      "name": "setBillingMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "discount",
          "type": "uint16"
        }
      ],
      "name": "setDiscountInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tryBilling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1298373ba85a9a791d4712f281a2afc6d290782639f072435b34276801f3c8ab",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0x802Ca0D70a4f81a7D16EA6f34B4b34A0C7d8e4D9",
    "transactionIndex": 6,
    "gasUsed": "2237328",
    "logsBloom": "0x
    "blockHash": "0x8e6be8aab4c21309e55915e1e57bbed4395baf8553d4b7c166a194d769131667",
    "transactionHash": "0x1298373ba85a9a791d4712f281a2afc6d290782639f072435b34276801f3c8ab",
    "logs": [],
    "blockNumber": 16971431,
    "cumulativeGasUsed": "2951364",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7eb2b0fc510e8a394e64a23d0ea364e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"discountInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtToPay\",\"type\":\"uint256\"}],\"name\":\"purchaseEarningTokenToPayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chainlink\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"swapRouterVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"discount10000Based\",\"type\":\"uint16\"}],\"name\":\"setBillingMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"discount\",\"type\":\"uint16\"}],\"name\":\"setDiscountInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tryBilling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shu Dong\",\"kind\":\"dev\",\"methods\":{\"purchaseEarningTokenToPayDebt(uint256,uint256)\":{\"params\":{\"debtToPay\":\"Amount of debt to pay\",\"tokenId\":\"token id to get statement\"}}},\"title\":\"BillingFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"purchaseEarningTokenToPayDebt(uint256,uint256)\":{\"notice\":\"purchase on sale earning token to pay debt for token owner\"},\"tryBilling(uint256)\":{\"notice\":\"It will try to sell earning token at Uniswap to pay bill and start earning token sale if it fails\"}},\"notice\":\"billing related functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agent/facets/BillingFacet.sol\":\"BillingFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/agent/facets/BillingFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\nimport '../../nft/interfaces/IERC1155Rewardable.sol';\\nimport '../../shared/lib/LibPausable.sol';\\nimport '../lib/AppStorage.sol';\\n\\n/**\\n * @title BillingFacet\\n * @author Shu Dong\\n * @notice billing related functions\\n */\\ncontract BillingFacet is\\n    PausableModifier,\\n    OwnableInternal,\\n    StorageBase\\n{\\n    using SafeERC20 for IERC20;\\n\\n    function setBillingMetadata(\\n        address chainlink,\\n        address swapRouter,\\n        uint8 swapRouterVersion,\\n        uint16 discount10000Based\\n    ) external onlyOwner {\\n        s.chainlink = chainlink;\\n        s.swapRouter = swapRouter;\\n        require(\\n            swapRouterVersion == 2 || swapRouterVersion == 3,\\n            'Mining3Agent: swap router version not supported'\\n        );\\n        s.swapRouterVersion = swapRouterVersion;\\n        s.earningTokenSaleDiscount10000Based = discount10000Based;\\n    }\\n\\n    /**\\n     * @notice It will try to sell earning token at Uniswap\\n     * to pay bill and start earning token sale if it fails\\n     */\\n    function tryBilling(uint tokenId) external onlyOwner {\\n        IERC1155Rewardable nft = s.nft;\\n        uint balance = nft.balanceOf(address(this), tokenId);\\n        if (balance == 0) {\\n            return;\\n        }\\n        uint debt = s.tokenCost * balance;\\n        IERC20 earningToken = IERC20(s.nft.earningToken());\\n        uint prevBalance = earningToken.balanceOf(address(this));\\n        nft.safeTransferFrom(\\n            address(this), nft.custodian(), tokenId, balance, ''\\n        );\\n        uint earning = earningToken.balanceOf(address(this)) - prevBalance;\\n        if (earning == 0) {\\n            s.statements[tokenId].balance = balance;\\n            s.statements[tokenId].debt = debt;\\n            return;\\n        }\\n        (uint earningTokenSold, uint paymentTokenReceived) = trySwap(\\n            s.swapRouter,\\n            address(earningToken),\\n            address(s.paymentToken),\\n            earning,\\n            debt\\n        );\\n        if (paymentTokenReceived == debt) {\\n            s.statements[tokenId].balance = balance;\\n            s.statements[tokenId].surplus = earning - earningTokenSold;\\n        } else {\\n            s.statements[tokenId] = BillingStatement(\\n                balance,\\n                earning - earningTokenSold,\\n                debt - paymentTokenReceived\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice purchase on sale earning token to pay debt for token owner\\n     * @param tokenId token id to get statement\\n     * @param debtToPay Amount of debt to pay\\n     */\\n    function purchaseEarningTokenToPayDebt(\\n        uint tokenId,\\n        uint debtToPay\\n    ) external whenNotPaused {\\n        BillingStatement memory st = s.statements[tokenId];\\n        require(\\n            st.surplus > 0 && st.debt > 0,\\n            'Mining3Agent: no debt or earning'\\n        );\\n        if (debtToPay > st.debt) {\\n            debtToPay = st.debt;\\n        }\\n\\n        IERC20 earningToken = IERC20(s.nft.earningToken());\\n        IERC20 paymentToken = IERC20(s.paymentToken);\\n        uint sold = swapTokens(\\n            AggregatorV3Interface(s.chainlink),\\n            IERC20Metadata(address(earningToken)),\\n            IERC20Metadata(address(paymentToken)),\\n            debtToPay\\n        );\\n        // no enough surplus token to pay\\n        if (sold > st.surplus) {\\n            debtToPay = debtToPay * st.surplus / sold;\\n            s.statements[tokenId].surplus = 0;\\n            s.statements[tokenId].debt = st.debt - debtToPay;\\n        } else {\\n            s.statements[tokenId].surplus = st.surplus - sold;\\n            s.statements[tokenId].debt = 0;\\n        }\\n        IERC20(paymentToken).safeTransferFrom(\\n            msg.sender, s.custodian, debtToPay\\n        );\\n        IERC20(earningToken).safeTransfer(msg.sender, sold);\\n    }\\n\\n    function discountInfo(uint value) public view returns(uint) {\\n        return value * s.earningTokenSaleDiscount10000Based / 10000;\\n    }\\n\\n    function setDiscountInfo(uint16 discount) external onlyOwner {\\n        s.earningTokenSaleDiscount10000Based = discount > 10000 ? 10000 : discount;\\n    }\\n\\n    function swapTokens(\\n        AggregatorV3Interface chainlink,\\n        IERC20Metadata earningToken,\\n        IERC20Metadata paymentToken,\\n        uint amountIn // payment token\\n    ) private view returns(uint) {\\n        (,int price, , ,) = chainlink.latestRoundData();\\n        if (price <= 0) { return 0; }\\n        uint discountedPrice = discountInfo(uint(price));\\n\\n        uint8 amountOutDecimals = earningToken.decimals();\\n        uint8 amountInDecimals = paymentToken.decimals();\\n        uint8 priceDecimals = chainlink.decimals();\\n        if (amountOutDecimals + priceDecimals > amountInDecimals) {\\n            uint base = 10 ** (amountOutDecimals + priceDecimals - amountInDecimals);\\n            return amountIn * base / discountedPrice;\\n        } else {\\n            uint base = 10 ** (amountInDecimals - amountOutDecimals - priceDecimals);\\n            return amountIn / (discountedPrice * base);\\n        }\\n    }\\n\\n    function trySwap(\\n        address swapRouter,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountInMax,\\n        uint amountOut\\n    ) internal returns(uint sold, uint bought) {\\n        TransferHelper.safeApprove(tokenIn, swapRouter, amountInMax);\\n        uint8 version = s.swapRouterVersion;\\n        if (version == 2) {\\n            (bool success, bytes memory encoded) = swapRouter.call(\\n                abi.encodeWithSignature(\\n                    'swapTokensForExactTokens(uint,uint,address[],address,uint)',\\n                    amountOut, amountInMax, [tokenIn, tokenOut], address(this), block.timestamp\\n                )\\n            );\\n            if (success) {\\n                (sold, bought) = abi.decode(encoded, (uint, uint));\\n            }\\n        } else if (version == 3) {\\n            ISwapRouter.ExactOutputSingleParams memory param =\\n            ISwapRouter.ExactOutputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: 3000, // 0.3%\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMax,\\n                sqrtPriceLimitX96: 0\\n            });\\n            (bool success, bytes memory encoded) = swapRouter.call(\\n                abi.encodeWithSignature(\\n                    'exactOutputSingle((address,address,uint24,address,uint,uiint256,uint,uint160))',\\n                    param\\n                )\\n            );\\n            if (success) {\\n                sold = abi.decode(encoded, (uint));\\n                bought = amountOut;\\n            }\\n        }\\n        TransferHelper.safeApprove(tokenIn, swapRouter, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xdc82f4268addb3b4a16168e148054541b8f00660802102ca433fdb15060d22fc\",\"license\":\"MIT\"},\"contracts/agent/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '../../nft/interfaces/IERC1155Rewardable.sol';\\n\\nstruct BillingStatement {\\n    uint balance;  // Today's total locked (not liquidated) NFT for today\\n    uint surplus;  // Today's surplus (mined target tokens - the part to payoff unpaid cost) in incomeToken\\n    uint debt;  // The debt in paymentToken if today's mined target tokens cannot pay off cost\\n}\\n\\nstruct AppStorage {\\n    uint tokenCost; // cost per nft in payment token\\n\\n    IERC1155Rewardable nft; // DeMineNFT contract address\\n    address paymentToken; // The type of token to pay off cost (e.g. USDT)\\n    address custodian; // payee account address, could be contract\\n    uint16 royaltyBps;  // royalty bps, 10000 based\\n    uint royaltyCap;  // max royalty value to accept\\n\\n    mapping(uint => mapping(address => uint)) balances;  // owner => buyer => allowance\\n\\n    // billing related\\n    mapping(uint256 => BillingStatement) statements; // Billing statement for each NFT token.\\n    address chainlink;\\n    address swapRouter;\\n    uint8 swapRouterVersion; // 2 or 3 supported\\n    uint16 earningTokenSaleDiscount10000Based; // 10000 based\\n\\n    // primary market sale related\\n    // 0: unregistered, 1: pricing strategy, 2: allowance strategy\\n    mapping(address => uint8) strategyRegistry;\\n    mapping(address => mapping(uint8 => address)) strategies;\\n}\\n\\nabstract contract StorageBase {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0xdc8d02880e411807cbe1d99fac40c4b5bc573be6fcf8bc16df13733fb6fd6a3e\",\"license\":\"MIT\"},\"contracts/nft/interfaces/IERC1155Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IERC1155Rewardable is IERC1155 {\\n    function custodian() external view returns(address);\\n\\n    function earningToken() external view returns(address);\\n}\\n\",\"keccak256\":\"0xac6ed88e2b851fcbc70ca389bbe6c6db551b619fe70375995fe7f11d69d69b47\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xb33768d5a13e8aa6c9c15a2988d677ec850db777536db6ab0c38f0f768f71569\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x86af35526539727370e6cfcd7132918c2b8923052391f7a1816458066006979a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127a5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063034705311461005c5780632dfd341214610078578063527e29311461009457806361db524e146100b0578063f7c85adb146100e0575b600080fd5b61007660048036038101906100719190611813565b6100fc565b005b610092600480360381019061008d9190611853565b610441565b005b6100ae60048036038101906100a991906118ba565b61099a565b005b6100ca60048036038101906100c59190611853565b610a6c565b6040516100d791906118f6565b60405180910390f35b6100fa60048036038101906100f591906119a8565b610aa5565b005b610104610c5e565b60000160009054906101000a900460ff1615610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c90611a6c565b60405180910390fd5b600080600601600084815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050600081602001511180156101af575060008160400151115b6101ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e590611ad8565b60405180910390fd5b806040015182111561020257806040015191505b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fe205c76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190611b0d565b905060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006102f5600060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848488610c8b565b9050836020015181111561037057808460200151866103149190611b69565b61031e9190611bf2565b945060008060060160008881526020019081526020016000206001018190555084846040015161034e9190611c23565b60006006016000888152602001908152602001600020600201819055506103bc565b8084602001516103809190611c23565b60006006016000888152602001908152602001600020600101819055506000806006016000888152602001908152602001600020600201819055505b61040e33600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878573ffffffffffffffffffffffffffffffffffffffff16610f2e909392919063ffffffff16565b61043933828573ffffffffffffffffffffffffffffffffffffffff16610fb79092919063ffffffff16565b505050505050565b61044961103d565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d190611ca3565b60405180910390fd5b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1662fdd58e30856040518363ffffffff1660e01b815260040161053f929190611cd2565b602060405180830381865afa15801561055c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105809190611d10565b90506000811415610592575050610997565b60008160008001546105a49190611b69565b905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fe205c76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b9190611b0d565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106789190611d3d565b602060405180830381865afa158015610695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b99190611d10565b90508473ffffffffffffffffffffffffffffffffffffffff1663f242432a308773ffffffffffffffffffffffffffffffffffffffff1663375b74c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190611b0d565b89886040518563ffffffff1660e01b81526004016107689493929190611d8f565b600060405180830381600087803b15801561078257600080fd5b505af1158015610796573d6000803e3d6000fd5b505050506000818373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107d69190611d3d565b602060405180830381865afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108179190611d10565b6108219190611c23565b9050600081141561087357846000600601600089815260200190815260200160002060000181905550836000600601600089815260200190815260200160002060020181905550505050505050610997565b6000806108cd600060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868a61106a565b91509150858114156109255786600060060160008b81526020019081526020016000206000018190555081836109039190611c23565b600060060160008b81526020019081526020016000206001018190555061098e565b604051806060016040528088815260200183856109429190611c23565b815260200182886109539190611c23565b815250600060060160008b81526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050505b50505050505050505b50565b6109a261103d565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2a90611ca3565b60405180910390fd5b6127108161ffff1611610a465780610a4a565b6127105b600060080160156101000a81548161ffff021916908361ffff16021790555050565b6000612710600060080160159054906101000a900461ffff1661ffff1683610a949190611b69565b610a9e9190611bf2565b9050919050565b610aad61103d565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3590611ca3565b60405180910390fd5b83600060070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600060080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028260ff161480610bdb575060038260ff16145b610c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1190611e59565b60405180910390fd5b81600060080160146101000a81548160ff021916908360ff16021790555080600060080160156101000a81548161ffff021916908361ffff16021790555050505050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6000808573ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfd9190611ef1565b50505091505060008113610d15576000915050610f26565b6000610d2082610a6c565b905060008673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d939190611f81565b905060008673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e069190611f81565b905060008973ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e799190611f81565b90508160ff168184610e8b9190611fae565b60ff161115610edf576000828285610ea39190611fae565b610ead9190611fe5565b600a610eb9919061214c565b9050848189610ec89190611b69565b610ed29190611bf2565b9650505050505050610f26565b6000818484610eee9190611fe5565b610ef89190611fe5565b600a610f04919061214c565b90508085610f129190611b69565b88610f1d9190611bf2565b96505050505050505b949350505050565b610fb1846323b872dd60e01b858585604051602401610f4f93929190612197565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611416565b50505050565b6110388363a9059cbb60e01b8484604051602401610fd6929190611cd2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611416565b505050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000806110788688866114dd565b60008060080160149054906101000a900460ff16905060028160ff161415611234576000808973ffffffffffffffffffffffffffffffffffffffff16868860405180604001604052808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152503042604051602401611139959493929190612279565b6040516020818303038152906040527f2209866b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111c39190612346565b6000604051808303816000865af19150503d8060008114611200576040519150601f19603f3d011682016040523d82523d6000602084013e611205565b606091505b5091509150811561122d5780806020019051810190611224919061235d565b80955081965050505b50506113ff565b60038160ff1614156113fe5760006040518061010001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001868152602001878152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090506000808a73ffffffffffffffffffffffffffffffffffffffff1683604051602401611309919061247b565b6040516020818303038152906040527f3ed209e4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516113939190612346565b6000604051808303816000865af19150503d80600081146113d0576040519150601f19603f3d011682016040523d82523d6000602084013e6113d5565b606091505b509150915081156113fa57808060200190518101906113f49190611d10565b95508694505b5050505b5b61140b878960006114dd565b509550959350505050565b6000611478826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116329092919063ffffffff16565b90506000815111156114d8578080602001905181019061149891906124cf565b6114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ce9061256e565b60405180910390fd5b5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401611512929190611cd2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161157c9190612346565b6000604051808303816000865af19150503d80600081146115b9576040519150601f19603f3d011682016040523d82523d6000602084013e6115be565b606091505b50915091508180156115ec57506000815114806115eb5750808060200190518101906115ea91906124cf565b5b5b61162b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611622906125da565b60405180910390fd5b5050505050565b6060611641848460008561164a565b90509392505050565b60608247101561168f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116869061266c565b60405180910390fd5b6116988561175e565b6116d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ce906126d8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117009190612346565b60006040518083038185875af1925050503d806000811461173d576040519150601f19603f3d011682016040523d82523d6000602084013e611742565b606091505b5091509150611752828286611771565b92505050949350505050565b600080823b905060008111915050919050565b60608315611781578290506117d1565b6000835111156117945782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c8919061274d565b60405180910390fd5b9392505050565b600080fd5b6000819050919050565b6117f0816117dd565b81146117fb57600080fd5b50565b60008135905061180d816117e7565b92915050565b6000806040838503121561182a576118296117d8565b5b6000611838858286016117fe565b9250506020611849858286016117fe565b9150509250929050565b600060208284031215611869576118686117d8565b5b6000611877848285016117fe565b91505092915050565b600061ffff82169050919050565b61189781611880565b81146118a257600080fd5b50565b6000813590506118b48161188e565b92915050565b6000602082840312156118d0576118cf6117d8565b5b60006118de848285016118a5565b91505092915050565b6118f0816117dd565b82525050565b600060208201905061190b60008301846118e7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061193c82611911565b9050919050565b61194c81611931565b811461195757600080fd5b50565b60008135905061196981611943565b92915050565b600060ff82169050919050565b6119858161196f565b811461199057600080fd5b50565b6000813590506119a28161197c565b92915050565b600080600080608085870312156119c2576119c16117d8565b5b60006119d08782880161195a565b94505060206119e18782880161195a565b93505060406119f287828801611993565b9250506060611a03878288016118a5565b91505092959194509250565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000611a56601083611a0f565b9150611a6182611a20565b602082019050919050565b60006020820190508181036000830152611a8581611a49565b9050919050565b7f4d696e696e67334167656e743a206e6f2064656274206f72206561726e696e67600082015250565b6000611ac2602083611a0f565b9150611acd82611a8c565b602082019050919050565b60006020820190508181036000830152611af181611ab5565b9050919050565b600081519050611b0781611943565b92915050565b600060208284031215611b2357611b226117d8565b5b6000611b3184828501611af8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b74826117dd565b9150611b7f836117dd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611bb857611bb7611b3a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bfd826117dd565b9150611c08836117dd565b925082611c1857611c17611bc3565b5b828204905092915050565b6000611c2e826117dd565b9150611c39836117dd565b925082821015611c4c57611c4b611b3a565b5b828203905092915050565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b6000611c8d601d83611a0f565b9150611c9882611c57565b602082019050919050565b60006020820190508181036000830152611cbc81611c80565b9050919050565b611ccc81611931565b82525050565b6000604082019050611ce76000830185611cc3565b611cf460208301846118e7565b9392505050565b600081519050611d0a816117e7565b92915050565b600060208284031215611d2657611d256117d8565b5b6000611d3484828501611cfb565b91505092915050565b6000602082019050611d526000830184611cc3565b92915050565b600082825260208201905092915050565b50565b6000611d79600083611d58565b9150611d8482611d69565b600082019050919050565b600060a082019050611da46000830187611cc3565b611db16020830186611cc3565b611dbe60408301856118e7565b611dcb60608301846118e7565b8181036080830152611ddc81611d6c565b905095945050505050565b7f4d696e696e67334167656e743a207377617020726f757465722076657273696f60008201527f6e206e6f7420737570706f727465640000000000000000000000000000000000602082015250565b6000611e43602f83611a0f565b9150611e4e82611de7565b604082019050919050565b60006020820190508181036000830152611e7281611e36565b9050919050565b600069ffffffffffffffffffff82169050919050565b611e9881611e79565b8114611ea357600080fd5b50565b600081519050611eb581611e8f565b92915050565b6000819050919050565b611ece81611ebb565b8114611ed957600080fd5b50565b600081519050611eeb81611ec5565b92915050565b600080600080600060a08688031215611f0d57611f0c6117d8565b5b6000611f1b88828901611ea6565b9550506020611f2c88828901611edc565b9450506040611f3d88828901611cfb565b9350506060611f4e88828901611cfb565b9250506080611f5f88828901611ea6565b9150509295509295909350565b600081519050611f7b8161197c565b92915050565b600060208284031215611f9757611f966117d8565b5b6000611fa584828501611f6c565b91505092915050565b6000611fb98261196f565b9150611fc48361196f565b92508260ff03821115611fda57611fd9611b3a565b5b828201905092915050565b6000611ff08261196f565b9150611ffb8361196f565b92508282101561200e5761200d611b3a565b5b828203905092915050565b60008160011c9050919050565b6000808291508390505b60018511156120705780860481111561204c5761204b611b3a565b5b600185161561205b5780820291505b808102905061206985612019565b9450612030565b94509492505050565b6000826120895760019050612145565b816120975760009050612145565b81600181146120ad57600281146120b7576120e6565b6001915050612145565b60ff8411156120c9576120c8611b3a565b5b8360020a9150848211156120e0576120df611b3a565b5b50612145565b5060208310610133831016604e8410600b841016171561211b5782820a90508381111561211657612115611b3a565b5b612145565b6121288484846001612026565b9250905081840481111561213f5761213e611b3a565b5b81810290505b9392505050565b6000612157826117dd565b91506121628361196f565b925061218f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612079565b905092915050565b60006060820190506121ac6000830186611cc3565b6121b96020830185611cc3565b6121c660408301846118e7565b949350505050565b600060029050919050565b600081905092915050565b6000819050919050565b6121f781611931565b82525050565b600061220983836121ee565b60208301905092915050565b6000602082019050919050565b61222b816121ce565b61223581846121d9565b9250612240826121e4565b8060005b8381101561227157815161225887826121fd565b965061226383612215565b925050600181019050612244565b505050505050565b600060c08201905061228e60008301886118e7565b61229b60208301876118e7565b6122a86040830186612222565b6122b56080830185611cc3565b6122c260a08301846118e7565b9695505050505050565b600081519050919050565b600081905092915050565b60005b838110156123005780820151818401526020810190506122e5565b8381111561230f576000848401525b50505050565b6000612320826122cc565b61232a81856122d7565b935061233a8185602086016122e2565b80840191505092915050565b60006123528284612315565b915081905092915050565b60008060408385031215612374576123736117d8565b5b600061238285828601611cfb565b925050602061239385828601611cfb565b9150509250929050565b600062ffffff82169050919050565b6123b58161239d565b82525050565b6123c4816117dd565b82525050565b6123d381611911565b82525050565b610100820160008201516123f060008501826121ee565b50602082015161240360208501826121ee565b50604082015161241660408501826123ac565b50606082015161242960608501826121ee565b50608082015161243c60808501826123bb565b5060a082015161244f60a08501826123bb565b5060c082015161246260c08501826123bb565b5060e082015161247560e08501826123ca565b50505050565b60006101008201905061249160008301846123d9565b92915050565b60008115159050919050565b6124ac81612497565b81146124b757600080fd5b50565b6000815190506124c9816124a3565b92915050565b6000602082840312156124e5576124e46117d8565b5b60006124f3848285016124ba565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612558602a83611a0f565b9150612563826124fc565b604082019050919050565b600060208201905081810360008301526125878161254b565b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006125c4600283611a0f565b91506125cf8261258e565b602082019050919050565b600060208201905081810360008301526125f3816125b7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612656602683611a0f565b9150612661826125fa565b604082019050919050565b6000602082019050818103600083015261268581612649565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126c2601d83611a0f565b91506126cd8261268c565b602082019050919050565b600060208201905081810360008301526126f1816126b5565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061271f826126f8565b6127298185611a0f565b93506127398185602086016122e2565b61274281612703565b840191505092915050565b600060208201905081810360008301526127678184612714565b90509291505056fea264697066735822122062308ee9572cc73afd7da5530fcf41058c850d1a176f18f28d51ba6f0cde0a0b64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063034705311461005c5780632dfd341214610078578063527e29311461009457806361db524e146100b0578063f7c85adb146100e0575b600080fd5b61007660048036038101906100719190611813565b6100fc565b005b610092600480360381019061008d9190611853565b610441565b005b6100ae60048036038101906100a991906118ba565b61099a565b005b6100ca60048036038101906100c59190611853565b610a6c565b6040516100d791906118f6565b60405180910390f35b6100fa60048036038101906100f591906119a8565b610aa5565b005b610104610c5e565b60000160009054906101000a900460ff1615610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c90611a6c565b60405180910390fd5b600080600601600084815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050600081602001511180156101af575060008160400151115b6101ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e590611ad8565b60405180910390fd5b806040015182111561020257806040015191505b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fe205c76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190611b0d565b905060008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006102f5600060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848488610c8b565b9050836020015181111561037057808460200151866103149190611b69565b61031e9190611bf2565b945060008060060160008881526020019081526020016000206001018190555084846040015161034e9190611c23565b60006006016000888152602001908152602001600020600201819055506103bc565b8084602001516103809190611c23565b60006006016000888152602001908152602001600020600101819055506000806006016000888152602001908152602001600020600201819055505b61040e33600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878573ffffffffffffffffffffffffffffffffffffffff16610f2e909392919063ffffffff16565b61043933828573ffffffffffffffffffffffffffffffffffffffff16610fb79092919063ffffffff16565b505050505050565b61044961103d565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d190611ca3565b60405180910390fd5b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1662fdd58e30856040518363ffffffff1660e01b815260040161053f929190611cd2565b602060405180830381865afa15801561055c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105809190611d10565b90506000811415610592575050610997565b60008160008001546105a49190611b69565b905060008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fe205c76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b9190611b0d565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106789190611d3d565b602060405180830381865afa158015610695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b99190611d10565b90508473ffffffffffffffffffffffffffffffffffffffff1663f242432a308773ffffffffffffffffffffffffffffffffffffffff1663375b74c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190611b0d565b89886040518563ffffffff1660e01b81526004016107689493929190611d8f565b600060405180830381600087803b15801561078257600080fd5b505af1158015610796573d6000803e3d6000fd5b505050506000818373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107d69190611d3d565b602060405180830381865afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108179190611d10565b6108219190611c23565b9050600081141561087357846000600601600089815260200190815260200160002060000181905550836000600601600089815260200190815260200160002060020181905550505050505050610997565b6000806108cd600060080160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868a61106a565b91509150858114156109255786600060060160008b81526020019081526020016000206000018190555081836109039190611c23565b600060060160008b81526020019081526020016000206001018190555061098e565b604051806060016040528088815260200183856109429190611c23565b815260200182886109539190611c23565b815250600060060160008b81526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050505b50505050505050505b50565b6109a261103d565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2a90611ca3565b60405180910390fd5b6127108161ffff1611610a465780610a4a565b6127105b600060080160156101000a81548161ffff021916908361ffff16021790555050565b6000612710600060080160159054906101000a900461ffff1661ffff1683610a949190611b69565b610a9e9190611bf2565b9050919050565b610aad61103d565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3590611ca3565b60405180910390fd5b83600060070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600060080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028260ff161480610bdb575060038260ff16145b610c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1190611e59565b60405180910390fd5b81600060080160146101000a81548160ff021916908360ff16021790555080600060080160156101000a81548161ffff021916908361ffff16021790555050505050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6000808573ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfd9190611ef1565b50505091505060008113610d15576000915050610f26565b6000610d2082610a6c565b905060008673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d939190611f81565b905060008673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e069190611f81565b905060008973ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e799190611f81565b90508160ff168184610e8b9190611fae565b60ff161115610edf576000828285610ea39190611fae565b610ead9190611fe5565b600a610eb9919061214c565b9050848189610ec89190611b69565b610ed29190611bf2565b9650505050505050610f26565b6000818484610eee9190611fe5565b610ef89190611fe5565b600a610f04919061214c565b90508085610f129190611b69565b88610f1d9190611bf2565b96505050505050505b949350505050565b610fb1846323b872dd60e01b858585604051602401610f4f93929190612197565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611416565b50505050565b6110388363a9059cbb60e01b8484604051602401610fd6929190611cd2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611416565b505050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000806110788688866114dd565b60008060080160149054906101000a900460ff16905060028160ff161415611234576000808973ffffffffffffffffffffffffffffffffffffffff16868860405180604001604052808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152503042604051602401611139959493929190612279565b6040516020818303038152906040527f2209866b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111c39190612346565b6000604051808303816000865af19150503d8060008114611200576040519150601f19603f3d011682016040523d82523d6000602084013e611205565b606091505b5091509150811561122d5780806020019051810190611224919061235d565b80955081965050505b50506113ff565b60038160ff1614156113fe5760006040518061010001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001868152602001878152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090506000808a73ffffffffffffffffffffffffffffffffffffffff1683604051602401611309919061247b565b6040516020818303038152906040527f3ed209e4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516113939190612346565b6000604051808303816000865af19150503d80600081146113d0576040519150601f19603f3d011682016040523d82523d6000602084013e6113d5565b606091505b509150915081156113fa57808060200190518101906113f49190611d10565b95508694505b5050505b5b61140b878960006114dd565b509550959350505050565b6000611478826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116329092919063ffffffff16565b90506000815111156114d8578080602001905181019061149891906124cf565b6114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ce9061256e565b60405180910390fd5b5b505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401611512929190611cd2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161157c9190612346565b6000604051808303816000865af19150503d80600081146115b9576040519150601f19603f3d011682016040523d82523d6000602084013e6115be565b606091505b50915091508180156115ec57506000815114806115eb5750808060200190518101906115ea91906124cf565b5b5b61162b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611622906125da565b60405180910390fd5b5050505050565b6060611641848460008561164a565b90509392505050565b60608247101561168f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116869061266c565b60405180910390fd5b6116988561175e565b6116d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ce906126d8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117009190612346565b60006040518083038185875af1925050503d806000811461173d576040519150601f19603f3d011682016040523d82523d6000602084013e611742565b606091505b5091509150611752828286611771565b92505050949350505050565b600080823b905060008111915050919050565b60608315611781578290506117d1565b6000835111156117945782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c8919061274d565b60405180910390fd5b9392505050565b600080fd5b6000819050919050565b6117f0816117dd565b81146117fb57600080fd5b50565b60008135905061180d816117e7565b92915050565b6000806040838503121561182a576118296117d8565b5b6000611838858286016117fe565b9250506020611849858286016117fe565b9150509250929050565b600060208284031215611869576118686117d8565b5b6000611877848285016117fe565b91505092915050565b600061ffff82169050919050565b61189781611880565b81146118a257600080fd5b50565b6000813590506118b48161188e565b92915050565b6000602082840312156118d0576118cf6117d8565b5b60006118de848285016118a5565b91505092915050565b6118f0816117dd565b82525050565b600060208201905061190b60008301846118e7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061193c82611911565b9050919050565b61194c81611931565b811461195757600080fd5b50565b60008135905061196981611943565b92915050565b600060ff82169050919050565b6119858161196f565b811461199057600080fd5b50565b6000813590506119a28161197c565b92915050565b600080600080608085870312156119c2576119c16117d8565b5b60006119d08782880161195a565b94505060206119e18782880161195a565b93505060406119f287828801611993565b9250506060611a03878288016118a5565b91505092959194509250565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000611a56601083611a0f565b9150611a6182611a20565b602082019050919050565b60006020820190508181036000830152611a8581611a49565b9050919050565b7f4d696e696e67334167656e743a206e6f2064656274206f72206561726e696e67600082015250565b6000611ac2602083611a0f565b9150611acd82611a8c565b602082019050919050565b60006020820190508181036000830152611af181611ab5565b9050919050565b600081519050611b0781611943565b92915050565b600060208284031215611b2357611b226117d8565b5b6000611b3184828501611af8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b74826117dd565b9150611b7f836117dd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611bb857611bb7611b3a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bfd826117dd565b9150611c08836117dd565b925082611c1857611c17611bc3565b5b828204905092915050565b6000611c2e826117dd565b9150611c39836117dd565b925082821015611c4c57611c4b611b3a565b5b828203905092915050565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b6000611c8d601d83611a0f565b9150611c9882611c57565b602082019050919050565b60006020820190508181036000830152611cbc81611c80565b9050919050565b611ccc81611931565b82525050565b6000604082019050611ce76000830185611cc3565b611cf460208301846118e7565b9392505050565b600081519050611d0a816117e7565b92915050565b600060208284031215611d2657611d256117d8565b5b6000611d3484828501611cfb565b91505092915050565b6000602082019050611d526000830184611cc3565b92915050565b600082825260208201905092915050565b50565b6000611d79600083611d58565b9150611d8482611d69565b600082019050919050565b600060a082019050611da46000830187611cc3565b611db16020830186611cc3565b611dbe60408301856118e7565b611dcb60608301846118e7565b8181036080830152611ddc81611d6c565b905095945050505050565b7f4d696e696e67334167656e743a207377617020726f757465722076657273696f60008201527f6e206e6f7420737570706f727465640000000000000000000000000000000000602082015250565b6000611e43602f83611a0f565b9150611e4e82611de7565b604082019050919050565b60006020820190508181036000830152611e7281611e36565b9050919050565b600069ffffffffffffffffffff82169050919050565b611e9881611e79565b8114611ea357600080fd5b50565b600081519050611eb581611e8f565b92915050565b6000819050919050565b611ece81611ebb565b8114611ed957600080fd5b50565b600081519050611eeb81611ec5565b92915050565b600080600080600060a08688031215611f0d57611f0c6117d8565b5b6000611f1b88828901611ea6565b9550506020611f2c88828901611edc565b9450506040611f3d88828901611cfb565b9350506060611f4e88828901611cfb565b9250506080611f5f88828901611ea6565b9150509295509295909350565b600081519050611f7b8161197c565b92915050565b600060208284031215611f9757611f966117d8565b5b6000611fa584828501611f6c565b91505092915050565b6000611fb98261196f565b9150611fc48361196f565b92508260ff03821115611fda57611fd9611b3a565b5b828201905092915050565b6000611ff08261196f565b9150611ffb8361196f565b92508282101561200e5761200d611b3a565b5b828203905092915050565b60008160011c9050919050565b6000808291508390505b60018511156120705780860481111561204c5761204b611b3a565b5b600185161561205b5780820291505b808102905061206985612019565b9450612030565b94509492505050565b6000826120895760019050612145565b816120975760009050612145565b81600181146120ad57600281146120b7576120e6565b6001915050612145565b60ff8411156120c9576120c8611b3a565b5b8360020a9150848211156120e0576120df611b3a565b5b50612145565b5060208310610133831016604e8410600b841016171561211b5782820a90508381111561211657612115611b3a565b5b612145565b6121288484846001612026565b9250905081840481111561213f5761213e611b3a565b5b81810290505b9392505050565b6000612157826117dd565b91506121628361196f565b925061218f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612079565b905092915050565b60006060820190506121ac6000830186611cc3565b6121b96020830185611cc3565b6121c660408301846118e7565b949350505050565b600060029050919050565b600081905092915050565b6000819050919050565b6121f781611931565b82525050565b600061220983836121ee565b60208301905092915050565b6000602082019050919050565b61222b816121ce565b61223581846121d9565b9250612240826121e4565b8060005b8381101561227157815161225887826121fd565b965061226383612215565b925050600181019050612244565b505050505050565b600060c08201905061228e60008301886118e7565b61229b60208301876118e7565b6122a86040830186612222565b6122b56080830185611cc3565b6122c260a08301846118e7565b9695505050505050565b600081519050919050565b600081905092915050565b60005b838110156123005780820151818401526020810190506122e5565b8381111561230f576000848401525b50505050565b6000612320826122cc565b61232a81856122d7565b935061233a8185602086016122e2565b80840191505092915050565b60006123528284612315565b915081905092915050565b60008060408385031215612374576123736117d8565b5b600061238285828601611cfb565b925050602061239385828601611cfb565b9150509250929050565b600062ffffff82169050919050565b6123b58161239d565b82525050565b6123c4816117dd565b82525050565b6123d381611911565b82525050565b610100820160008201516123f060008501826121ee565b50602082015161240360208501826121ee565b50604082015161241660408501826123ac565b50606082015161242960608501826121ee565b50608082015161243c60808501826123bb565b5060a082015161244f60a08501826123bb565b5060c082015161246260c08501826123bb565b5060e082015161247560e08501826123ca565b50505050565b60006101008201905061249160008301846123d9565b92915050565b60008115159050919050565b6124ac81612497565b81146124b757600080fd5b50565b6000815190506124c9816124a3565b92915050565b6000602082840312156124e5576124e46117d8565b5b60006124f3848285016124ba565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612558602a83611a0f565b9150612563826124fc565b604082019050919050565b600060208201905081810360008301526125878161254b565b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b60006125c4600283611a0f565b91506125cf8261258e565b602082019050919050565b600060208201905081810360008301526125f3816125b7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612656602683611a0f565b9150612661826125fa565b604082019050919050565b6000602082019050818103600083015261268581612649565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126c2601d83611a0f565b91506126cd8261268c565b602082019050919050565b600060208201905081810360008301526126f1816126b5565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061271f826126f8565b6127298185611a0f565b93506127398185602086016122e2565b61274281612703565b840191505092915050565b600060208201905081810360008301526127678184612714565b90509291505056fea264697066735822122062308ee9572cc73afd7da5530fcf41058c850d1a176f18f28d51ba6f0cde0a0b64736f6c634300080b0033",
  "devdoc": {
    "author": "Shu Dong",
    "kind": "dev",
    "methods": {
      "purchaseEarningTokenToPayDebt(uint256,uint256)": {
        "params": {
          "debtToPay": "Amount of debt to pay",
          "tokenId": "token id to get statement"
        }
      }
    },
    "title": "BillingFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "purchaseEarningTokenToPayDebt(uint256,uint256)": {
        "notice": "purchase on sale earning token to pay debt for token owner"
      },
      "tryBilling(uint256)": {
        "notice": "It will try to sell earning token at Uniswap to pay bill and start earning token sale if it fails"
      }
    },
    "notice": "billing related functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3735,
        "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)3732_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155Rewardable)3971": {
        "encoding": "inplace",
        "label": "contract IERC1155Rewardable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(BillingStatement)3689_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BillingStatement)",
        "numberOfBytes": "32",
        "value": "t_struct(BillingStatement)3689_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AppStorage)3732_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 3691,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "tokenCost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3694,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "nft",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC1155Rewardable)3971"
          },
          {
            "astId": 3696,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "paymentToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3698,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "custodian",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3700,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "royaltyBps",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 3702,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "royaltyCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3708,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "balances",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 3713,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "statements",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(BillingStatement)3689_storage)"
          },
          {
            "astId": 3715,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "chainlink",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3717,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "swapRouter",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 3719,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "swapRouterVersion",
            "offset": 20,
            "slot": "8",
            "type": "t_uint8"
          },
          {
            "astId": 3721,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "earningTokenSaleDiscount10000Based",
            "offset": 21,
            "slot": "8",
            "type": "t_uint16"
          },
          {
            "astId": 3725,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "strategyRegistry",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint8)"
          },
          {
            "astId": 3731,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "strategies",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_address))"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(BillingStatement)3689_storage": {
        "encoding": "inplace",
        "label": "struct BillingStatement",
        "members": [
          {
            "astId": 3684,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3686,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "surplus",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3688,
            "contract": "contracts/agent/facets/BillingFacet.sol:BillingFacet",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}