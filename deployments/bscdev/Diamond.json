{
  "address": "0x9980089266727607693b91024F733029DDF1C6c2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cloned",
          "type": "address"
        }
      ],
      "name": "Clone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "interfaces",
              "type": "bytes4[]"
            },
            {
              "internalType": "address",
              "name": "fallbackAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Diamond.InitArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "diamondFacets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "interfaces",
              "type": "bytes4[]"
            },
            {
              "internalType": "address",
              "name": "fallbackAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Diamond.InitArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nomineeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "setSupportedInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x183d52719be2605eb40e27efa1a1f72b2720b61805e7f43c9306e8884b1c54be",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0x9980089266727607693b91024F733029DDF1C6c2",
    "transactionIndex": 8,
    "gasUsed": "4134036",
    "logsBloom": "0x
    "blockHash": "0xa8fba56771241aa78d92cc0fa644448d5d26108f0d8c7bdbfe5e73b9f2244153",
    "transactionHash": "0x183d52719be2605eb40e27efa1a1f72b2720b61805e7f43c9306e8884b1c54be",
    "logs": [],
    "blockNumber": 16594323,
    "cumulativeGasUsed": "5996153",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "c2b7ca9702c45f6a89236ee4f4359bac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloned\",\"type\":\"address\"}],\"name\":\"Clone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaces\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Diamond.InitArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaces\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Diamond.InitArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nomineeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"setSupportedInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"data\":\"optional initialization call data\",\"facetCuts\":\"array of structured Diamond facet update data\",\"target\":\"optional recipient of initialization delegatecall\"}},\"facetAddress(bytes4)\":{\"params\":{\"selector\":\"function selector to query\"},\"returns\":{\"facet\":\"facet address (zero address if not found)\"}},\"facetAddresses()\":{\"returns\":{\"addresses\":\"array of facet addresses\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"facet\":\"address of facet to query\"},\"returns\":{\"selectors\":\"array of function selectors\"}},\"facets()\":{\"returns\":{\"diamondFacets\":\"array of structured facet data\"}},\"owner()\":{\"returns\":{\"_0\":\"conract owner\"}},\"pause()\":{\"details\":\"pause the contract\"},\"paused()\":{\"details\":\"Should return if the contract is paused\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"transferOwnership(address)\":{\"details\":\"ownership transfer must be accepted by beneficiary before transfer is complete\",\"params\":{\"account\":\"address of new owner\"}},\"unpause()\":{\"details\":\"unpause the contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"accept transfer of contract ownership\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"update functions callable on Diamond proxy\"},\"facetAddress(bytes4)\":{\"notice\":\"get the address of the facet associated with given selector\"},\"facetAddresses()\":{\"notice\":\"get addresses of all facets used by diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"get all selectors for given facet address\"},\"facets()\":{\"notice\":\"get all facets and their selectors\"},\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@solidstate/contracts/access/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conract owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x0fd040e17aa91c491c878ce12d104254b5f3ddd9ac8ccc01e355e3f56a686ef6\",\"license\":\"MIT\"},\"@solidstate/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC173 } from './IERC173.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IERC173, OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(msg.sender, account);\\n    }\\n}\\n\",\"keccak256\":\"0x266ec400ca10bb3f6caaa967a41a515be5344a51ef29eb4f89365f1bd84fe7a0\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/access/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Ownable, OwnableStorage } from './Ownable.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is Ownable, SafeOwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n    using SafeOwnableStorage for SafeOwnableStorage.Layout;\\n\\n    function nomineeOwner() public view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc Ownable\\n     * @dev ownership transfer must be accepted by beneficiary before transfer is complete\\n     */\\n    function transferOwnership(address account)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        SafeOwnableStorage.layout().setNomineeOwner(account);\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, msg.sender);\\n        l.setOwner(msg.sender);\\n        SafeOwnableStorage.layout().setNomineeOwner(address(0));\\n    }\\n}\\n\",\"keccak256\":\"0xcde42dfacad074a3ab5d07ac085d0c2165b5fbaa384940b2937b6397f1e31389\",\"license\":\"MIT\"},\"@solidstate/contracts/access/SafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal {\\n    using SafeOwnableStorage for SafeOwnableStorage.Layout;\\n\\n    modifier onlyNomineeOwner() {\\n        require(\\n            msg.sender == SafeOwnableStorage.layout().nomineeOwner,\\n            'SafeOwnable: sender must be nominee owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4275d29f1735aa755ffe476081a6b87c8994f77629f6b613866db2d55042b16f\",\"license\":\"MIT\"},\"@solidstate/contracts/access/SafeOwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setNomineeOwner(Layout storage l, address nomineeOwner) internal {\\n        l.nomineeOwner = nomineeOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf6c40aa6fa00d6d1091a7ff9188a35d8851c89ae2747b39166858c4309794b87\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        require(\\n            implementation.isContract(),\\n            'Proxy: implementation must be contract'\\n        );\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0xd4c47f98fdccfbc6b9f3a76e8fc2c009a00b927533476468167197686d0518a8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Proxy } from '../Proxy.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\nimport { IDiamondLoupe } from './IDiamondLoupe.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation() internal view override returns (address) {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        address implementation = address(bytes20(l.facets[msg.sig]));\\n\\n        if (implementation == address(0)) {\\n            implementation = l.fallbackAddress;\\n            require(\\n                implementation != address(0),\\n                'DiamondBase: no facet found for function signature'\\n            );\\n        }\\n\\n        return implementation;\\n    }\\n}\\n\",\"keccak256\":\"0x9340a14b651cbf712e8483f3a8dfcb6a3254381bbaf391acb3a41088f8139aab\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    using AddressUtils for address;\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    event DiamondCut(\\n        IDiamondCuttable.FacetCut[] facetCuts,\\n        address target,\\n        bytes data\\n    );\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param l storage layout\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                IDiamondCuttable.FacetCut memory facetCut = facetCuts[i];\\n                IDiamondCuttable.FacetCutAction action = facetCut.action;\\n\\n                require(\\n                    facetCut.selectors.length > 0,\\n                    'DiamondBase: no selectors specified'\\n                );\\n\\n                if (action == IDiamondCuttable.FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = l.addFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == IDiamondCuttable.FacetCutAction.REPLACE) {\\n                    l.replaceFacetSelectors(facetCut);\\n                } else if (action == IDiamondCuttable.FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = l.removeFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            initialize(target, data);\\n        }\\n    }\\n\\n    function addFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(this) ||\\n                    facetCut.target.isContract(),\\n                'DiamondBase: ADD target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    'DiamondBase: selector already added'\\n                );\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function removeFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(0),\\n                'DiamondBase: REMOVE target must be zero address'\\n            );\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function replaceFacetSelectors(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            require(\\n                facetCut.target.isContract(),\\n                'DiamondBase: REPLACE target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                require(\\n                    oldFacetAddress != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    oldFacetAddress != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                require(\\n                    oldFacetAddress != facetCut.target,\\n                    'DiamondBase: REPLACE target is identical'\\n                );\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function initialize(address target, bytes memory data) private {\\n        require(\\n            (target == address(0)) == (data.length == 0),\\n            'DiamondBase: invalid initialization parameters'\\n        );\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                require(\\n                    target.isContract(),\\n                    'DiamondBase: initialization target has no code'\\n                );\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28849abd900cb824f5a31e83a48b6d8c98cbab1b009bf28826cb6d6f82c8d94d\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondCuttable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableInternal } from '../../access/OwnableInternal.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondCuttable is IDiamondCuttable, OwnableInternal {\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external override onlyOwner {\\n        DiamondBaseStorage.layout().diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0x8b4af7f6d2eb33ceb43a8e750e1af387480228eb0cfa8f99ff02a064cfa211a9\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\nimport { IDiamondLoupe } from './IDiamondLoupe.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondLoupe is IDiamondLoupe {\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facets()\\n        external\\n        view\\n        override\\n        returns (Facet[] memory diamondFacets)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        override\\n        returns (bytes4[] memory selectors)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        override\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        override\\n        returns (address facet)\\n    {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x79d6e50faea16c1ad01ba6dd1b2505b23b911b31c6e8f6d27909fc748688187b\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondCuttable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondCuttable {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts facet addresses, actions, and function selectors\\n     * @param target initialization function target\\n     * @param data initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x891cc6eb426fc6babfccd51e4eea22796187bdd7023e725b15565a21244cacbe\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondLoupe {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        returns (address facet);\\n}\\n\",\"keccak256\":\"0x8480e0e111faaca3db5d23fb215150234174d135e4d2c4a208cda12fc6f8019a\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"contracts/shared/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/access/SafeOwnable.sol';\\nimport '@solidstate/contracts/access/IERC173.sol';\\nimport '@solidstate/contracts/introspection/IERC165.sol';\\nimport '@solidstate/contracts/introspection/ERC165Storage.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondBase.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondCuttable.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondLoupe.sol';\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport './lib/LibInitializable.sol';\\nimport './lib/LibPausable.sol';\\n\\ncontract Diamond is\\n    IERC165,\\n    Initializable,\\n    Pausable,\\n    SafeOwnable,\\n    DiamondBase,\\n    DiamondCuttable,\\n    DiamondLoupe\\n{\\n    using ERC165Storage for ERC165Storage.Layout;\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    event Clone(address indexed from, address indexed cloned);\\n\\n    struct InitArgs {\\n        address owner;\\n        bytes4[] interfaces;\\n        address fallbackAddress;\\n        bytes data;\\n    }\\n\\n    function init(InitArgs calldata args) external initializer {\\n        OwnableStorage.layout().setOwner(args.owner);\\n\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n        l.fallbackAddress = args.fallbackAddress;\\n        (\\n            bool success,\\n            bytes memory result\\n        ) = args.fallbackAddress.delegatecall(args.data);\\n        require(success, string(result));\\n\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n        for (uint i; i < args.interfaces.length; i++) {\\n            erc165.setSupportedInterface(args.interfaces[i], true);\\n        }\\n    }\\n\\n    function create(InitArgs memory args) external {\\n        address cloned = Clones.clone(address(this));\\n        Diamond(payable(cloned)).init(args);\\n        emit Clone(address(this), cloned);\\n    }\\n\\n    function getFallbackAddress() external view returns (address) {\\n        return DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    function setSupportedInterface(bytes4 interfaceId, bool supported) onlyOwner external {\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n        erc165.setSupportedInterface(interfaceId, supported);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public virtual override view returns (bool) {\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n        return interfaceId == type(IPausable).interfaceId ||\\n            interfaceId == type(IERC173).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IDiamondCuttable).interfaceId ||\\n            interfaceId == type(IDiamondLoupe).interfaceId ||\\n            erc165.isSupportedInterface(interfaceId);\\n    }\\n\\n    receive() external payable { }\\n}\\n\",\"keccak256\":\"0xc83c350fa81a9091f4c6bb1a3be3de7290c5873d5794db12bcefefc10d0d9aa1\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xb33768d5a13e8aa6c9c15a2988d677ec850db777536db6ab0c38f0f768f71569\",\"license\":\"MIT\"},\"contracts/shared/lib/LibInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/utils/AddressUtils.sol';\\n\\n/**\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary InitializableStorage {\\n    struct Layout {\\n        bool initialized;\\n        bool initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.contracts.storage.Initializable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    modifier initializer() {\\n        InitializableStorage.Layout storage l = InitializableStorage.layout();\\n        require(\\n            l.initializing ? isConstructor() : !l.initialized,\\n            'Initializable: contract is already initialized'\\n        );\\n        bool isTopLevelCall = !l.initializing;\\n        if (isTopLevelCall) {\\n            l.initializing = true;\\n            l.initialized = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            l.initializing = false;\\n        }\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(\\n            InitializableStorage.layout().initializing,\\n            'Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    function isConstructor() private view returns (bool) {\\n        return !AddressUtils.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9fad7cc55f61de87ce9768325bf94406261eaf42f198e1a69f3ead0dc56b656d\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x86af35526539727370e6cfcd7132918c2b8923052391f7a1816458066006979a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614a25806100206000396000f3fe6080604052600436106101025760003560e01c80637f73528b1161009557806396c32e511161006457806396c32e511461036f578063adfca15e14610398578063c197ea35146103d5578063cdffacc6146103fe578063f2fde38b1461043b57610109565b80637f73528b146102d95780638456cb59146103025780638ab5150a146103195780638da5cb5b1461034457610109565b806352ef6b2c116100d157806352ef6b2c146102415780635c975abb1461026c57806379ba5097146102975780637a0ed627146102ae57610109565b806301ffc9a7146101995780631f931c1c146101d65780632c408059146101ff5780633f4ba83a1461022a57610109565b3661010957005b6000610113610464565b90506101348173ffffffffffffffffffffffffffffffffffffffff166105e3565b610173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016a90612ff6565b60405180910390fd5b3660008037600080366000845af43d6000803e8060008114610194573d6000f35b3d6000fd5b3480156101a557600080fd5b506101c060048036038101906101bb9190613082565b6105f6565b6040516101cd91906130ca565b60405180910390f35b3480156101e257600080fd5b506101fd60048036038101906101f891906131fe565b610826565b005b34801561020b57600080fd5b50610214610934565b60405161022191906132a2565b60405180910390f35b34801561023657600080fd5b5061023f610967565b005b34801561024d57600080fd5b50610256610a5d565b604051610263919061337b565b60405180910390f35b34801561027857600080fd5b50610281610cc5565b60405161028e91906130ca565b60405180910390f35b3480156102a357600080fd5b506102ac610ce5565b005b3480156102ba57600080fd5b506102c3610e39565b6040516102d0919061355a565b60405180910390f35b3480156102e557600080fd5b5061030060048036038101906102fb91906135a8565b6113a1565b005b34801561030e57600080fd5b50610317611460565b005b34801561032557600080fd5b5061032e611556565b60405161033b91906132a2565b60405180910390f35b34801561035057600080fd5b50610359611589565b60405161036691906132a2565b60405180910390f35b34801561037b57600080fd5b50610396600480360381019061039191906138a6565b6115bc565b005b3480156103a457600080fd5b506103bf60048036038101906103ba91906138ef565b611692565b6040516103cc919061398b565b60405180910390f35b3480156103e157600080fd5b506103fc60048036038101906103f791906139d1565b6118b6565b005b34801561040a57600080fd5b5061042560048036038101906104209190613082565b611ba4565b60405161043291906132a2565b60405180910390f35b34801561044757600080fd5b50610462600480360381019061045d91906138ef565b611c0b565b005b60008060007f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939050809150600082600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105da578260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090613a8c565b60405180910390fd5b5b80935050505090565b600080823b905060008111915050919050565b600080610601611cc1565b90507fe78a39d8000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106cc57507f7f5828d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061073457507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061079c57507f1f931c1c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061080457507f48e2b093000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061081e575061081d8382611cee90919063ffffffff16565b5b915050919050565b61082e611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b690613af8565b60405180910390fd5b61092d8585906108cf9190613c70565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061091d611d86565b611db3909392919063ffffffff16565b5050505050565b600061093e611d86565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61096f611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f790613af8565b60405180910390fd5b6000610a0a61200d565b60000160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051610a5391906132a2565b60405180910390a1565b60606000610a69611d86565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610a9b57610a9a6135fe565b5b604051908082528060200260200182016040528015610ac95781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff16821015610cbb57600084600201600083815260200190815260200160002054905060005b6008811015610ca6578380610b2190613cbe565b9450508560010160009054906101000a900461ffff1661ffff16841115610b4757610ca6565b6000600582901b83901b90506000876000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b88811015610c24578a8181518110610bcd57610bcc613d07565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c115760019150610c24565b8080610c1c90613cbe565b915050610bb2565b508015610c3357505050610c93565b818a8981518110610c4757610c46613d07565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508780610c8c90613cbe565b9850505050505b8080610c9e90613cbe565b915050610b0d565b50508080610cb390613cbe565b915050610ad2565b5081845250505090565b6000610ccf61200d565b60000160009054906101000a900460ff16905090565b610ced61203a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7590613da8565b60405180910390fd5b6000610d88611d59565b90503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610e1b338261206790919063ffffffff16565b610e366000610e2861203a565b6120ae90919063ffffffff16565b50565b60606000610e45611d86565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610e7757610e766135fe565b5b604051908082528060200260200182016040528015610eb057816020015b610e9d612f43565b815260200190600190039081610e955790505b50915060008160010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610ee557610ee46135fe565b5b604051908082528060200260200182016040528015610f135781602001602082028036833780820191505090505b50905060008060005b8460010160009054906101000a900461ffff1661ffff1682101561132d57600085600201600083815260200190815260200160002054905060005b6008811015611318578380610f6b90613cbe565b9450508660010160009054906101000a900461ffff1661ffff16841115610f9157611318565b6000600582901b83901b90506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b88811015611169578273ffffffffffffffffffffffffffffffffffffffff168c828151811061102e5761102d613d07565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141561115657838c828151811061106a57611069613d07565b5b6020026020010151602001518b838151811061108957611088613d07565b5b602002602001015160ff16815181106110a5576110a4613d07565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a828151811061110657611105613d07565b5b602002602001015160ff161061111b57600080fd5b89818151811061112e5761112d613d07565b5b60200260200101805180919061114390613dd5565b60ff1660ff168152505060019150611169565b808061116190613cbe565b915050610ffc565b50801561117857505050611305565b818b898151811061118c5761118b613d07565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508960010160009054906101000a900461ffff1661ffff1667ffffffffffffffff8111156111fa576111f96135fe565b5b6040519080825280602002602001820160405280156112285781602001602082028036833780820191505090505b508b898151811061123c5761123b613d07565b5b602002602001015160200181905250828b898151811061125f5761125e613d07565b5b60200260200101516020015160008151811061127e5761127d613d07565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060018989815181106112df576112de613d07565b5b602002602001019060ff16908160ff168152505087806112fe90613cbe565b9850505050505b808061131090613cbe565b915050610f57565b5050808061132590613cbe565b915050610f1c565b5060005b8281101561139657600084828151811061134e5761134d613d07565b5b602002602001015160ff16905060008783815181106113705761136f613d07565b5b60200260200101516020015190508181525050808061138e90613cbe565b915050611331565b508185525050505090565b6113a9611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461143a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143190613af8565b60405180910390fd5b6000611444611cc1565b905061145b8383836120f59092919063ffffffff16565b505050565b611468611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f090613af8565b60405180910390fd5b600161150361200d565b60000160006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583360405161154c91906132a2565b60405180910390a1565b600061156061203a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611593611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006115c7306121ce565b90508073ffffffffffffffffffffffffffffffffffffffff1663c197ea35836040518263ffffffff1660e01b81526004016116029190613ef1565b600060405180830381600087803b15801561161c57600080fd5b505af1158015611630573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fb557324045551eafb0789d69d5679a7017a31840124b2220df4b81dea45ec08360405160405180910390a35050565b6060600061169e611d86565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff8111156116d0576116cf6135fe565b5b6040519080825280602002602001820160405280156116fe5781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff168210156118aa57600084600201600083815260200190815260200160002054905060005b600881101561189557838061175690613cbe565b9450508560010160009054906101000a900461ffff1661ffff1684111561177c57611895565b6000600582901b83901b9050866000016000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415611881578088878151811061182657611825613d07565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050858061187d90613cbe565b9650505b50808061188d90613cbe565b915050611742565b505080806118a290613cbe565b915050611707565b50818452505050919050565b60006118c06122a3565b90508060000160019054906101000a900460ff166118f0578060000160009054906101000a900460ff16156118f9565b6118f86122d0565b5b611938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192f90613f85565b60405180910390fd5b60008160000160019054906101000a900460ff1615905080156119905760018260000160016101000a81548160ff02191690831515021790555060018260000160006101000a81548160ff0219169083151502179055505b6119bc8360000160208101906119a691906138ef565b6119ae611d59565b61206790919063ffffffff16565b60006119c6611d86565b90508360400160208101906119db91906138ef565b8160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080856040016020810190611a3391906138ef565b73ffffffffffffffffffffffffffffffffffffffff16868060600190611a599190613fb4565b604051611a67929190614047565b600060405180830381855af49150503d8060008114611aa2576040519150601f19603f3d011682016040523d82523d6000602084013e611aa7565b606091505b5091509150818190611aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae691906140a4565b60405180910390fd5b506000611afa611cc1565b905060005b878060200190611b0f91906140c6565b9050811015611b7657611b63888060200190611b2b91906140c6565b83818110611b3c57611b3b613d07565b5b9050602002016020810190611b519190613082565b6001846120f59092919063ffffffff16565b8080611b6e90613cbe565b915050611aff565b50505050508015611b9f5760008260000160016101000a81548160ff0219169083151502179055505b505050565b6000611bae611d86565b6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050919050565b611c13611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9b90613af8565b60405180910390fd5b611cbe81611cb061203a565b6120ae90919063ffffffff16565b50565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000807f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390508091505090565b60008460010160009054906101000a900461ffff1661ffff1690506000819050600080600783161115611dfd57866002016000600384901c81526020019081526020016000205490505b60005b8651811015611f6c576000878281518110611e1e57611e1d613d07565b5b60200260200101519050600081602001519050600082604001515111611e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e709061419b565b60405180910390fd5b60006002811115611e8d57611e8c6141bb565b5b816002811115611ea057611e9f6141bb565b5b1415611eca57611ebd8585848d6122e1909392919063ffffffff16565b8095508196505050611f5d565b60016002811115611ede57611edd6141bb565b5b816002811115611ef157611ef06141bb565b5b1415611f0f57611f0a828b6125a290919063ffffffff16565b611f5c565b600280811115611f2257611f216141bb565b5b816002811115611f3557611f346141bb565b5b1415611f5b57611f528585848d61287f909392919063ffffffff16565b80955081965050505b5b5b50508080600101915050611e00565b50828214611f9457818760010160006101000a81548161ffff021916908361ffff1602179055505b6000600783161115611fbf5780876002016000600385901c8152602001908152602001600020819055505b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673868686604051611ff29392919061438e565b60405180910390a16120048585612d84565b50505050505050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6000807f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789090508091505090565b808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b63ffffffff60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561215e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121559061441f565b60405180910390fd5b80836000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561229e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122959061448b565b60405180910390fd5b919050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b60006122db306105e3565b15905090565b6000803073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614806123415750612340836000015173ffffffffffffffffffffffffffffffffffffffff166105e3565b5b612380576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123779061451d565b60405180910390fd5b60005b836040015151811015612592576000846040015182815181106123a9576123a8613d07565b5b602002602001015190506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161461247d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612474906145af565b60405180910390fd5b8760001b866000015160601b6bffffffffffffffffffffffff191617896000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506000600560078a16901b905080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c19891617975060e081141561257a57878a600201600060038c901c8152602001908152602001600020819055506000801b97505b88806001019950505050508080600101915050612383565b5084849150915094509492505050565b6125c5816000015173ffffffffffffffffffffffffffffffffffffffff166105e3565b612604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125fb90614641565b60405180910390fd5b60005b81604001515181101561287a5760008260400151828151811061262d5761262c613d07565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054905060008160601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fe906146ad565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276d9061473f565b60405180910390fd5b846000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156127e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e0906147d1565b60405180910390fd5b846000015160601b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b831617866000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050508080600101915050612607565b505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16146128f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ec90614863565b60405180910390fd5b6000600386901c9050600060078716905060005b856040015151811015612d695760008660400151828151811061292f5761292e613d07565b5b6020026020010151905060008a6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415612a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fb906146ad565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415612a76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6d9061473f565b60405180910390fd5b6000801b891415612aab578480600190039550508a600201600086815260200190815260200160002054985060079350612ab5565b8380600190039450505b6000806000600587901b8c901b9250847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612bd7578d6000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020546bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b8516178e6000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505b8d6000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560008460001c61ffff169050600381901c9250600560078216901b915050878214612cdd5760008e600201600084815260200190815260200160002054905081847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c827fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198216179050808f60020160008581526020019081526020016000208190555050612d2e565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198d16179b505b6000871415612d57578d6002016000898152602001908152602001600020600090556000801b9b505b50505050508080600101915050612909565b5080600383901b179650868693509350505094509492505050565b60008151141515600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151514612dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df4906148f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612f3f573073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ec357612e838273ffffffffffffffffffffffffffffffffffffffff166105e3565b612ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb990614987565b60405180910390fd5b5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051612eea91906149d8565b600060405180830381855af49150503d8060008114612f25576040519150601f19603f3d011682016040523d82523d6000602084013e612f2a565b606091505b5050905080612f3d573d6000803e3d6000fd5b505b5050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600082825260208201905092915050565b7f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000612fe0602683612f73565b9150612feb82612f84565b604082019050919050565b6000602082019050818103600083015261300f81612fd3565b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61305f8161302a565b811461306a57600080fd5b50565b60008135905061307c81613056565b92915050565b60006020828403121561309857613097613020565b5b60006130a68482850161306d565b91505092915050565b60008115159050919050565b6130c4816130af565b82525050565b60006020820190506130df60008301846130bb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261310a576131096130e5565b5b8235905067ffffffffffffffff811115613127576131266130ea565b5b602083019150836020820283011115613143576131426130ef565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131758261314a565b9050919050565b6131858161316a565b811461319057600080fd5b50565b6000813590506131a28161317c565b92915050565b60008083601f8401126131be576131bd6130e5565b5b8235905067ffffffffffffffff8111156131db576131da6130ea565b5b6020830191508360018202830111156131f7576131f66130ef565b5b9250929050565b60008060008060006060868803121561321a57613219613020565b5b600086013567ffffffffffffffff81111561323857613237613025565b5b613244888289016130f4565b9550955050602061325788828901613193565b935050604086013567ffffffffffffffff81111561327857613277613025565b5b613284888289016131a8565b92509250509295509295909350565b61329c8161316a565b82525050565b60006020820190506132b76000830184613293565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6132f28161316a565b82525050565b600061330483836132e9565b60208301905092915050565b6000602082019050919050565b6000613328826132bd565b61333281856132c8565b935061333d836132d9565b8060005b8381101561336e57815161335588826132f8565b975061336083613310565b925050600181019050613341565b5085935050505092915050565b60006020820190508181036000830152613395818461331d565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6133fe8161302a565b82525050565b600061341083836133f5565b60208301905092915050565b6000602082019050919050565b6000613434826133c9565b61343e81856133d4565b9350613449836133e5565b8060005b8381101561347a5781516134618882613404565b975061346c8361341c565b92505060018101905061344d565b5085935050505092915050565b600060408301600083015161349f60008601826132e9565b50602083015184820360208601526134b78282613429565b9150508091505092915050565b60006134d08383613487565b905092915050565b6000602082019050919050565b60006134f08261339d565b6134fa81856133a8565b93508360208202850161350c856133b9565b8060005b85811015613548578484038952815161352985826134c4565b9450613534836134d8565b925060208a01995050600181019050613510565b50829750879550505050505092915050565b6000602082019050818103600083015261357481846134e5565b905092915050565b613585816130af565b811461359057600080fd5b50565b6000813590506135a28161357c565b92915050565b600080604083850312156135bf576135be613020565b5b60006135cd8582860161306d565b92505060206135de85828601613593565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613636826135ed565b810181811067ffffffffffffffff82111715613655576136546135fe565b5b80604052505050565b6000613668613016565b9050613674828261362d565b919050565b600080fd5b600067ffffffffffffffff821115613699576136986135fe565b5b602082029050602081019050919050565b60006136bd6136b88461367e565b61365e565b905080838252602082019050602084028301858111156136e0576136df6130ef565b5b835b8181101561370957806136f5888261306d565b8452602084019350506020810190506136e2565b5050509392505050565b600082601f830112613728576137276130e5565b5b81356137388482602086016136aa565b91505092915050565b600080fd5b600067ffffffffffffffff821115613761576137606135fe565b5b61376a826135ed565b9050602081019050919050565b82818337600083830152505050565b600061379961379484613746565b61365e565b9050828152602081018484840111156137b5576137b4613741565b5b6137c0848285613777565b509392505050565b600082601f8301126137dd576137dc6130e5565b5b81356137ed848260208601613786565b91505092915050565b60006080828403121561380c5761380b6135e8565b5b613816608061365e565b9050600061382684828501613193565b600083015250602082013567ffffffffffffffff81111561384a57613849613679565b5b61385684828501613713565b602083015250604061386a84828501613193565b604083015250606082013567ffffffffffffffff81111561388e5761388d613679565b5b61389a848285016137c8565b60608301525092915050565b6000602082840312156138bc576138bb613020565b5b600082013567ffffffffffffffff8111156138da576138d9613025565b5b6138e6848285016137f6565b91505092915050565b60006020828403121561390557613904613020565b5b600061391384828501613193565b91505092915050565b600082825260208201905092915050565b6000613938826133c9565b613942818561391c565b935061394d836133e5565b8060005b8381101561397e5781516139658882613404565b97506139708361341c565b925050600181019050613951565b5085935050505092915050565b600060208201905081810360008301526139a5818461392d565b905092915050565b600080fd5b6000608082840312156139c8576139c76139ad565b5b81905092915050565b6000602082840312156139e7576139e6613020565b5b600082013567ffffffffffffffff811115613a0557613a04613025565b5b613a11848285016139b2565b91505092915050565b7f4469616d6f6e64426173653a206e6f20666163657420666f756e6420666f722060008201527f66756e6374696f6e207369676e61747572650000000000000000000000000000602082015250565b6000613a76603283612f73565b9150613a8182613a1a565b604082019050919050565b60006020820190508181036000830152613aa581613a69565b9050919050565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b6000613ae2601d83612f73565b9150613aed82613aac565b602082019050919050565b60006020820190508181036000830152613b1181613ad5565b9050919050565b600067ffffffffffffffff821115613b3357613b326135fe565b5b602082029050602081019050919050565b60038110613b5157600080fd5b50565b600081359050613b6381613b44565b92915050565b600060608284031215613b7f57613b7e6135e8565b5b613b89606061365e565b90506000613b9984828501613193565b6000830152506020613bad84828501613b54565b602083015250604082013567ffffffffffffffff811115613bd157613bd0613679565b5b613bdd84828501613713565b60408301525092915050565b6000613bfc613bf784613b18565b61365e565b90508083825260208201905060208402830185811115613c1f57613c1e6130ef565b5b835b81811015613c6657803567ffffffffffffffff811115613c4457613c436130e5565b5b808601613c518982613b69565b85526020850194505050602081019050613c21565b5050509392505050565b6000613c7d368484613be9565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000613cc982613cb4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613cfc57613cfb613c85565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f536166654f776e61626c653a2073656e646572206d757374206265206e6f6d6960008201527f6e6565206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613d92602983612f73565b9150613d9d82613d36565b604082019050919050565b60006020820190508181036000830152613dc181613d85565b9050919050565b600060ff82169050919050565b6000613de082613dc8565b915060ff821415613df457613df3613c85565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613e39578082015181840152602081019050613e1e565b83811115613e48576000848401525b50505050565b6000613e5982613dff565b613e638185613e0a565b9350613e73818560208601613e1b565b613e7c816135ed565b840191505092915050565b6000608083016000830151613e9f60008601826132e9565b5060208301518482036020860152613eb78282613429565b9150506040830151613ecc60408601826132e9565b5060608301518482036060860152613ee48282613e4e565b9150508091505092915050565b60006020820190508181036000830152613f0b8184613e87565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613f6f602e83612f73565b9150613f7a82613f13565b604082019050919050565b60006020820190508181036000830152613f9e81613f62565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613fd157613fd0613fa5565b5b80840192508235915067ffffffffffffffff821115613ff357613ff2613faa565b5b60208301925060018202360383131561400f5761400e613faf565b5b509250929050565b600081905092915050565b600061402e8385614017565b935061403b838584613777565b82840190509392505050565b6000614054828486614022565b91508190509392505050565b600081519050919050565b600061407682614060565b6140808185612f73565b9350614090818560208601613e1b565b614099816135ed565b840191505092915050565b600060208201905081810360008301526140be818461406b565b905092915050565b600080833560016020038436030381126140e3576140e2613fa5565b5b80840192508235915067ffffffffffffffff82111561410557614104613faa565b5b60208301925060208202360383131561412157614120613faf565b5b509250929050565b7f4469616d6f6e64426173653a206e6f2073656c6563746f72732073706563696660008201527f6965640000000000000000000000000000000000000000000000000000000000602082015250565b6000614185602383612f73565b915061419082614129565b604082019050919050565b600060208201905081810360008301526141b481614178565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60038110614227576142266141bb565b5b50565b600081905061423882614216565b919050565b60006142488261422a565b9050919050565b6142588161423d565b82525050565b600060608301600083015161427660008601826132e9565b506020830151614289602086018261424f565b50604083015184820360408601526142a18282613429565b9150508091505092915050565b60006142ba838361425e565b905092915050565b6000602082019050919050565b60006142da826141ea565b6142e481856141f5565b9350836020820285016142f685614206565b8060005b85811015614332578484038952815161431385826142ae565b945061431e836142c2565b925060208a019950506001810190506142fa565b50829750879550505050505092915050565b600082825260208201905092915050565b600061436082613dff565b61436a8185614344565b935061437a818560208601613e1b565b614383816135ed565b840191505092915050565b600060608201905081810360008301526143a881866142cf565b90506143b76020830185613293565b81810360408301526143c98184614355565b9050949350505050565b7f4552433136353a20696e76616c696420696e7465726661636520696400000000600082015250565b6000614409601c83612f73565b9150614414826143d3565b602082019050919050565b60006020820190508181036000830152614438816143fc565b9050919050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b6000614475601683612f73565b91506144808261443f565b602082019050919050565b600060208201905081810360008301526144a481614468565b9050919050565b7f4469616d6f6e64426173653a204144442074617267657420686173206e6f206360008201527f6f64650000000000000000000000000000000000000000000000000000000000602082015250565b6000614507602383612f73565b9150614512826144ab565b604082019050919050565b60006020820190508181036000830152614536816144fa565b9050919050565b7f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460008201527f6465640000000000000000000000000000000000000000000000000000000000602082015250565b6000614599602383612f73565b91506145a48261453d565b604082019050919050565b600060208201905081810360008301526145c88161458c565b9050919050565b7f4469616d6f6e64426173653a205245504c41434520746172676574206861732060008201527f6e6f20636f646500000000000000000000000000000000000000000000000000602082015250565b600061462b602783612f73565b9150614636826145cf565b604082019050919050565b6000602082019050818103600083015261465a8161461e565b9050919050565b7f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e6400600082015250565b6000614697601f83612f73565b91506146a282614661565b602082019050919050565b600060208201905081810360008301526146c68161468a565b9050919050565b7f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d7574616260008201527f6c65000000000000000000000000000000000000000000000000000000000000602082015250565b6000614729602283612f73565b9150614734826146cd565b604082019050919050565b600060208201905081810360008301526147588161471c565b9050919050565b7f4469616d6f6e64426173653a205245504c41434520746172676574206973206960008201527f64656e746963616c000000000000000000000000000000000000000000000000602082015250565b60006147bb602883612f73565b91506147c68261475f565b604082019050919050565b600060208201905081810360008301526147ea816147ae565b9050919050565b7f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060008201527f6265207a65726f20616464726573730000000000000000000000000000000000602082015250565b600061484d602f83612f73565b9150614858826147f1565b604082019050919050565b6000602082019050818103600083015261487c81614840565b9050919050565b7f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460008201527f696f6e20706172616d6574657273000000000000000000000000000000000000602082015250565b60006148df602e83612f73565b91506148ea82614883565b604082019050919050565b6000602082019050818103600083015261490e816148d2565b9050919050565b7f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760008201527f657420686173206e6f20636f6465000000000000000000000000000000000000602082015250565b6000614971602e83612f73565b915061497c82614915565b604082019050919050565b600060208201905081810360008301526149a081614964565b9050919050565b60006149b282613dff565b6149bc8185614017565b93506149cc818560208601613e1b565b80840191505092915050565b60006149e482846149a7565b91508190509291505056fea2646970667358221220940ea7f99150516592605370a5d28a04b7eb4d82f6a43a260a07d052b9424d0164736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c80637f73528b1161009557806396c32e511161006457806396c32e511461036f578063adfca15e14610398578063c197ea35146103d5578063cdffacc6146103fe578063f2fde38b1461043b57610109565b80637f73528b146102d95780638456cb59146103025780638ab5150a146103195780638da5cb5b1461034457610109565b806352ef6b2c116100d157806352ef6b2c146102415780635c975abb1461026c57806379ba5097146102975780637a0ed627146102ae57610109565b806301ffc9a7146101995780631f931c1c146101d65780632c408059146101ff5780633f4ba83a1461022a57610109565b3661010957005b6000610113610464565b90506101348173ffffffffffffffffffffffffffffffffffffffff166105e3565b610173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016a90612ff6565b60405180910390fd5b3660008037600080366000845af43d6000803e8060008114610194573d6000f35b3d6000fd5b3480156101a557600080fd5b506101c060048036038101906101bb9190613082565b6105f6565b6040516101cd91906130ca565b60405180910390f35b3480156101e257600080fd5b506101fd60048036038101906101f891906131fe565b610826565b005b34801561020b57600080fd5b50610214610934565b60405161022191906132a2565b60405180910390f35b34801561023657600080fd5b5061023f610967565b005b34801561024d57600080fd5b50610256610a5d565b604051610263919061337b565b60405180910390f35b34801561027857600080fd5b50610281610cc5565b60405161028e91906130ca565b60405180910390f35b3480156102a357600080fd5b506102ac610ce5565b005b3480156102ba57600080fd5b506102c3610e39565b6040516102d0919061355a565b60405180910390f35b3480156102e557600080fd5b5061030060048036038101906102fb91906135a8565b6113a1565b005b34801561030e57600080fd5b50610317611460565b005b34801561032557600080fd5b5061032e611556565b60405161033b91906132a2565b60405180910390f35b34801561035057600080fd5b50610359611589565b60405161036691906132a2565b60405180910390f35b34801561037b57600080fd5b50610396600480360381019061039191906138a6565b6115bc565b005b3480156103a457600080fd5b506103bf60048036038101906103ba91906138ef565b611692565b6040516103cc919061398b565b60405180910390f35b3480156103e157600080fd5b506103fc60048036038101906103f791906139d1565b6118b6565b005b34801561040a57600080fd5b5061042560048036038101906104209190613082565b611ba4565b60405161043291906132a2565b60405180910390f35b34801561044757600080fd5b50610462600480360381019061045d91906138ef565b611c0b565b005b60008060007f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939050809150600082600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105da578260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090613a8c565b60405180910390fd5b5b80935050505090565b600080823b905060008111915050919050565b600080610601611cc1565b90507fe78a39d8000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106cc57507f7f5828d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061073457507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061079c57507f1f931c1c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061080457507f48e2b093000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061081e575061081d8382611cee90919063ffffffff16565b5b915050919050565b61082e611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b690613af8565b60405180910390fd5b61092d8585906108cf9190613c70565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061091d611d86565b611db3909392919063ffffffff16565b5050505050565b600061093e611d86565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61096f611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a00576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f790613af8565b60405180910390fd5b6000610a0a61200d565b60000160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051610a5391906132a2565b60405180910390a1565b60606000610a69611d86565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610a9b57610a9a6135fe565b5b604051908082528060200260200182016040528015610ac95781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff16821015610cbb57600084600201600083815260200190815260200160002054905060005b6008811015610ca6578380610b2190613cbe565b9450508560010160009054906101000a900461ffff1661ffff16841115610b4757610ca6565b6000600582901b83901b90506000876000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b88811015610c24578a8181518110610bcd57610bcc613d07565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c115760019150610c24565b8080610c1c90613cbe565b915050610bb2565b508015610c3357505050610c93565b818a8981518110610c4757610c46613d07565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508780610c8c90613cbe565b9850505050505b8080610c9e90613cbe565b915050610b0d565b50508080610cb390613cbe565b915050610ad2565b5081845250505090565b6000610ccf61200d565b60000160009054906101000a900460ff16905090565b610ced61203a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7590613da8565b60405180910390fd5b6000610d88611d59565b90503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610e1b338261206790919063ffffffff16565b610e366000610e2861203a565b6120ae90919063ffffffff16565b50565b60606000610e45611d86565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610e7757610e766135fe565b5b604051908082528060200260200182016040528015610eb057816020015b610e9d612f43565b815260200190600190039081610e955790505b50915060008160010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610ee557610ee46135fe565b5b604051908082528060200260200182016040528015610f135781602001602082028036833780820191505090505b50905060008060005b8460010160009054906101000a900461ffff1661ffff1682101561132d57600085600201600083815260200190815260200160002054905060005b6008811015611318578380610f6b90613cbe565b9450508660010160009054906101000a900461ffff1661ffff16841115610f9157611318565b6000600582901b83901b90506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b88811015611169578273ffffffffffffffffffffffffffffffffffffffff168c828151811061102e5761102d613d07565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141561115657838c828151811061106a57611069613d07565b5b6020026020010151602001518b838151811061108957611088613d07565b5b602002602001015160ff16815181106110a5576110a4613d07565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a828151811061110657611105613d07565b5b602002602001015160ff161061111b57600080fd5b89818151811061112e5761112d613d07565b5b60200260200101805180919061114390613dd5565b60ff1660ff168152505060019150611169565b808061116190613cbe565b915050610ffc565b50801561117857505050611305565b818b898151811061118c5761118b613d07565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508960010160009054906101000a900461ffff1661ffff1667ffffffffffffffff8111156111fa576111f96135fe565b5b6040519080825280602002602001820160405280156112285781602001602082028036833780820191505090505b508b898151811061123c5761123b613d07565b5b602002602001015160200181905250828b898151811061125f5761125e613d07565b5b60200260200101516020015160008151811061127e5761127d613d07565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060018989815181106112df576112de613d07565b5b602002602001019060ff16908160ff168152505087806112fe90613cbe565b9850505050505b808061131090613cbe565b915050610f57565b5050808061132590613cbe565b915050610f1c565b5060005b8281101561139657600084828151811061134e5761134d613d07565b5b602002602001015160ff16905060008783815181106113705761136f613d07565b5b60200260200101516020015190508181525050808061138e90613cbe565b915050611331565b508185525050505090565b6113a9611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461143a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143190613af8565b60405180910390fd5b6000611444611cc1565b905061145b8383836120f59092919063ffffffff16565b505050565b611468611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f090613af8565b60405180910390fd5b600161150361200d565b60000160006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583360405161154c91906132a2565b60405180910390a1565b600061156061203a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611593611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006115c7306121ce565b90508073ffffffffffffffffffffffffffffffffffffffff1663c197ea35836040518263ffffffff1660e01b81526004016116029190613ef1565b600060405180830381600087803b15801561161c57600080fd5b505af1158015611630573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fb557324045551eafb0789d69d5679a7017a31840124b2220df4b81dea45ec08360405160405180910390a35050565b6060600061169e611d86565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff8111156116d0576116cf6135fe565b5b6040519080825280602002602001820160405280156116fe5781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff168210156118aa57600084600201600083815260200190815260200160002054905060005b600881101561189557838061175690613cbe565b9450508560010160009054906101000a900461ffff1661ffff1684111561177c57611895565b6000600582901b83901b9050866000016000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415611881578088878151811061182657611825613d07565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050858061187d90613cbe565b9650505b50808061188d90613cbe565b915050611742565b505080806118a290613cbe565b915050611707565b50818452505050919050565b60006118c06122a3565b90508060000160019054906101000a900460ff166118f0578060000160009054906101000a900460ff16156118f9565b6118f86122d0565b5b611938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192f90613f85565b60405180910390fd5b60008160000160019054906101000a900460ff1615905080156119905760018260000160016101000a81548160ff02191690831515021790555060018260000160006101000a81548160ff0219169083151502179055505b6119bc8360000160208101906119a691906138ef565b6119ae611d59565b61206790919063ffffffff16565b60006119c6611d86565b90508360400160208101906119db91906138ef565b8160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080856040016020810190611a3391906138ef565b73ffffffffffffffffffffffffffffffffffffffff16868060600190611a599190613fb4565b604051611a67929190614047565b600060405180830381855af49150503d8060008114611aa2576040519150601f19603f3d011682016040523d82523d6000602084013e611aa7565b606091505b5091509150818190611aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae691906140a4565b60405180910390fd5b506000611afa611cc1565b905060005b878060200190611b0f91906140c6565b9050811015611b7657611b63888060200190611b2b91906140c6565b83818110611b3c57611b3b613d07565b5b9050602002016020810190611b519190613082565b6001846120f59092919063ffffffff16565b8080611b6e90613cbe565b915050611aff565b50505050508015611b9f5760008260000160016101000a81548160ff0219169083151502179055505b505050565b6000611bae611d86565b6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050919050565b611c13611d59565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9b90613af8565b60405180910390fd5b611cbe81611cb061203a565b6120ae90919063ffffffff16565b50565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000807f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390508091505090565b60008460010160009054906101000a900461ffff1661ffff1690506000819050600080600783161115611dfd57866002016000600384901c81526020019081526020016000205490505b60005b8651811015611f6c576000878281518110611e1e57611e1d613d07565b5b60200260200101519050600081602001519050600082604001515111611e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e709061419b565b60405180910390fd5b60006002811115611e8d57611e8c6141bb565b5b816002811115611ea057611e9f6141bb565b5b1415611eca57611ebd8585848d6122e1909392919063ffffffff16565b8095508196505050611f5d565b60016002811115611ede57611edd6141bb565b5b816002811115611ef157611ef06141bb565b5b1415611f0f57611f0a828b6125a290919063ffffffff16565b611f5c565b600280811115611f2257611f216141bb565b5b816002811115611f3557611f346141bb565b5b1415611f5b57611f528585848d61287f909392919063ffffffff16565b80955081965050505b5b5b50508080600101915050611e00565b50828214611f9457818760010160006101000a81548161ffff021916908361ffff1602179055505b6000600783161115611fbf5780876002016000600385901c8152602001908152602001600020819055505b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673868686604051611ff29392919061438e565b60405180910390a16120048585612d84565b50505050505050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6000807f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789090508091505090565b808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b63ffffffff60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561215e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121559061441f565b60405180910390fd5b80836000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561229e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122959061448b565b60405180910390fd5b919050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b60006122db306105e3565b15905090565b6000803073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614806123415750612340836000015173ffffffffffffffffffffffffffffffffffffffff166105e3565b5b612380576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123779061451d565b60405180910390fd5b60005b836040015151811015612592576000846040015182815181106123a9576123a8613d07565b5b602002602001015190506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161461247d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612474906145af565b60405180910390fd5b8760001b866000015160601b6bffffffffffffffffffffffff191617896000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506000600560078a16901b905080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c19891617975060e081141561257a57878a600201600060038c901c8152602001908152602001600020819055506000801b97505b88806001019950505050508080600101915050612383565b5084849150915094509492505050565b6125c5816000015173ffffffffffffffffffffffffffffffffffffffff166105e3565b612604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125fb90614641565b60405180910390fd5b60005b81604001515181101561287a5760008260400151828151811061262d5761262c613d07565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054905060008160601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fe906146ad565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276d9061473f565b60405180910390fd5b846000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156127e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e0906147d1565b60405180910390fd5b846000015160601b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b831617866000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050508080600101915050612607565b505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16146128f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ec90614863565b60405180910390fd5b6000600386901c9050600060078716905060005b856040015151811015612d695760008660400151828151811061292f5761292e613d07565b5b6020026020010151905060008a6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415612a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fb906146ad565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415612a76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6d9061473f565b60405180910390fd5b6000801b891415612aab578480600190039550508a600201600086815260200190815260200160002054985060079350612ab5565b8380600190039450505b6000806000600587901b8c901b9250847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612bd7578d6000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020546bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b8516178e6000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505b8d6000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560008460001c61ffff169050600381901c9250600560078216901b915050878214612cdd5760008e600201600084815260200190815260200160002054905081847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c827fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198216179050808f60020160008581526020019081526020016000208190555050612d2e565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198d16179b505b6000871415612d57578d6002016000898152602001908152602001600020600090556000801b9b505b50505050508080600101915050612909565b5080600383901b179650868693509350505094509492505050565b60008151141515600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151514612dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df4906148f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612f3f573073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ec357612e838273ffffffffffffffffffffffffffffffffffffffff166105e3565b612ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb990614987565b60405180910390fd5b5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051612eea91906149d8565b600060405180830381855af49150503d8060008114612f25576040519150601f19603f3d011682016040523d82523d6000602084013e612f2a565b606091505b5050905080612f3d573d6000803e3d6000fd5b505b5050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600082825260208201905092915050565b7f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000612fe0602683612f73565b9150612feb82612f84565b604082019050919050565b6000602082019050818103600083015261300f81612fd3565b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61305f8161302a565b811461306a57600080fd5b50565b60008135905061307c81613056565b92915050565b60006020828403121561309857613097613020565b5b60006130a68482850161306d565b91505092915050565b60008115159050919050565b6130c4816130af565b82525050565b60006020820190506130df60008301846130bb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261310a576131096130e5565b5b8235905067ffffffffffffffff811115613127576131266130ea565b5b602083019150836020820283011115613143576131426130ef565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131758261314a565b9050919050565b6131858161316a565b811461319057600080fd5b50565b6000813590506131a28161317c565b92915050565b60008083601f8401126131be576131bd6130e5565b5b8235905067ffffffffffffffff8111156131db576131da6130ea565b5b6020830191508360018202830111156131f7576131f66130ef565b5b9250929050565b60008060008060006060868803121561321a57613219613020565b5b600086013567ffffffffffffffff81111561323857613237613025565b5b613244888289016130f4565b9550955050602061325788828901613193565b935050604086013567ffffffffffffffff81111561327857613277613025565b5b613284888289016131a8565b92509250509295509295909350565b61329c8161316a565b82525050565b60006020820190506132b76000830184613293565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6132f28161316a565b82525050565b600061330483836132e9565b60208301905092915050565b6000602082019050919050565b6000613328826132bd565b61333281856132c8565b935061333d836132d9565b8060005b8381101561336e57815161335588826132f8565b975061336083613310565b925050600181019050613341565b5085935050505092915050565b60006020820190508181036000830152613395818461331d565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6133fe8161302a565b82525050565b600061341083836133f5565b60208301905092915050565b6000602082019050919050565b6000613434826133c9565b61343e81856133d4565b9350613449836133e5565b8060005b8381101561347a5781516134618882613404565b975061346c8361341c565b92505060018101905061344d565b5085935050505092915050565b600060408301600083015161349f60008601826132e9565b50602083015184820360208601526134b78282613429565b9150508091505092915050565b60006134d08383613487565b905092915050565b6000602082019050919050565b60006134f08261339d565b6134fa81856133a8565b93508360208202850161350c856133b9565b8060005b85811015613548578484038952815161352985826134c4565b9450613534836134d8565b925060208a01995050600181019050613510565b50829750879550505050505092915050565b6000602082019050818103600083015261357481846134e5565b905092915050565b613585816130af565b811461359057600080fd5b50565b6000813590506135a28161357c565b92915050565b600080604083850312156135bf576135be613020565b5b60006135cd8582860161306d565b92505060206135de85828601613593565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613636826135ed565b810181811067ffffffffffffffff82111715613655576136546135fe565b5b80604052505050565b6000613668613016565b9050613674828261362d565b919050565b600080fd5b600067ffffffffffffffff821115613699576136986135fe565b5b602082029050602081019050919050565b60006136bd6136b88461367e565b61365e565b905080838252602082019050602084028301858111156136e0576136df6130ef565b5b835b8181101561370957806136f5888261306d565b8452602084019350506020810190506136e2565b5050509392505050565b600082601f830112613728576137276130e5565b5b81356137388482602086016136aa565b91505092915050565b600080fd5b600067ffffffffffffffff821115613761576137606135fe565b5b61376a826135ed565b9050602081019050919050565b82818337600083830152505050565b600061379961379484613746565b61365e565b9050828152602081018484840111156137b5576137b4613741565b5b6137c0848285613777565b509392505050565b600082601f8301126137dd576137dc6130e5565b5b81356137ed848260208601613786565b91505092915050565b60006080828403121561380c5761380b6135e8565b5b613816608061365e565b9050600061382684828501613193565b600083015250602082013567ffffffffffffffff81111561384a57613849613679565b5b61385684828501613713565b602083015250604061386a84828501613193565b604083015250606082013567ffffffffffffffff81111561388e5761388d613679565b5b61389a848285016137c8565b60608301525092915050565b6000602082840312156138bc576138bb613020565b5b600082013567ffffffffffffffff8111156138da576138d9613025565b5b6138e6848285016137f6565b91505092915050565b60006020828403121561390557613904613020565b5b600061391384828501613193565b91505092915050565b600082825260208201905092915050565b6000613938826133c9565b613942818561391c565b935061394d836133e5565b8060005b8381101561397e5781516139658882613404565b97506139708361341c565b925050600181019050613951565b5085935050505092915050565b600060208201905081810360008301526139a5818461392d565b905092915050565b600080fd5b6000608082840312156139c8576139c76139ad565b5b81905092915050565b6000602082840312156139e7576139e6613020565b5b600082013567ffffffffffffffff811115613a0557613a04613025565b5b613a11848285016139b2565b91505092915050565b7f4469616d6f6e64426173653a206e6f20666163657420666f756e6420666f722060008201527f66756e6374696f6e207369676e61747572650000000000000000000000000000602082015250565b6000613a76603283612f73565b9150613a8182613a1a565b604082019050919050565b60006020820190508181036000830152613aa581613a69565b9050919050565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b6000613ae2601d83612f73565b9150613aed82613aac565b602082019050919050565b60006020820190508181036000830152613b1181613ad5565b9050919050565b600067ffffffffffffffff821115613b3357613b326135fe565b5b602082029050602081019050919050565b60038110613b5157600080fd5b50565b600081359050613b6381613b44565b92915050565b600060608284031215613b7f57613b7e6135e8565b5b613b89606061365e565b90506000613b9984828501613193565b6000830152506020613bad84828501613b54565b602083015250604082013567ffffffffffffffff811115613bd157613bd0613679565b5b613bdd84828501613713565b60408301525092915050565b6000613bfc613bf784613b18565b61365e565b90508083825260208201905060208402830185811115613c1f57613c1e6130ef565b5b835b81811015613c6657803567ffffffffffffffff811115613c4457613c436130e5565b5b808601613c518982613b69565b85526020850194505050602081019050613c21565b5050509392505050565b6000613c7d368484613be9565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000613cc982613cb4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613cfc57613cfb613c85565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f536166654f776e61626c653a2073656e646572206d757374206265206e6f6d6960008201527f6e6565206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613d92602983612f73565b9150613d9d82613d36565b604082019050919050565b60006020820190508181036000830152613dc181613d85565b9050919050565b600060ff82169050919050565b6000613de082613dc8565b915060ff821415613df457613df3613c85565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613e39578082015181840152602081019050613e1e565b83811115613e48576000848401525b50505050565b6000613e5982613dff565b613e638185613e0a565b9350613e73818560208601613e1b565b613e7c816135ed565b840191505092915050565b6000608083016000830151613e9f60008601826132e9565b5060208301518482036020860152613eb78282613429565b9150506040830151613ecc60408601826132e9565b5060608301518482036060860152613ee48282613e4e565b9150508091505092915050565b60006020820190508181036000830152613f0b8184613e87565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613f6f602e83612f73565b9150613f7a82613f13565b604082019050919050565b60006020820190508181036000830152613f9e81613f62565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613fd157613fd0613fa5565b5b80840192508235915067ffffffffffffffff821115613ff357613ff2613faa565b5b60208301925060018202360383131561400f5761400e613faf565b5b509250929050565b600081905092915050565b600061402e8385614017565b935061403b838584613777565b82840190509392505050565b6000614054828486614022565b91508190509392505050565b600081519050919050565b600061407682614060565b6140808185612f73565b9350614090818560208601613e1b565b614099816135ed565b840191505092915050565b600060208201905081810360008301526140be818461406b565b905092915050565b600080833560016020038436030381126140e3576140e2613fa5565b5b80840192508235915067ffffffffffffffff82111561410557614104613faa565b5b60208301925060208202360383131561412157614120613faf565b5b509250929050565b7f4469616d6f6e64426173653a206e6f2073656c6563746f72732073706563696660008201527f6965640000000000000000000000000000000000000000000000000000000000602082015250565b6000614185602383612f73565b915061419082614129565b604082019050919050565b600060208201905081810360008301526141b481614178565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60038110614227576142266141bb565b5b50565b600081905061423882614216565b919050565b60006142488261422a565b9050919050565b6142588161423d565b82525050565b600060608301600083015161427660008601826132e9565b506020830151614289602086018261424f565b50604083015184820360408601526142a18282613429565b9150508091505092915050565b60006142ba838361425e565b905092915050565b6000602082019050919050565b60006142da826141ea565b6142e481856141f5565b9350836020820285016142f685614206565b8060005b85811015614332578484038952815161431385826142ae565b945061431e836142c2565b925060208a019950506001810190506142fa565b50829750879550505050505092915050565b600082825260208201905092915050565b600061436082613dff565b61436a8185614344565b935061437a818560208601613e1b565b614383816135ed565b840191505092915050565b600060608201905081810360008301526143a881866142cf565b90506143b76020830185613293565b81810360408301526143c98184614355565b9050949350505050565b7f4552433136353a20696e76616c696420696e7465726661636520696400000000600082015250565b6000614409601c83612f73565b9150614414826143d3565b602082019050919050565b60006020820190508181036000830152614438816143fc565b9050919050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b6000614475601683612f73565b91506144808261443f565b602082019050919050565b600060208201905081810360008301526144a481614468565b9050919050565b7f4469616d6f6e64426173653a204144442074617267657420686173206e6f206360008201527f6f64650000000000000000000000000000000000000000000000000000000000602082015250565b6000614507602383612f73565b9150614512826144ab565b604082019050919050565b60006020820190508181036000830152614536816144fa565b9050919050565b7f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460008201527f6465640000000000000000000000000000000000000000000000000000000000602082015250565b6000614599602383612f73565b91506145a48261453d565b604082019050919050565b600060208201905081810360008301526145c88161458c565b9050919050565b7f4469616d6f6e64426173653a205245504c41434520746172676574206861732060008201527f6e6f20636f646500000000000000000000000000000000000000000000000000602082015250565b600061462b602783612f73565b9150614636826145cf565b604082019050919050565b6000602082019050818103600083015261465a8161461e565b9050919050565b7f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e6400600082015250565b6000614697601f83612f73565b91506146a282614661565b602082019050919050565b600060208201905081810360008301526146c68161468a565b9050919050565b7f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d7574616260008201527f6c65000000000000000000000000000000000000000000000000000000000000602082015250565b6000614729602283612f73565b9150614734826146cd565b604082019050919050565b600060208201905081810360008301526147588161471c565b9050919050565b7f4469616d6f6e64426173653a205245504c41434520746172676574206973206960008201527f64656e746963616c000000000000000000000000000000000000000000000000602082015250565b60006147bb602883612f73565b91506147c68261475f565b604082019050919050565b600060208201905081810360008301526147ea816147ae565b9050919050565b7f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060008201527f6265207a65726f20616464726573730000000000000000000000000000000000602082015250565b600061484d602f83612f73565b9150614858826147f1565b604082019050919050565b6000602082019050818103600083015261487c81614840565b9050919050565b7f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460008201527f696f6e20706172616d6574657273000000000000000000000000000000000000602082015250565b60006148df602e83612f73565b91506148ea82614883565b604082019050919050565b6000602082019050818103600083015261490e816148d2565b9050919050565b7f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760008201527f657420686173206e6f20636f6465000000000000000000000000000000000000602082015250565b6000614971602e83612f73565b915061497c82614915565b604082019050919050565b600060208201905081810360008301526149a081614964565b9050919050565b60006149b282613dff565b6149bc8185614017565b93506149cc818560208601613e1b565b80840191505092915050565b60006149e482846149a7565b91508190509291505056fea2646970667358221220940ea7f99150516592605370a5d28a04b7eb4d82f6a43a260a07d052b9424d0164736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "data": "optional initialization call data",
          "facetCuts": "array of structured Diamond facet update data",
          "target": "optional recipient of initialization delegatecall"
        }
      },
      "facetAddress(bytes4)": {
        "params": {
          "selector": "function selector to query"
        },
        "returns": {
          "facet": "facet address (zero address if not found)"
        }
      },
      "facetAddresses()": {
        "returns": {
          "addresses": "array of facet addresses"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "facet": "address of facet to query"
        },
        "returns": {
          "selectors": "array of function selectors"
        }
      },
      "facets()": {
        "returns": {
          "diamondFacets": "array of structured facet data"
        }
      },
      "owner()": {
        "returns": {
          "_0": "conract owner"
        }
      },
      "pause()": {
        "details": "pause the contract"
      },
      "paused()": {
        "details": "Should return if the contract is paused"
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "transferOwnership(address)": {
        "details": "ownership transfer must be accepted by beneficiary before transfer is complete",
        "params": {
          "account": "address of new owner"
        }
      },
      "unpause()": {
        "details": "unpause the contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "accept transfer of contract ownership"
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "update functions callable on Diamond proxy"
      },
      "facetAddress(bytes4)": {
        "notice": "get the address of the facet associated with given selector"
      },
      "facetAddresses()": {
        "notice": "get addresses of all facets used by diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "get all selectors for given facet address"
      },
      "facets()": {
        "notice": "get all facets and their selectors"
      },
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}