{
  "address": "0x5D42ED13Ae28e56a5e6C91cC8Cc7424F63CE24fE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "priceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenCost",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd02a38990617c7e6a701c8b830a3bd355b2b13655634d69fcaf563094b1e7f4",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0x5D42ED13Ae28e56a5e6C91cC8Cc7424F63CE24fE",
    "transactionIndex": 10,
    "gasUsed": "807090",
    "logsBloom": "0x
    "blockHash": "0xe89d54712f35272ed8ef604230c795e7bafca2c41490812d8f983c2b7976ef0f",
    "transactionHash": "0xcd02a38990617c7e6a701c8b830a3bd355b2b13655634d69fcaf563094b1e7f4",
    "logs": [],
    "blockNumber": 16968585,
    "cumulativeGasUsed": "2685463",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e9a72363d7129de323877828de5d2608",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"priceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agent/lib/PricingLinearDecay.sol\":\"PricingLinearDecay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"contracts/agent/interfaces/IPricingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IPricingStrategy {\\n    function set(\\n        address owner,\\n        uint minPrice,\\n        bytes memory args\\n    ) external;\\n\\n    function priceOfBatch(\\n        address owner,\\n        uint[] memory ids\\n    ) external view returns(uint[] memory);\\n}\\n\",\"keccak256\":\"0x2696d00c9c0ec81bf9598ef710258afcb18fd832b69eb75c4590b85b3b859d42\",\"license\":\"MIT\"},\"contracts/agent/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport '../../nft/interfaces/IERC1155Rewardable.sol';\\n\\nstruct BillingStatement {\\n    uint balance;  // Today's total locked (not liquidated) NFT for today\\n    uint surplus;  // Today's surplus (mined target tokens - the part to payoff unpaid cost) in incomeToken\\n    uint debt;  // The debt in paymentToken if today's mined target tokens cannot pay off cost\\n}\\n\\nstruct AppStorage {\\n    uint tokenCost; // cost per nft in payment token\\n\\n    IERC1155Rewardable nft; // DeMineNFT contract address\\n    address incomeToken; // The target token to be mined (e.g. BTC)\\n    address paymentToken; // The type of token to pay off cost (e.g. USDT)\\n    address custodian; // payee account address, could be contract\\n    uint16 royaltyBps;  // royalty bps, 10000 based\\n    uint royaltyCap;  // max royalty value to accept\\n\\n    mapping(uint => mapping(address => uint)) balances;  // owner => buyer => allowance\\n\\n    // billing related\\n    mapping(uint256 => BillingStatement) statements; // Billing statement for each NFT token.\\n    AggregatorV3Interface chainlink;\\n    address swapRouter;\\n    uint16 earningTokenSaleDiscount10000Based; // 10000 based\\n    mapping(uint => uint) lockedUntil; // earning token sale\\n\\n    // primary market sale related\\n    // 0: unregistered, 1: pricing strategy, 2: allowance strategy\\n    mapping(address => uint8) strategyRegistry;\\n    mapping(address => mapping(uint8 => address)) strategies;\\n}\\n\\nabstract contract StorageBase {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0xfb623b2d342739a55e615ae77ed2c0ccb5c2202e21659ea57645172367c7b304\",\"license\":\"MIT\"},\"contracts/agent/lib/PricingLinearDecay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '../../shared/lib/Util.sol';\\nimport '../interfaces/IPricingStrategy.sol';\\nimport './AppStorage.sol';\\nimport './PricingLinearDecayStorage.sol';\\n\\ncontract PricingLinearDecay is IPricingStrategy {\\n    function set(\\n        address owner,\\n        uint tokenCost,\\n        bytes memory args\\n    ) external override {\\n        PricingLinearDecayStorage.Layout storage l\\n            = PricingLinearDecayStorage.layout();\\n        PricingLinearDecayStorage.LinearDecay memory ld = abi.decode(\\n            args, (PricingLinearDecayStorage.LinearDecay)\\n        );\\n        require(\\n            ld.minPrice >= tokenCost,\\n            'PricingLinearDecay: min price smaller token cost'\\n        );\\n        l.linearDecay[owner] = ld;\\n    }\\n\\n    function priceOfBatch(\\n        address owner,\\n        uint[] memory ids\\n    ) external override view returns(uint[] memory) {\\n        uint[] memory prices = new uint[](ids.length);\\n        PricingLinearDecayStorage.LinearDecay memory ld\\n            = PricingLinearDecayStorage.layout().linearDecay[owner];\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint128 end = uint128(ids[i]);\\n            uint128 start = uint128(ids[i] >> 128);\\n            uint128 middle = (end + start) / 2;\\n            if (middle < ld.anchor) {\\n                prices[i] = ld.maxPrice;\\n            } else {\\n                uint price = ld.maxPrice - (\\n                    middle - ld.anchor\\n                ) * ld.slope / ld.slopeBase;\\n                prices[i] = Util.max2(price, ld.minPrice);\\n            }\\n        }\\n        return prices;\\n    }\\n}\\n\",\"keccak256\":\"0xb5ba027c5f0da6c2fb4205391cd10ff03ea4478c6d3881516961da161b1b4ee9\",\"license\":\"MIT\"},\"contracts/agent/lib/PricingLinearDecayStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nlibrary PricingLinearDecayStorage {\\n    struct LinearDecay {\\n        uint maxPrice;\\n        uint minPrice;\\n        uint128 anchor;\\n        uint64 slope;\\n        uint64 slopeBase;\\n    }\\n\\n    struct Layout {\\n        mapping(address => LinearDecay) linearDecay;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('mining3.agent.contracts.storage.PricingLinearDecay');\\n\\n    function layout() internal pure returns(Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcb334d3829e9266da6f79c3ad235f56d2779329551a5e9ca62bcd04a5bceda1b\",\"license\":\"MIT\"},\"contracts/nft/interfaces/IERC1155Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IERC1155Rewardable is IERC1155 {\\n    function custodian() external view returns(address);\\n\\n    function earningToken() external view returns(address);\\n}\\n\",\"keccak256\":\"0xac6ed88e2b851fcbc70ca389bbe6c6db551b619fe70375995fe7f11d69d69b47\",\"license\":\"MIT\"},\"contracts/shared/lib/Util.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nlibrary Util {\\n    function ceil(uint a, uint m) internal pure returns(uint) {\\n        return ((a + m - 1) / m) * m;\\n    }\\n\\n    function max3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a > b ? max2(a, c) : max2(b, c);\\n    }\\n\\n    function max2(uint a, uint b) internal pure returns(uint) {\\n        return a > b ? a : b;\\n    }\\n\\n    function uint128max2(uint128 a, uint128 b) internal pure returns(uint128) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min2(uint a, uint b) internal pure returns(uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function uint128min2(uint128 a, uint128 b) internal pure returns(uint128) {\\n        return a < b ? a : b;\\n    }\\n\\n    function min3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a < b ? min2(a, c) : min2(b, c);\\n    }\\n}\\n\",\"keccak256\":\"0x193a469ef579e7ab002bdef2c4327accb3ee2293d252809ce2f478af143a7156\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610dad806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634bbaaced1461003b5780635973921b1461006b575b600080fd5b6100556004803603810190610050919061071a565b610087565b6040516100629190610834565b60405180910390f35b6100856004803603810190610080919061090b565b61036b565b005b60606000825167ffffffffffffffff8111156100a6576100a56105a1565b5b6040519080825280602002602001820160405280156100d45781602001602082028036833780820191505090505b50905060006100e16104d3565b60000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905060005b845181101561035f5760008582815181106102115761021061097a565b5b60200260200101519050600060808784815181106102325761023161097a565b5b6020026020010151901c905060006002828461024e91906109f4565b6102589190610a69565b905084604001516fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610156102b35784600001518685815181106102a2576102a161097a565b5b602002602001018181525050610349565b6000856080015167ffffffffffffffff16866060015167ffffffffffffffff168760400151846102e39190610a9a565b6102ed9190610ace565b6102f79190610a69565b6fffffffffffffffffffffffffffffffff1686600001516103189190610b18565b9050610328818760200151610500565b87868151811061033b5761033a61097a565b5b602002602001018181525050505b505050808061035790610b4c565b9150506101f3565b50819250505092915050565b60006103756104d3565b905060008280602001905181019061038d9190610ca7565b905083816020015110156103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90610d57565b60405180910390fd5b808260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050505050505050565b6000807f574d010caaf693f957f1a3300ec7bf13f740c82d91d6967c3d41372429656a1990508091505090565b600081831161050f5781610511565b825b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105588261052d565b9050919050565b6105688161054d565b811461057357600080fd5b50565b6000813590506105858161055f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105d982610590565b810181811067ffffffffffffffff821117156105f8576105f76105a1565b5b80604052505050565b600061060b610519565b905061061782826105d0565b919050565b600067ffffffffffffffff821115610637576106366105a1565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6106608161064d565b811461066b57600080fd5b50565b60008135905061067d81610657565b92915050565b60006106966106918461061c565b610601565b905080838252602082019050602084028301858111156106b9576106b8610648565b5b835b818110156106e257806106ce888261066e565b8452602084019350506020810190506106bb565b5050509392505050565b600082601f8301126107015761070061058b565b5b8135610711848260208601610683565b91505092915050565b6000806040838503121561073157610730610523565b5b600061073f85828601610576565b925050602083013567ffffffffffffffff8111156107605761075f610528565b5b61076c858286016106ec565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107ab8161064d565b82525050565b60006107bd83836107a2565b60208301905092915050565b6000602082019050919050565b60006107e182610776565b6107eb8185610781565b93506107f683610792565b8060005b8381101561082757815161080e88826107b1565b9750610819836107c9565b9250506001810190506107fa565b5085935050505092915050565b6000602082019050818103600083015261084e81846107d6565b905092915050565b600080fd5b600067ffffffffffffffff821115610876576108756105a1565b5b61087f82610590565b9050602081019050919050565b82818337600083830152505050565b60006108ae6108a98461085b565b610601565b9050828152602081018484840111156108ca576108c9610856565b5b6108d584828561088c565b509392505050565b600082601f8301126108f2576108f161058b565b5b813561090284826020860161089b565b91505092915050565b60008060006060848603121561092457610923610523565b5b600061093286828701610576565b93505060206109438682870161066e565b925050604084013567ffffffffffffffff81111561096457610963610528565b5b610970868287016108dd565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006fffffffffffffffffffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109ff826109a9565b9150610a0a836109a9565b9250826fffffffffffffffffffffffffffffffff03821115610a2f57610a2e6109c5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a74826109a9565b9150610a7f836109a9565b925082610a8f57610a8e610a3a565b5b828204905092915050565b6000610aa5826109a9565b9150610ab0836109a9565b925082821015610ac357610ac26109c5565b5b828203905092915050565b6000610ad9826109a9565b9150610ae4836109a9565b9250816fffffffffffffffffffffffffffffffff0483118215151615610b0d57610b0c6109c5565b5b828202905092915050565b6000610b238261064d565b9150610b2e8361064d565b925082821015610b4157610b406109c5565b5b828203905092915050565b6000610b578261064d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b8a57610b896109c5565b5b600182019050919050565b600080fd5b600081519050610ba981610657565b92915050565b610bb8816109a9565b8114610bc357600080fd5b50565b600081519050610bd581610baf565b92915050565b600067ffffffffffffffff82169050919050565b610bf881610bdb565b8114610c0357600080fd5b50565b600081519050610c1581610bef565b92915050565b600060a08284031215610c3157610c30610b95565b5b610c3b60a0610601565b90506000610c4b84828501610b9a565b6000830152506020610c5f84828501610b9a565b6020830152506040610c7384828501610bc6565b6040830152506060610c8784828501610c06565b6060830152506080610c9b84828501610c06565b60808301525092915050565b600060a08284031215610cbd57610cbc610523565b5b6000610ccb84828501610c1b565b91505092915050565b600082825260208201905092915050565b7f50726963696e674c696e65617244656361793a206d696e20707269636520736d60008201527f616c6c657220746f6b656e20636f737400000000000000000000000000000000602082015250565b6000610d41603083610cd4565b9150610d4c82610ce5565b604082019050919050565b60006020820190508181036000830152610d7081610d34565b905091905056fea2646970667358221220bba311f19dd7555cdf41a3aac9bf728aad6929310e4a1a44871ac1b0e2a72b3064736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634bbaaced1461003b5780635973921b1461006b575b600080fd5b6100556004803603810190610050919061071a565b610087565b6040516100629190610834565b60405180910390f35b6100856004803603810190610080919061090b565b61036b565b005b60606000825167ffffffffffffffff8111156100a6576100a56105a1565b5b6040519080825280602002602001820160405280156100d45781602001602082028036833780820191505090505b50905060006100e16104d3565b60000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905060005b845181101561035f5760008582815181106102115761021061097a565b5b60200260200101519050600060808784815181106102325761023161097a565b5b6020026020010151901c905060006002828461024e91906109f4565b6102589190610a69565b905084604001516fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff1610156102b35784600001518685815181106102a2576102a161097a565b5b602002602001018181525050610349565b6000856080015167ffffffffffffffff16866060015167ffffffffffffffff168760400151846102e39190610a9a565b6102ed9190610ace565b6102f79190610a69565b6fffffffffffffffffffffffffffffffff1686600001516103189190610b18565b9050610328818760200151610500565b87868151811061033b5761033a61097a565b5b602002602001018181525050505b505050808061035790610b4c565b9150506101f3565b50819250505092915050565b60006103756104d3565b905060008280602001905181019061038d9190610ca7565b905083816020015110156103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd90610d57565b60405180910390fd5b808260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050505050505050565b6000807f574d010caaf693f957f1a3300ec7bf13f740c82d91d6967c3d41372429656a1990508091505090565b600081831161050f5781610511565b825b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105588261052d565b9050919050565b6105688161054d565b811461057357600080fd5b50565b6000813590506105858161055f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105d982610590565b810181811067ffffffffffffffff821117156105f8576105f76105a1565b5b80604052505050565b600061060b610519565b905061061782826105d0565b919050565b600067ffffffffffffffff821115610637576106366105a1565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6106608161064d565b811461066b57600080fd5b50565b60008135905061067d81610657565b92915050565b60006106966106918461061c565b610601565b905080838252602082019050602084028301858111156106b9576106b8610648565b5b835b818110156106e257806106ce888261066e565b8452602084019350506020810190506106bb565b5050509392505050565b600082601f8301126107015761070061058b565b5b8135610711848260208601610683565b91505092915050565b6000806040838503121561073157610730610523565b5b600061073f85828601610576565b925050602083013567ffffffffffffffff8111156107605761075f610528565b5b61076c858286016106ec565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107ab8161064d565b82525050565b60006107bd83836107a2565b60208301905092915050565b6000602082019050919050565b60006107e182610776565b6107eb8185610781565b93506107f683610792565b8060005b8381101561082757815161080e88826107b1565b9750610819836107c9565b9250506001810190506107fa565b5085935050505092915050565b6000602082019050818103600083015261084e81846107d6565b905092915050565b600080fd5b600067ffffffffffffffff821115610876576108756105a1565b5b61087f82610590565b9050602081019050919050565b82818337600083830152505050565b60006108ae6108a98461085b565b610601565b9050828152602081018484840111156108ca576108c9610856565b5b6108d584828561088c565b509392505050565b600082601f8301126108f2576108f161058b565b5b813561090284826020860161089b565b91505092915050565b60008060006060848603121561092457610923610523565b5b600061093286828701610576565b93505060206109438682870161066e565b925050604084013567ffffffffffffffff81111561096457610963610528565b5b610970868287016108dd565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006fffffffffffffffffffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109ff826109a9565b9150610a0a836109a9565b9250826fffffffffffffffffffffffffffffffff03821115610a2f57610a2e6109c5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a74826109a9565b9150610a7f836109a9565b925082610a8f57610a8e610a3a565b5b828204905092915050565b6000610aa5826109a9565b9150610ab0836109a9565b925082821015610ac357610ac26109c5565b5b828203905092915050565b6000610ad9826109a9565b9150610ae4836109a9565b9250816fffffffffffffffffffffffffffffffff0483118215151615610b0d57610b0c6109c5565b5b828202905092915050565b6000610b238261064d565b9150610b2e8361064d565b925082821015610b4157610b406109c5565b5b828203905092915050565b6000610b578261064d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b8a57610b896109c5565b5b600182019050919050565b600080fd5b600081519050610ba981610657565b92915050565b610bb8816109a9565b8114610bc357600080fd5b50565b600081519050610bd581610baf565b92915050565b600067ffffffffffffffff82169050919050565b610bf881610bdb565b8114610c0357600080fd5b50565b600081519050610c1581610bef565b92915050565b600060a08284031215610c3157610c30610b95565b5b610c3b60a0610601565b90506000610c4b84828501610b9a565b6000830152506020610c5f84828501610b9a565b6020830152506040610c7384828501610bc6565b6040830152506060610c8784828501610c06565b6060830152506080610c9b84828501610c06565b60808301525092915050565b600060a08284031215610cbd57610cbc610523565b5b6000610ccb84828501610c1b565b91505092915050565b600082825260208201905092915050565b7f50726963696e674c696e65617244656361793a206d696e20707269636520736d60008201527f616c6c657220746f6b656e20636f737400000000000000000000000000000000602082015250565b6000610d41603083610cd4565b9150610d4c82610ce5565b604082019050919050565b60006020820190508181036000830152610d7081610d34565b905091905056fea2646970667358221220bba311f19dd7555cdf41a3aac9bf728aad6929310e4a1a44871ac1b0e2a72b3064736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}