{
  "address": "0xD7317C2CbB1d189bD0B328bE4982810346292697",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "custodian",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "custody",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x725420d36d8d3255d060370c66fea001e5240b30582c35fd96030b2e4e251f6f",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0xD7317C2CbB1d189bD0B328bE4982810346292697",
    "transactionIndex": 2,
    "gasUsed": "680936",
    "logsBloom": "0x00000000000000000000000100000000000000000002000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000001000000000000000000000000000000000080020000000000000000000800000000000000400000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000100000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9188125022c80cbe005e2b220b2072564d9abfde632bd60f5d30e2b09436929b",
    "transactionHash": "0x725420d36d8d3255d060370c66fea001e5240b30582c35fd96030b2e4e251f6f",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 16507466,
        "transactionHash": "0x725420d36d8d3255d060370c66fea001e5240b30582c35fd96030b2e4e251f6f",
        "address": "0xD7317C2CbB1d189bD0B328bE4982810346292697",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000633da015e60f63b7de56817e9680d532aaa20016"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x9188125022c80cbe005e2b220b2072564d9abfde632bd60f5d30e2b09436929b"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 16507466,
        "transactionHash": "0x725420d36d8d3255d060370c66fea001e5240b30582c35fd96030b2e4e251f6f",
        "address": "0xD7317C2CbB1d189bD0B328bE4982810346292697",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000633da015e60f63b7de56817e9680d532aaa20016",
          "0x000000000000000000000000ef2e3f91209f88a3143e36be10d52502162426b3"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x9188125022c80cbe005e2b220b2072564d9abfde632bd60f5d30e2b09436929b"
      }
    ],
    "blockNumber": 16507466,
    "cumulativeGasUsed": "1192662",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEF2e3F91209F88A3143e36Be10D52502162426B3"
  ],
  "numDeployments": 1,
  "solcInputHash": "0d5f957cb2faa93138fa900adfef4ccc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"custody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/CustodianProxy.sol\":\"CustodianProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x5ac1ad9eade408466527ea9ba45a0d3cefd40c15800a203b250214f4bfa8ca92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\n\",\"keccak256\":\"0x4d14828f2aa2b68158d28717633b640d0e39dea797def3969b08a9b4ca0c7569\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf920acc579a6c2067ca587b8d3993f6e737ac54f2dc3c4cd179d8df0e3f351d9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaca482b8f27dbab77b82282987d50a280c65f6254f3cac64e68ccd61f55e4822\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/nft/CustodianProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CustodianProxy is IERC1155Receiver, Ownable {\\n    constructor(address custodian) {\\n        transferOwnership(custodian);\\n    }\\n\\n    function custody(address nft) onlyOwner external {\\n        IERC1155(nft).setApprovalForAll(owner(), true);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public virtual override view returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x7aeceaf380a44dd2ac15cb5481c702cca684f7ce1f7d4fc77b553d4973612e2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000ed138038062000ed1833981810160405281019062000037919062000291565b620000576200004b6200006f60201b60201c565b6200007760201b60201c565b62000068816200013b60201b60201c565b5062000426565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200014b6200006f60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001716200025160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c1906200032d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000234906200030b565b60405180910390fd5b6200024e816200007760201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000815190506200028b816200040c565b92915050565b600060208284031215620002a457600080fd5b6000620002b4848285016200027a565b91505092915050565b6000620002cc6026836200034f565b9150620002d98262000394565b604082019050919050565b6000620002f36020836200034f565b91506200030082620003e3565b602082019050919050565b600060208201905081810360008301526200032681620002bd565b9050919050565b600060208201905081810360008301526200034881620002e4565b9050919050565b600082825260208201905092915050565b60006200036d8262000374565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b620004178162000360565b81146200042357600080fd5b50565b610a9b80620004366000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bc197c811161005b578063bc197c81146100da578063e41e91ef1461010a578063f23a6e6114610126578063f2fde38b146101565761007d565b806301ffc9a714610082578063715018a6146100b25780638da5cb5b146100bc575b600080fd5b61009c600480360381019061009791906107cd565b610172565b6040516100a991906108ad565b60405180910390f35b6100ba6101dc565b005b6100c4610264565b6040516100d19190610869565b60405180910390f35b6100f460048036038101906100ef919061066f565b61028d565b60405161010191906108c8565b60405180910390f35b610124600480360381019061011f9190610646565b6102a5565b005b610140600480360381019061013b919061073b565b610399565b60405161014d91906108c8565b60405180910390f35b610170600480360381019061016b9190610646565b6103af565b005b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6101e46104a7565b73ffffffffffffffffffffffffffffffffffffffff16610202610264565b73ffffffffffffffffffffffffffffffffffffffff1614610258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024f90610903565b60405180910390fd5b61026260006104af565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600063bc197c8160e01b905098975050505050505050565b6102ad6104a7565b73ffffffffffffffffffffffffffffffffffffffff166102cb610264565b73ffffffffffffffffffffffffffffffffffffffff1614610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031890610903565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a22cb465610345610264565b60016040518363ffffffff1660e01b8152600401610364929190610884565b600060405180830381600087803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b5050505050565b600063f23a6e6160e01b90509695505050505050565b6103b76104a7565b73ffffffffffffffffffffffffffffffffffffffff166103d5610264565b73ffffffffffffffffffffffffffffffffffffffff161461042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290610903565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561049b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610492906108e3565b60405180910390fd5b6104a4816104af565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061058281610a20565b92915050565b60008083601f84011261059a57600080fd5b8235905067ffffffffffffffff8111156105b357600080fd5b6020830191508360208202830111156105cb57600080fd5b9250929050565b6000813590506105e181610a37565b92915050565b60008083601f8401126105f957600080fd5b8235905067ffffffffffffffff81111561061257600080fd5b60208301915083600182028301111561062a57600080fd5b9250929050565b60008135905061064081610a4e565b92915050565b60006020828403121561065857600080fd5b600061066684828501610573565b91505092915050565b60008060008060008060008060a0898b03121561068b57600080fd5b60006106998b828c01610573565b98505060206106aa8b828c01610573565b975050604089013567ffffffffffffffff8111156106c757600080fd5b6106d38b828c01610588565b9650965050606089013567ffffffffffffffff8111156106f257600080fd5b6106fe8b828c01610588565b9450945050608089013567ffffffffffffffff81111561071d57600080fd5b6107298b828c016105e7565b92509250509295985092959890939650565b60008060008060008060a0878903121561075457600080fd5b600061076289828a01610573565b965050602061077389828a01610573565b955050604061078489828a01610631565b945050606061079589828a01610631565b935050608087013567ffffffffffffffff8111156107b257600080fd5b6107be89828a016105e7565b92509250509295509295509295565b6000602082840312156107df57600080fd5b60006107ed848285016105d2565b91505092915050565b6107ff81610934565b82525050565b61080e81610946565b82525050565b61081d81610952565b82525050565b6000610830602683610923565b915061083b826109a8565b604082019050919050565b6000610853602083610923565b915061085e826109f7565b602082019050919050565b600060208201905061087e60008301846107f6565b92915050565b600060408201905061089960008301856107f6565b6108a66020830184610805565b9392505050565b60006020820190506108c26000830184610805565b92915050565b60006020820190506108dd6000830184610814565b92915050565b600060208201905081810360008301526108fc81610823565b9050919050565b6000602082019050818103600083015261091c81610846565b9050919050565b600082825260208201905092915050565b600061093f8261097e565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610a2981610934565b8114610a3457600080fd5b50565b610a4081610952565b8114610a4b57600080fd5b50565b610a578161099e565b8114610a6257600080fd5b5056fea26469706673582212201471ca57c7ff650fd65cc17bb06e1bd745ab6885d81d659825f8c402fd15de6e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bc197c811161005b578063bc197c81146100da578063e41e91ef1461010a578063f23a6e6114610126578063f2fde38b146101565761007d565b806301ffc9a714610082578063715018a6146100b25780638da5cb5b146100bc575b600080fd5b61009c600480360381019061009791906107cd565b610172565b6040516100a991906108ad565b60405180910390f35b6100ba6101dc565b005b6100c4610264565b6040516100d19190610869565b60405180910390f35b6100f460048036038101906100ef919061066f565b61028d565b60405161010191906108c8565b60405180910390f35b610124600480360381019061011f9190610646565b6102a5565b005b610140600480360381019061013b919061073b565b610399565b60405161014d91906108c8565b60405180910390f35b610170600480360381019061016b9190610646565b6103af565b005b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6101e46104a7565b73ffffffffffffffffffffffffffffffffffffffff16610202610264565b73ffffffffffffffffffffffffffffffffffffffff1614610258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024f90610903565b60405180910390fd5b61026260006104af565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600063bc197c8160e01b905098975050505050505050565b6102ad6104a7565b73ffffffffffffffffffffffffffffffffffffffff166102cb610264565b73ffffffffffffffffffffffffffffffffffffffff1614610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031890610903565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a22cb465610345610264565b60016040518363ffffffff1660e01b8152600401610364929190610884565b600060405180830381600087803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b5050505050565b600063f23a6e6160e01b90509695505050505050565b6103b76104a7565b73ffffffffffffffffffffffffffffffffffffffff166103d5610264565b73ffffffffffffffffffffffffffffffffffffffff161461042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290610903565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561049b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610492906108e3565b60405180910390fd5b6104a4816104af565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061058281610a20565b92915050565b60008083601f84011261059a57600080fd5b8235905067ffffffffffffffff8111156105b357600080fd5b6020830191508360208202830111156105cb57600080fd5b9250929050565b6000813590506105e181610a37565b92915050565b60008083601f8401126105f957600080fd5b8235905067ffffffffffffffff81111561061257600080fd5b60208301915083600182028301111561062a57600080fd5b9250929050565b60008135905061064081610a4e565b92915050565b60006020828403121561065857600080fd5b600061066684828501610573565b91505092915050565b60008060008060008060008060a0898b03121561068b57600080fd5b60006106998b828c01610573565b98505060206106aa8b828c01610573565b975050604089013567ffffffffffffffff8111156106c757600080fd5b6106d38b828c01610588565b9650965050606089013567ffffffffffffffff8111156106f257600080fd5b6106fe8b828c01610588565b9450945050608089013567ffffffffffffffff81111561071d57600080fd5b6107298b828c016105e7565b92509250509295985092959890939650565b60008060008060008060a0878903121561075457600080fd5b600061076289828a01610573565b965050602061077389828a01610573565b955050604061078489828a01610631565b945050606061079589828a01610631565b935050608087013567ffffffffffffffff8111156107b257600080fd5b6107be89828a016105e7565b92509250509295509295509295565b6000602082840312156107df57600080fd5b60006107ed848285016105d2565b91505092915050565b6107ff81610934565b82525050565b61080e81610946565b82525050565b61081d81610952565b82525050565b6000610830602683610923565b915061083b826109a8565b604082019050919050565b6000610853602083610923565b915061085e826109f7565b602082019050919050565b600060208201905061087e60008301846107f6565b92915050565b600060408201905061089960008301856107f6565b6108a66020830184610805565b9392505050565b60006020820190506108c26000830184610805565b92915050565b60006020820190506108dd6000830184610814565b92915050565b600060208201905081810360008301526108fc81610823565b9050919050565b6000602082019050818103600083015261091c81610846565b9050919050565b600082825260208201905092915050565b600061093f8261097e565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610a2981610934565b8114610a3457600080fd5b50565b610a4081610952565b8114610a4b57600080fd5b50565b610a578161099e565b8114610a6257600080fd5b5056fea26469706673582212201471ca57c7ff650fd65cc17bb06e1bd745ab6885d81d659825f8c402fd15de6e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/nft/CustodianProxy.sol:CustodianProxy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}