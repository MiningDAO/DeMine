{
  "address": "0xb3280BB2fF7Bf4F5a05f0A45921c473fE484988a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "billingStatementOfBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "surplus",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            }
          ],
          "internalType": "struct BillingStatement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "custodian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "custodianAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "costPerToken",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeemNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawAndPayoff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x495a3c6932e376b924cf979fbb303fe95bbd5c0cec5b1a8ad82b4e1e45ee1f8c",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0xb3280BB2fF7Bf4F5a05f0A45921c473fE484988a",
    "transactionIndex": 4,
    "gasUsed": "2220350",
    "logsBloom": "0x
    "blockHash": "0x37058dea1385c967a917b87d4b3ec681819ab3f87486facc79ce4dcdbf2229e5",
    "transactionHash": "0x495a3c6932e376b924cf979fbb303fe95bbd5c0cec5b1a8ad82b4e1e45ee1f8c",
    "logs": [],
    "blockNumber": 16971416,
    "cumulativeGasUsed": "2719861",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "7eb2b0fc510e8a394e64a23d0ea364e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"billingStatementOfBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"surplus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"internalType\":\"struct BillingStatement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"custodianAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"costPerToken\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeemNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAndPayoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shu Dong, Yijie Hong\",\"details\":\"the contract also implements IERC1155Receiver to receive and lock demine nft\",\"kind\":\"dev\",\"methods\":{\"redeemNFT(uint256[],uint256[])\":{\"params\":{\"amounts\":\"Amount of each demine nft token\",\"ids\":\"DeMine nft token ids to redeem\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}}},\"title\":\"MortgageFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"redeemNFT(uint256[],uint256[])\":{\"notice\":\"Pay token cost and liquidize tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"withdrawAndPayoff(uint256[])\":{\"notice\":\"Withdraw surplus or payoff debt for NFT tokens that have been billed.         All balances of ids need to be paid off or withdrawn. Partial payoff         or withdraw is not supported.\"}},\"notice\":\"Facet contract holding functions for miners to manage mortgage.Facet contract currently only supports weekly NFT token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agent/facets/MortgageFacet.sol\":\"MortgageFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x31fcdbc3c885a95d0449d9b5f20a7ef0cae2fa63bd82195995d05a7eecaa5f74\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"contracts/agent/facets/MortgageFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/introspection/ERC165.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol';\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport '../../shared/lib/Util.sol';\\nimport '../../shared/lib/LibPausable.sol';\\nimport '../lib/AppStorage.sol';\\nimport '../../shared/lib/LibInitializable.sol';\\n\\n/**\\n * @title MortgageFacet\\n * @author Shu Dong, Yijie Hong\\n * @notice Facet contract holding functions for miners to manage mortgage.\\n * @notice Facet contract currently only supports weekly NFT token.\\n * @dev the contract also implements IERC1155Receiver to receive and lock demine nft\\n */\\ncontract MortgageFacet is\\n    Initializable,\\n    PausableModifier,\\n    IERC1155Receiver,\\n    StorageBase,\\n    ERC165\\n{\\n    using SafeERC20 for IERC20;\\n\\n    function init(\\n        address nftAddr,\\n        address paymentTokenAddr,\\n        address custodianAddr,\\n        uint costPerToken\\n    ) external onlyInitializing {\\n        IERC1155Rewardable nftContract = IERC1155Rewardable(nftAddr);\\n        s.nft = nftContract;\\n        s.paymentToken = paymentTokenAddr;\\n        s.custodian = custodianAddr;\\n        s.tokenCost = costPerToken;\\n    }\\n\\n    /**\\n     * @notice Pay token cost and liquidize tokens\\n     * @param ids DeMine nft token ids to redeem\\n     * @param amounts Amount of each demine nft token\\n     */\\n    function redeemNFT(\\n        uint256[] calldata ids,\\n        uint[] calldata amounts\\n    ) external whenNotPaused {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"DeMineAgent: array length mismatch\\\"\\n        );\\n        uint costPerToken = s.tokenCost;\\n\\n        uint totalCost;\\n        for (uint i = 0; i < ids.length; i++) {\\n            totalCost += costPerToken * amounts[i] * daysInToken(ids[i]);\\n            uint balance = s.balances[ids[i]][msg.sender];\\n            require(balance > 0 && balance > amounts[i], 'DeMineAgent: no sufficient balance');\\n            s.balances[ids[i]][msg.sender] = balance - amounts[i];\\n        }\\n        if (totalCost > 0) {\\n            IERC20(s.paymentToken).safeTransferFrom(msg.sender, s.custodian, totalCost);\\n        }\\n        s.nft.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n\\n    function balanceOfBatch(\\n        address account,\\n        uint256[] calldata ids\\n    ) external view returns(uint[] memory) {\\n        uint[] memory balances = new uint[](ids.length);\\n        for (uint i = 0; i < ids.length; i++) {\\n            balances[i] = s.balances[ids[i]][account];\\n        }\\n        return balances;\\n    }\\n\\n    function billingStatementOfBatch(\\n        uint[] calldata tokenIds\\n    ) external view returns(BillingStatement[] memory) {\\n        BillingStatement[] memory res = new BillingStatement[](tokenIds.length);\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            res[i] = s.statements[tokenIds[i]];\\n        }\\n        return res;\\n    }\\n\\n    function nft() external view returns(address) {\\n        return address(s.nft);\\n    }\\n\\n    function custodian() external view returns(address) {\\n        return s.custodian;\\n    }\\n\\n    function paymentToken() external view returns(address) {\\n        return s.paymentToken;\\n    }\\n\\n    function tokenCost() external view returns(uint) {\\n        return s.tokenCost;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0; // reject\\n    }\\n\\n    // @dev the function should only be called by mint function of DeMineNFT\\n    // @param from Must be address(0)\\n    // @param data Must be encoded address of mortagager\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(\\n            from == s.nft.custodian(),\\n            'DeMineAgent: only tokens from custodian allowed'\\n        );\\n        (address mortgager) = abi.decode(data, (address));\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint balance = s.balances[ids[i]][mortgager] + amounts[i];\\n            s.balances[ids[i]][mortgager] = balance;\\n        }\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @notice Withdraw surplus or payoff debt for NFT tokens that have been billed.\\n     *         All balances of ids need to be paid off or withdrawn. Partial payoff\\n     *         or withdraw is not supported.\\n     */\\n    function withdrawAndPayoff(\\n        uint256[] calldata ids\\n    ) external whenNotPaused {\\n        uint income;\\n        uint debt;\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            BillingStatement memory st = s.statements[ids[i]];\\n            uint balance = s.balances[ids[i]][msg.sender];\\n            income += st.surplus * balance / st.balance;\\n            debt += st.debt * balance / st.balance;\\n            delete s.balances[ids[i]][msg.sender];\\n        }\\n\\n        if (debt > 0) {\\n            IERC20(s.paymentToken).safeTransferFrom(s.custodian, msg.sender, debt);\\n        }\\n        if (income > 0) {\\n            IERC20(s.nft.earningToken()).safeTransfer(msg.sender, income);\\n        }\\n    }\\n\\n    function tokenIdToStart(uint256 tokenId) private pure returns(uint128) {\\n        return uint128(tokenId >> 128);\\n    }\\n\\n    function tokenIdToEnd(uint256 tokenId) private pure returns(uint128) {\\n        return uint128(tokenId);\\n    }\\n\\n    function daysInToken(uint256 tokenId) private pure returns(uint) {\\n        return (tokenIdToEnd(tokenId) - tokenIdToStart(tokenId)) / 86400;\\n    }\\n\\n    function getTokenCost() external view returns(uint) {\\n        return s.tokenCost;\\n    }\\n}\\n\",\"keccak256\":\"0xe1364f109d59a8efb0f193322159b44275a393673caf14d032dd9b8003eb39d5\",\"license\":\"MIT\"},\"contracts/agent/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '../../nft/interfaces/IERC1155Rewardable.sol';\\n\\nstruct BillingStatement {\\n    uint balance;  // Today's total locked (not liquidated) NFT for today\\n    uint surplus;  // Today's surplus (mined target tokens - the part to payoff unpaid cost) in incomeToken\\n    uint debt;  // The debt in paymentToken if today's mined target tokens cannot pay off cost\\n}\\n\\nstruct AppStorage {\\n    uint tokenCost; // cost per nft in payment token\\n\\n    IERC1155Rewardable nft; // DeMineNFT contract address\\n    address paymentToken; // The type of token to pay off cost (e.g. USDT)\\n    address custodian; // payee account address, could be contract\\n    uint16 royaltyBps;  // royalty bps, 10000 based\\n    uint royaltyCap;  // max royalty value to accept\\n\\n    mapping(uint => mapping(address => uint)) balances;  // owner => buyer => allowance\\n\\n    // billing related\\n    mapping(uint256 => BillingStatement) statements; // Billing statement for each NFT token.\\n    address chainlink;\\n    address swapRouter;\\n    uint8 swapRouterVersion; // 2 or 3 supported\\n    uint16 earningTokenSaleDiscount10000Based; // 10000 based\\n\\n    // primary market sale related\\n    // 0: unregistered, 1: pricing strategy, 2: allowance strategy\\n    mapping(address => uint8) strategyRegistry;\\n    mapping(address => mapping(uint8 => address)) strategies;\\n}\\n\\nabstract contract StorageBase {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0xdc8d02880e411807cbe1d99fac40c4b5bc573be6fcf8bc16df13733fb6fd6a3e\",\"license\":\"MIT\"},\"contracts/nft/interfaces/IERC1155Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IERC1155Rewardable is IERC1155 {\\n    function custodian() external view returns(address);\\n\\n    function earningToken() external view returns(address);\\n}\\n\",\"keccak256\":\"0xac6ed88e2b851fcbc70ca389bbe6c6db551b619fe70375995fe7f11d69d69b47\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xb33768d5a13e8aa6c9c15a2988d677ec850db777536db6ab0c38f0f768f71569\",\"license\":\"MIT\"},\"contracts/shared/lib/LibInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/utils/AddressUtils.sol';\\n\\n/**\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary InitializableStorage {\\n    struct Layout {\\n        bool initialized;\\n        bool initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.contracts.storage.Initializable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    modifier initializer() {\\n        InitializableStorage.Layout storage l = InitializableStorage.layout();\\n        require(\\n            l.initializing ? isConstructor() : !l.initialized,\\n            'Initializable: contract is already initialized'\\n        );\\n        bool isTopLevelCall = !l.initializing;\\n        if (isTopLevelCall) {\\n            l.initializing = true;\\n            l.initialized = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            l.initializing = false;\\n        }\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(\\n            InitializableStorage.layout().initializing,\\n            'Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    function isConstructor() private view returns (bool) {\\n        return !AddressUtils.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9fad7cc55f61de87ce9768325bf94406261eaf42f198e1a69f3ead0dc56b656d\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x86af35526539727370e6cfcd7132918c2b8923052391f7a1816458066006979a\",\"license\":\"MIT\"},\"contracts/shared/lib/Util.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nlibrary Util {\\n    function ceil(uint a, uint m) internal pure returns(uint) {\\n        return ((a + m - 1) / m) * m;\\n    }\\n\\n    function max3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a > b ? max2(a, c) : max2(b, c);\\n    }\\n\\n    function max2(uint a, uint b) internal pure returns(uint) {\\n        return a > b ? a : b;\\n    }\\n\\n    function uint128max2(uint128 a, uint128 b) internal pure returns(uint128) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min2(uint a, uint b) internal pure returns(uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function uint128min2(uint128 a, uint128 b) internal pure returns(uint128) {\\n        return a < b ? a : b;\\n    }\\n\\n    function min3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a < b ? min2(a, c) : min2(b, c);\\n    }\\n}\\n\",\"keccak256\":\"0x193a469ef579e7ab002bdef2c4327accb3ee2293d252809ce2f478af143a7156\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612759806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063912221d51161008c578063bc197c8111610066578063bc197c8114610216578063e7da56cc14610246578063f057b6e514610262578063f23a6e611461027e576100cf565b8063912221d5146101985780639d362920146101b6578063afd69086146101e6576100cf565b806301ffc9a7146100d45780633013ce2914610104578063375b74c31461012257806346639dba1461014057806347ccca021461015c578063887b89131461017a575b600080fd5b6100ee60048036038101906100e99190611586565b6102ae565b6040516100fb91906115ce565b60405180910390f35b61010c6102d1565b604051610119919061162a565b60405180910390f35b61012a6102fd565b604051610137919061162a565b60405180910390f35b61015a600480360381019061015591906116a7565b610329565b005b610164610462565b604051610171919061162a565b60405180910390f35b61018261048e565b60405161018f919061171d565b60405180910390f35b6101a061049a565b6040516101ad919061171d565b60405180910390f35b6101d060048036038101906101cb919061179d565b6104a6565b6040516101dd91906118ea565b60405180910390f35b61020060048036038101906101fb919061190c565b6105a5565b60405161020d9190611a1b565b60405180910390f35b610230600480360381019061022b9190611a93565b6106b0565b60405161023d9190611b7e565b60405180910390f35b610260600480360381019061025b9190611b99565b610905565b005b61027c6004803603810190610277919061179d565b610cc4565b005b61029860048036038101906102939190611c1a565b611026565b6040516102a59190611b7e565b60405180910390f35b60006102ca826102bc611038565b61106590919063ffffffff16565b9050919050565b60008060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103316110d0565b60000160019054906101000a900460ff16610381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037890611d37565b60405180910390fd5b600084905080600060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160008001819055505050505050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060000154905090565b60008060000154905090565b606060008383905067ffffffffffffffff8111156104c7576104c6611d57565b5b60405190808252806020026020018201604052801561050057816020015b6104ed611503565b8152602001906001900390816104e55790505b50905060005b8484905081101561059a576000600601600086868481811061052b5761052a611d86565b5b905060200201358152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505082828151811061057c5761057b611d86565b5b6020026020010181905250808061059290611de4565b915050610506565b508091505092915050565b606060008383905067ffffffffffffffff8111156105c6576105c5611d57565b5b6040519080825280602002602001820160405280156105f45781602001602082028036833780820191505090505b50905060005b848490508110156106a4576000600501600086868481811061061f5761061e611d86565b5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061068557610684611d86565b5b602002602001018181525050808061069c90611de4565b9150506105fa565b50809150509392505050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663375b74c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107459190611e42565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a990611ee1565b60405180910390fd5b600083838101906107c39190611f3f565b905060005b888890508110156108ed5760008787838181106107e8576107e7611d86565b5b90506020020135600060050160008c8c8681811061080957610808611d86565b5b90506020020135815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108669190611f6c565b905080600060050160008c8c8681811061088357610882611d86565b5b90506020020135815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108e590611de4565b9150506107c8565b5063bc197c8160e01b91505098975050505050505050565b61090d6110fd565b60000160009054906101000a900460ff161561095e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109559061200e565b60405180910390fd5b8181905084849050146109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099d906120a0565b60405180910390fd5b600080600001549050600080600090505b86869050811015610ba0576109e48787838181106109d8576109d7611d86565b5b9050602002013561112a565b8585838181106109f7576109f6611d86565b5b9050602002013584610a0991906120c0565b610a1391906120c0565b82610a1e9190611f6c565b91506000806005016000898985818110610a3b57610a3a611d86565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081118015610ab85750858583818110610aae57610aad611d86565b5b9050602002013581115b610af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aee9061218c565b60405180910390fd5b858583818110610b0a57610b09611d86565b5b9050602002013581610b1c91906121ac565b600060050160008a8a86818110610b3657610b35611d86565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610b9890611de4565b9150506109b7565b506000811115610c2257610c2133600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661116f909392919063ffffffff16565b5b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632eb2c2d63033898989896040518763ffffffff1660e01b8152600401610c8a96959493929190612287565b600060405180830381600087803b158015610ca457600080fd5b505af1158015610cb8573d6000803e3d6000fd5b50505050505050505050565b610ccc6110fd565b60000160009054906101000a900460ff1615610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d149061200e565b60405180910390fd5b60008060005b84849050811015610ed6576000806006016000878785818110610d4957610d48611d86565b5b905060200201358152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000806005016000888886818110610da457610da3611d86565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508160000151818360200151610e0e91906120c0565b610e189190612320565b85610e239190611f6c565b94508160000151818360400151610e3a91906120c0565b610e449190612320565b84610e4f9190611f6c565b935060006005016000888886818110610e6b57610e6a611d86565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905550508080610ece90611de4565b915050610d23565b506000811115610f5857610f57600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661116f909392919063ffffffff16565b5b60008211156110205761101f3383600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fe205c76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffa9190611e42565b73ffffffffffffffffffffffffffffffffffffffff166111f89092919063ffffffff16565b5b50505050565b60008060e01b90509695505050505050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6000620151806111398361127e565b6111428461128c565b61114c919061236d565b61115691906123a1565b6fffffffffffffffffffffffffffffffff169050919050565b6111f2846323b872dd60e01b858585604051602401611190939291906123d2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611296565b50505050565b6112798363a9059cbb60e01b8484604051602401611217929190612409565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611296565b505050565b6000608082901c9050919050565b6000819050919050565b60006112f8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661135d9092919063ffffffff16565b90506000815111156113585780806020019051810190611318919061245e565b611357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134e906124fd565b60405180910390fd5b5b505050565b606061136c8484600085611375565b90509392505050565b6060824710156113ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b19061258f565b60405180910390fd5b6113c385611489565b611402576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f9906125fb565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161142b9190612695565b60006040518083038185875af1925050503d8060008114611468576040519150601f19603f3d011682016040523d82523d6000602084013e61146d565b606091505b509150915061147d82828661149c565b92505050949350505050565b600080823b905060008111915050919050565b606083156114ac578290506114fc565b6000835111156114bf5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f39190612701565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6115638161152e565b811461156e57600080fd5b50565b6000813590506115808161155a565b92915050565b60006020828403121561159c5761159b611524565b5b60006115aa84828501611571565b91505092915050565b60008115159050919050565b6115c8816115b3565b82525050565b60006020820190506115e360008301846115bf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611614826115e9565b9050919050565b61162481611609565b82525050565b600060208201905061163f600083018461161b565b92915050565b61164e81611609565b811461165957600080fd5b50565b60008135905061166b81611645565b92915050565b6000819050919050565b61168481611671565b811461168f57600080fd5b50565b6000813590506116a18161167b565b92915050565b600080600080608085870312156116c1576116c0611524565b5b60006116cf8782880161165c565b94505060206116e08782880161165c565b93505060406116f18782880161165c565b925050606061170287828801611692565b91505092959194509250565b61171781611671565b82525050565b6000602082019050611732600083018461170e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261175d5761175c611738565b5b8235905067ffffffffffffffff81111561177a5761177961173d565b5b60208301915083602082028301111561179657611795611742565b5b9250929050565b600080602083850312156117b4576117b3611524565b5b600083013567ffffffffffffffff8111156117d2576117d1611529565b5b6117de85828601611747565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61181f81611671565b82525050565b60608201600082015161183b6000850182611816565b50602082015161184e6020850182611816565b5060408201516118616040850182611816565b50505050565b60006118738383611825565b60608301905092915050565b6000602082019050919050565b6000611897826117ea565b6118a181856117f5565b93506118ac83611806565b8060005b838110156118dd5781516118c48882611867565b97506118cf8361187f565b9250506001810190506118b0565b5085935050505092915050565b60006020820190508181036000830152611904818461188c565b905092915050565b60008060006040848603121561192557611924611524565b5b60006119338682870161165c565b935050602084013567ffffffffffffffff81111561195457611953611529565b5b61196086828701611747565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006119a48383611816565b60208301905092915050565b6000602082019050919050565b60006119c88261196c565b6119d28185611977565b93506119dd83611988565b8060005b83811015611a0e5781516119f58882611998565b9750611a00836119b0565b9250506001810190506119e1565b5085935050505092915050565b60006020820190508181036000830152611a3581846119bd565b905092915050565b60008083601f840112611a5357611a52611738565b5b8235905067ffffffffffffffff811115611a7057611a6f61173d565b5b602083019150836001820283011115611a8c57611a8b611742565b5b9250929050565b60008060008060008060008060a0898b031215611ab357611ab2611524565b5b6000611ac18b828c0161165c565b9850506020611ad28b828c0161165c565b975050604089013567ffffffffffffffff811115611af357611af2611529565b5b611aff8b828c01611747565b9650965050606089013567ffffffffffffffff811115611b2257611b21611529565b5b611b2e8b828c01611747565b9450945050608089013567ffffffffffffffff811115611b5157611b50611529565b5b611b5d8b828c01611a3d565b92509250509295985092959890939650565b611b788161152e565b82525050565b6000602082019050611b936000830184611b6f565b92915050565b60008060008060408587031215611bb357611bb2611524565b5b600085013567ffffffffffffffff811115611bd157611bd0611529565b5b611bdd87828801611747565b9450945050602085013567ffffffffffffffff811115611c0057611bff611529565b5b611c0c87828801611747565b925092505092959194509250565b60008060008060008060a08789031215611c3757611c36611524565b5b6000611c4589828a0161165c565b9650506020611c5689828a0161165c565b9550506040611c6789828a01611692565b9450506060611c7889828a01611692565b935050608087013567ffffffffffffffff811115611c9957611c98611529565b5b611ca589828a01611a3d565b92509250509295509295509295565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611d21602b83611cb4565b9150611d2c82611cc5565b604082019050919050565b60006020820190508181036000830152611d5081611d14565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611def82611671565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e2257611e21611db5565b5b600182019050919050565b600081519050611e3c81611645565b92915050565b600060208284031215611e5857611e57611524565b5b6000611e6684828501611e2d565b91505092915050565b7f44654d696e654167656e743a206f6e6c7920746f6b656e732066726f6d20637560008201527f73746f6469616e20616c6c6f7765640000000000000000000000000000000000602082015250565b6000611ecb602f83611cb4565b9150611ed682611e6f565b604082019050919050565b60006020820190508181036000830152611efa81611ebe565b9050919050565b6000611f0c826115e9565b9050919050565b611f1c81611f01565b8114611f2757600080fd5b50565b600081359050611f3981611f13565b92915050565b600060208284031215611f5557611f54611524565b5b6000611f6384828501611f2a565b91505092915050565b6000611f7782611671565b9150611f8283611671565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fb757611fb6611db5565b5b828201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000611ff8601083611cb4565b915061200382611fc2565b602082019050919050565b6000602082019050818103600083015261202781611feb565b9050919050565b7f44654d696e654167656e743a206172726179206c656e677468206d69736d617460008201527f6368000000000000000000000000000000000000000000000000000000000000602082015250565b600061208a602283611cb4565b91506120958261202e565b604082019050919050565b600060208201905081810360008301526120b98161207d565b9050919050565b60006120cb82611671565b91506120d683611671565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561210f5761210e611db5565b5b828202905092915050565b7f44654d696e654167656e743a206e6f2073756666696369656e742062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612176602283611cb4565b91506121818261211a565b604082019050919050565b600060208201905081810360008301526121a581612169565b9050919050565b60006121b782611671565b91506121c283611671565b9250828210156121d5576121d4611db5565b5b828203905092915050565b600080fd5b82818337600083830152505050565b60006122008385611977565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612233576122326121e0565b5b6020830292506122448385846121e5565b82840190509392505050565b600082825260208201905092915050565b50565b6000612271600083612250565b915061227c82612261565b600082019050919050565b600060a08201905061229c600083018961161b565b6122a9602083018861161b565b81810360408301526122bc8186886121f4565b905081810360608301526122d18184866121f4565b905081810360808301526122e481612264565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061232b82611671565b915061233683611671565b925082612346576123456122f1565b5b828204905092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061237882612351565b915061238383612351565b92508282101561239657612395611db5565b5b828203905092915050565b60006123ac82612351565b91506123b783612351565b9250826123c7576123c66122f1565b5b828204905092915050565b60006060820190506123e7600083018661161b565b6123f4602083018561161b565b612401604083018461170e565b949350505050565b600060408201905061241e600083018561161b565b61242b602083018461170e565b9392505050565b61243b816115b3565b811461244657600080fd5b50565b60008151905061245881612432565b92915050565b60006020828403121561247457612473611524565b5b600061248284828501612449565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006124e7602a83611cb4565b91506124f28261248b565b604082019050919050565b60006020820190508181036000830152612516816124da565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612579602683611cb4565b91506125848261251d565b604082019050919050565b600060208201905081810360008301526125a88161256c565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006125e5601d83611cb4565b91506125f0826125af565b602082019050919050565b60006020820190508181036000830152612614816125d8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561264f578082015181840152602081019050612634565b8381111561265e576000848401525b50505050565b600061266f8261261b565b6126798185612626565b9350612689818560208601612631565b80840191505092915050565b60006126a18284612664565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006126d3826126ac565b6126dd8185611cb4565b93506126ed818560208601612631565b6126f6816126b7565b840191505092915050565b6000602082019050818103600083015261271b81846126c8565b90509291505056fea2646970667358221220fff8ab613b12c1a719378549881b37f19ebb6e1cdd9c00734fbfba42471da78264736f6c634300080b0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Shu Dong, Yijie Hong",
    "details": "the contract also implements IERC1155Receiver to receive and lock demine nft",
    "kind": "dev",
    "methods": {
      "redeemNFT(uint256[],uint256[])": {
        "params": {
          "amounts": "Amount of each demine nft token",
          "ids": "DeMine nft token ids to redeem"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      }
    },
    "title": "MortgageFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "redeemNFT(uint256[],uint256[])": {
        "notice": "Pay token cost and liquidize tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "withdrawAndPayoff(uint256[])": {
        "notice": "Withdraw surplus or payoff debt for NFT tokens that have been billed.         All balances of ids need to be paid off or withdrawn. Partial payoff         or withdraw is not supported."
      }
    },
    "notice": "Facet contract holding functions for miners to manage mortgage.Facet contract currently only supports weekly NFT token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3735,
        "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)3732_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155Rewardable)3971": {
        "encoding": "inplace",
        "label": "contract IERC1155Rewardable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(BillingStatement)3689_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BillingStatement)",
        "numberOfBytes": "32",
        "value": "t_struct(BillingStatement)3689_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AppStorage)3732_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 3691,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "tokenCost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3694,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "nft",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC1155Rewardable)3971"
          },
          {
            "astId": 3696,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "paymentToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3698,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "custodian",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3700,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "royaltyBps",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 3702,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "royaltyCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3708,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "balances",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 3713,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "statements",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(BillingStatement)3689_storage)"
          },
          {
            "astId": 3715,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "chainlink",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3717,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "swapRouter",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 3719,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "swapRouterVersion",
            "offset": 20,
            "slot": "8",
            "type": "t_uint8"
          },
          {
            "astId": 3721,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "earningTokenSaleDiscount10000Based",
            "offset": 21,
            "slot": "8",
            "type": "t_uint16"
          },
          {
            "astId": 3725,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "strategyRegistry",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint8)"
          },
          {
            "astId": 3731,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "strategies",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_address))"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(BillingStatement)3689_storage": {
        "encoding": "inplace",
        "label": "struct BillingStatement",
        "members": [
          {
            "astId": 3684,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3686,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "surplus",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3688,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}