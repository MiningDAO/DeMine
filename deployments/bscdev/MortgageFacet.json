{
  "address": "0x1D2832923e0dA8E476F74D3C760A556730c1db40",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "billingStatementOfBatch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "surplus",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            }
          ],
          "internalType": "struct BillingStatement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "custodian",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenCost",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pricingStrategies",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "allowanceStrategies",
          "type": "address[]"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeemNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawAndPayoff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x931b5ebc1ab33dbccff0bc4a493a7f0a67a185aeee90ce9acc3726165b9bba32",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0x1D2832923e0dA8E476F74D3C760A556730c1db40",
    "transactionIndex": 4,
    "gasUsed": "2267429",
    "logsBloom": "0x
    "blockHash": "0x640908c969df8db002a284c994f8015e3175263bd52241063a23d89a61009188",
    "transactionHash": "0x931b5ebc1ab33dbccff0bc4a493a7f0a67a185aeee90ce9acc3726165b9bba32",
    "logs": [],
    "blockNumber": 16968599,
    "cumulativeGasUsed": "2715269",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e9a72363d7129de323877828de5d2608",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"billingStatementOfBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"surplus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"internalType\":\"struct BillingStatement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCost\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pricingStrategies\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowanceStrategies\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeemNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAndPayoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shu Dong, Yijie Hong\",\"details\":\"the contract also implements IERC1155Receiver to receive and lock demine nft\",\"kind\":\"dev\",\"methods\":{\"redeemNFT(uint256[],uint256[])\":{\"params\":{\"amounts\":\"Amount of each demine nft token\",\"ids\":\"DeMine nft token ids to redeem\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}}},\"title\":\"MortgageFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"redeemNFT(uint256[],uint256[])\":{\"notice\":\"Pay token cost and liquidize tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"withdrawAndPayoff(uint256[])\":{\"notice\":\"Withdraw surplus or payoff debt for NFT tokens that have been billed.         All balances of ids need to be paid off or withdrawn. Partial payoff         or withdraw is not supported.\"}},\"notice\":\"Facet contract holding functions for miners to manage mortgage.Facet contract currently only supports weekly NFT token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agent/facets/MortgageFacet.sol\":\"MortgageFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x31fcdbc3c885a95d0449d9b5f20a7ef0cae2fa63bd82195995d05a7eecaa5f74\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"contracts/agent/facets/MortgageFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/introspection/ERC165.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol';\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport '../../shared/lib/Util.sol';\\nimport '../../shared/lib/LibPausable.sol';\\nimport '../lib/AppStorage.sol';\\nimport '../../shared/lib/LibInitializable.sol';\\n\\n/**\\n * @title MortgageFacet\\n * @author Shu Dong, Yijie Hong\\n * @notice Facet contract holding functions for miners to manage mortgage.\\n * @notice Facet contract currently only supports weekly NFT token.\\n * @dev the contract also implements IERC1155Receiver to receive and lock demine nft\\n */\\ncontract MortgageFacet is\\n    Initializable,\\n    PausableModifier,\\n    IERC1155Receiver,\\n    ERC165\\n{\\n    AppStorage internal s;\\n\\n    using SafeERC20 for IERC20;\\n\\n    function init(\\n        address nft,\\n        address paymentToken,\\n        address custodian,\\n        uint tokenCost,\\n        address[] calldata pricingStrategies,\\n        address[] calldata allowanceStrategies\\n    ) external onlyInitializing {\\n        IERC1155Rewardable nftContract = IERC1155Rewardable(nft);\\n        s.nft = nftContract;\\n        s.paymentToken = paymentToken;\\n        s.custodian = custodian;\\n        s.tokenCost = tokenCost;\\n        for (uint i = 0; i < pricingStrategies.length; i++) {\\n            s.strategyRegistry[pricingStrategies[i]] = 1;\\n        }\\n        for (uint i = 0; i < allowanceStrategies.length; i++) {\\n            s.strategyRegistry[allowanceStrategies[i]] = 2;\\n        }\\n    }\\n\\n    /**\\n     * @notice Pay token cost and liquidize tokens\\n     * @param ids DeMine nft token ids to redeem\\n     * @param amounts Amount of each demine nft token\\n     */\\n    function redeemNFT(\\n        uint256[] calldata ids,\\n        uint[] calldata amounts\\n    ) external whenNotPaused {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"DeMineAgent: array length mismatch\\\"\\n        );\\n        uint tokenCost = s.tokenCost;\\n\\n        uint totalCost;\\n        for (uint i = 0; i < ids.length; i++) {\\n            totalCost += tokenCost * amounts[i] * daysInToken(ids[i]);\\n            uint balance = s.balances[ids[i]][msg.sender];\\n            require(balance > 0 && balance > amounts[i], 'DeMineAgent: no sufficient balance');\\n            s.balances[ids[i]][msg.sender] = balance - amounts[i];\\n        }\\n        if (totalCost > 0) {\\n            IERC20(s.paymentToken).safeTransferFrom(msg.sender, s.custodian, totalCost);\\n        }\\n        s.nft.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n\\n    function balanceOfBatch(\\n        address account,\\n        uint256[] calldata ids\\n    ) external view returns(uint[] memory) {\\n        uint[] memory balances = new uint[](ids.length);\\n        for (uint i = 0; i < ids.length; i++) {\\n            balances[i] = s.balances[ids[i]][account];\\n        }\\n        return balances;\\n    }\\n\\n    function billingStatementOfBatch(\\n        uint[] calldata tokenIds\\n    ) external view returns(BillingStatement[] memory) {\\n        BillingStatement[] memory res = new BillingStatement[](tokenIds.length);\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            res[i] = s.statements[tokenIds[i]];\\n        }\\n        return res;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0; // reject\\n    }\\n\\n    // @dev the function should only be called by mint function of DeMineNFT\\n    // @param from Must be address(0)\\n    // @param data Must be encoded address of mortagager\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(\\n            from == s.nft.custodian(),\\n            'DeMineAgent: only tokens from custodian allowed'\\n        );\\n        (address mortgager) = abi.decode(data, (address));\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint balance = s.balances[ids[i]][mortgager] + amounts[i];\\n            s.balances[ids[i]][mortgager] = balance;\\n        }\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @notice Withdraw surplus or payoff debt for NFT tokens that have been billed.\\n     *         All balances of ids need to be paid off or withdrawn. Partial payoff\\n     *         or withdraw is not supported.\\n     */\\n    function withdrawAndPayoff(\\n        uint256[] calldata ids\\n    ) external whenNotPaused {\\n        uint income;\\n        uint debt;\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            BillingStatement memory st = s.statements[ids[i]];\\n            uint balance = s.balances[ids[i]][msg.sender];\\n            income += st.surplus * balance / st.balance;\\n            debt += st.debt * balance / st.balance;\\n            delete s.balances[ids[i]][msg.sender];\\n        }\\n\\n        if (debt > 0) {\\n            IERC20(s.paymentToken).safeTransferFrom(s.custodian, msg.sender, debt);\\n        }\\n        if (income > 0) {\\n            IERC20(s.nft.earningToken()).safeTransfer(msg.sender, income);\\n        }\\n    }\\n\\n    function tokenIdToStart(uint256 tokenId) private pure returns(uint128) {\\n        return uint128(tokenId >> 128);\\n    }\\n\\n    function tokenIdToEnd(uint256 tokenId) private pure returns(uint128) {\\n        return uint128(tokenId);\\n    }\\n\\n    function daysInToken(uint256 tokenId) private pure returns(uint) {\\n        return (tokenIdToEnd(tokenId) - tokenIdToStart(tokenId)) / 86400;\\n    }\\n\\n    function getTokenCost() external view returns(uint) {\\n        return s.tokenCost;\\n    }\\n}\\n\",\"keccak256\":\"0x38ab824b3beef8eeead7a4cc4100bc2ce9f536e4a5d289061d301cfac4846c51\",\"license\":\"MIT\"},\"contracts/agent/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport '../../nft/interfaces/IERC1155Rewardable.sol';\\n\\nstruct BillingStatement {\\n    uint balance;  // Today's total locked (not liquidated) NFT for today\\n    uint surplus;  // Today's surplus (mined target tokens - the part to payoff unpaid cost) in incomeToken\\n    uint debt;  // The debt in paymentToken if today's mined target tokens cannot pay off cost\\n}\\n\\nstruct AppStorage {\\n    uint tokenCost; // cost per nft in payment token\\n\\n    IERC1155Rewardable nft; // DeMineNFT contract address\\n    address incomeToken; // The target token to be mined (e.g. BTC)\\n    address paymentToken; // The type of token to pay off cost (e.g. USDT)\\n    address custodian; // payee account address, could be contract\\n    uint16 royaltyBps;  // royalty bps, 10000 based\\n    uint royaltyCap;  // max royalty value to accept\\n\\n    mapping(uint => mapping(address => uint)) balances;  // owner => buyer => allowance\\n\\n    // billing related\\n    mapping(uint256 => BillingStatement) statements; // Billing statement for each NFT token.\\n    AggregatorV3Interface chainlink;\\n    address swapRouter;\\n    uint16 earningTokenSaleDiscount10000Based; // 10000 based\\n    mapping(uint => uint) lockedUntil; // earning token sale\\n\\n    // primary market sale related\\n    // 0: unregistered, 1: pricing strategy, 2: allowance strategy\\n    mapping(address => uint8) strategyRegistry;\\n    mapping(address => mapping(uint8 => address)) strategies;\\n}\\n\\nabstract contract StorageBase {\\n    AppStorage internal s;\\n}\\n\",\"keccak256\":\"0xfb623b2d342739a55e615ae77ed2c0ccb5c2202e21659ea57645172367c7b304\",\"license\":\"MIT\"},\"contracts/nft/interfaces/IERC1155Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IERC1155Rewardable is IERC1155 {\\n    function custodian() external view returns(address);\\n\\n    function earningToken() external view returns(address);\\n}\\n\",\"keccak256\":\"0xac6ed88e2b851fcbc70ca389bbe6c6db551b619fe70375995fe7f11d69d69b47\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xb33768d5a13e8aa6c9c15a2988d677ec850db777536db6ab0c38f0f768f71569\",\"license\":\"MIT\"},\"contracts/shared/lib/LibInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/utils/AddressUtils.sol';\\n\\n/**\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary InitializableStorage {\\n    struct Layout {\\n        bool initialized;\\n        bool initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.contracts.storage.Initializable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    modifier initializer() {\\n        InitializableStorage.Layout storage l = InitializableStorage.layout();\\n        require(\\n            l.initializing ? isConstructor() : !l.initialized,\\n            'Initializable: contract is already initialized'\\n        );\\n        bool isTopLevelCall = !l.initializing;\\n        if (isTopLevelCall) {\\n            l.initializing = true;\\n            l.initialized = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            l.initializing = false;\\n        }\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(\\n            InitializableStorage.layout().initializing,\\n            'Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    function isConstructor() private view returns (bool) {\\n        return !AddressUtils.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9fad7cc55f61de87ce9768325bf94406261eaf42f198e1a69f3ead0dc56b656d\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x86af35526539727370e6cfcd7132918c2b8923052391f7a1816458066006979a\",\"license\":\"MIT\"},\"contracts/shared/lib/Util.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nlibrary Util {\\n    function ceil(uint a, uint m) internal pure returns(uint) {\\n        return ((a + m - 1) / m) * m;\\n    }\\n\\n    function max3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a > b ? max2(a, c) : max2(b, c);\\n    }\\n\\n    function max2(uint a, uint b) internal pure returns(uint) {\\n        return a > b ? a : b;\\n    }\\n\\n    function uint128max2(uint128 a, uint128 b) internal pure returns(uint128) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min2(uint a, uint b) internal pure returns(uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function uint128min2(uint128 a, uint128 b) internal pure returns(uint128) {\\n        return a < b ? a : b;\\n    }\\n\\n    function min3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a < b ? min2(a, c) : min2(b, c);\\n    }\\n}\\n\",\"keccak256\":\"0x193a469ef579e7ab002bdef2c4327accb3ee2293d252809ce2f478af143a7156\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612833806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063bc197c8111610066578063bc197c8114610146578063e1a1bdc814610176578063e7da56cc14610192578063f057b6e5146101ae578063f23a6e61146101ca57610093565b806301ffc9a714610098578063887b8913146100c85780639d362920146100e6578063afd6908614610116575b600080fd5b6100b260048036038101906100ad9190611590565b6101fa565b6040516100bf91906115d8565b60405180910390f35b6100d061021d565b6040516100dd919061160c565b60405180910390f35b61010060048036038101906100fb919061168c565b610229565b60405161010d91906117d9565b60405180910390f35b610130600480360381019061012b9190611859565b610328565b60405161013d9190611968565b60405180910390f35b610160600480360381019061015b91906119e0565b610433565b60405161016d9190611acb565b60405180910390f35b610190600480360381019061018b9190611b68565b610688565b005b6101ac60048036038101906101a79190611c37565b61090f565b005b6101c860048036038101906101c3919061168c565b610cce565b005b6101e460048036038101906101df9190611cb8565b611030565b6040516101f19190611acb565b60405180910390f35b600061021682610208611042565b61106f90919063ffffffff16565b9050919050565b60008060000154905090565b606060008383905067ffffffffffffffff81111561024a57610249611d52565b5b60405190808252806020026020018201604052801561028357816020015b61027061150d565b8152602001906001900390816102685790505b50905060005b8484905081101561031d57600060070160008686848181106102ae576102ad611d81565b5b90506020020135815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106102ff576102fe611d81565b5b6020026020010181905250808061031590611ddf565b915050610289565b508091505092915050565b606060008383905067ffffffffffffffff81111561034957610348611d52565b5b6040519080825280602002602001820160405280156103775781602001602082028036833780820191505090505b50905060005b8484905081101561042757600060060160008686848181106103a2576103a1611d81565b5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061040857610407611d81565b5b602002602001018181525050808061041f90611ddf565b91505061037d565b50809150509392505050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663375b74c36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c89190611e3d565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052c90611eed565b60405180910390fd5b600083838101906105469190611f4b565b905060005b8888905081101561067057600087878381811061056b5761056a611d81565b5b90506020020135600060060160008c8c8681811061058c5761058b611d81565b5b90506020020135815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105e99190611f78565b905080600060060160008c8c8681811061060657610605611d81565b5b90506020020135815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061066890611ddf565b91505061054b565b5063bc197c8160e01b91505098975050505050505050565b6106906110da565b60000160019054906101000a900460ff166106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790612040565b60405180910390fd5b600088905080600060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600080018190555060005b8585905081101561085e5760016000600b0160008888858181106107e4576107e3611d81565b5b90506020020160208101906107f99190612060565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550808061085690611ddf565b9150506107bd565b5060005b838390508110156109035760026000600b01600086868581811061088957610888611d81565b5b905060200201602081019061089e9190612060565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555080806108fb90611ddf565b915050610862565b50505050505050505050565b610917611107565b60000160009054906101000a900460ff1615610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095f906120d9565b60405180910390fd5b8181905084849050146109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a79061216b565b60405180910390fd5b600080600001549050600080600090505b86869050811015610baa576109ee8787838181106109e2576109e1611d81565b5b90506020020135611134565b858583818110610a0157610a00611d81565b5b9050602002013584610a13919061218b565b610a1d919061218b565b82610a289190611f78565b91506000806006016000898985818110610a4557610a44611d81565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081118015610ac25750858583818110610ab857610ab7611d81565b5b9050602002013581115b610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af890612257565b60405180910390fd5b858583818110610b1457610b13611d81565b5b9050602002013581610b269190612277565b600060060160008a8a86818110610b4057610b3f611d81565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610ba290611ddf565b9150506109c1565b506000811115610c2c57610c2b33600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611179909392919063ffffffff16565b5b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632eb2c2d63033898989896040518763ffffffff1660e01b8152600401610c9496959493929190612361565b600060405180830381600087803b158015610cae57600080fd5b505af1158015610cc2573d6000803e3d6000fd5b50505050505050505050565b610cd6611107565b60000160009054906101000a900460ff1615610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e906120d9565b60405180910390fd5b60008060005b84849050811015610ee0576000806007016000878785818110610d5357610d52611d81565b5b905060200201358152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000806006016000888886818110610dae57610dad611d81565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508160000151818360200151610e18919061218b565b610e2291906123fa565b85610e2d9190611f78565b94508160000151818360400151610e44919061218b565b610e4e91906123fa565b84610e599190611f78565b935060006006016000888886818110610e7557610e74611d81565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905550508080610ed890611ddf565b915050610d2d565b506000811115610f6257610f61600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611179909392919063ffffffff16565b5b600082111561102a576110293383600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fe205c76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190611e3d565b73ffffffffffffffffffffffffffffffffffffffff166112029092919063ffffffff16565b5b50505050565b60008060e01b90509695505050505050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b60006201518061114383611288565b61114c84611296565b6111569190612447565b611160919061247b565b6fffffffffffffffffffffffffffffffff169050919050565b6111fc846323b872dd60e01b85858560405160240161119a939291906124ac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112a0565b50505050565b6112838363a9059cbb60e01b84846040516024016112219291906124e3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112a0565b505050565b6000608082901c9050919050565b6000819050919050565b6000611302826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113679092919063ffffffff16565b905060008151111561136257808060200190518101906113229190612538565b611361576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611358906125d7565b60405180910390fd5b5b505050565b6060611376848460008561137f565b90509392505050565b6060824710156113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90612669565b60405180910390fd5b6113cd85611493565b61140c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611403906126d5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611435919061276f565b60006040518083038185875af1925050503d8060008114611472576040519150601f19603f3d011682016040523d82523d6000602084013e611477565b606091505b50915091506114878282866114a6565b92505050949350505050565b600080823b905060008111915050919050565b606083156114b657829050611506565b6000835111156114c95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fd91906127db565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61156d81611538565b811461157857600080fd5b50565b60008135905061158a81611564565b92915050565b6000602082840312156115a6576115a561152e565b5b60006115b48482850161157b565b91505092915050565b60008115159050919050565b6115d2816115bd565b82525050565b60006020820190506115ed60008301846115c9565b92915050565b6000819050919050565b611606816115f3565b82525050565b600060208201905061162160008301846115fd565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261164c5761164b611627565b5b8235905067ffffffffffffffff8111156116695761166861162c565b5b60208301915083602082028301111561168557611684611631565b5b9250929050565b600080602083850312156116a3576116a261152e565b5b600083013567ffffffffffffffff8111156116c1576116c0611533565b5b6116cd85828601611636565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61170e816115f3565b82525050565b60608201600082015161172a6000850182611705565b50602082015161173d6020850182611705565b5060408201516117506040850182611705565b50505050565b60006117628383611714565b60608301905092915050565b6000602082019050919050565b6000611786826116d9565b61179081856116e4565b935061179b836116f5565b8060005b838110156117cc5781516117b38882611756565b97506117be8361176e565b92505060018101905061179f565b5085935050505092915050565b600060208201905081810360008301526117f3818461177b565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611826826117fb565b9050919050565b6118368161181b565b811461184157600080fd5b50565b6000813590506118538161182d565b92915050565b6000806000604084860312156118725761187161152e565b5b600061188086828701611844565b935050602084013567ffffffffffffffff8111156118a1576118a0611533565b5b6118ad86828701611636565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006118f18383611705565b60208301905092915050565b6000602082019050919050565b6000611915826118b9565b61191f81856118c4565b935061192a836118d5565b8060005b8381101561195b57815161194288826118e5565b975061194d836118fd565b92505060018101905061192e565b5085935050505092915050565b60006020820190508181036000830152611982818461190a565b905092915050565b60008083601f8401126119a05761199f611627565b5b8235905067ffffffffffffffff8111156119bd576119bc61162c565b5b6020830191508360018202830111156119d9576119d8611631565b5b9250929050565b60008060008060008060008060a0898b031215611a00576119ff61152e565b5b6000611a0e8b828c01611844565b9850506020611a1f8b828c01611844565b975050604089013567ffffffffffffffff811115611a4057611a3f611533565b5b611a4c8b828c01611636565b9650965050606089013567ffffffffffffffff811115611a6f57611a6e611533565b5b611a7b8b828c01611636565b9450945050608089013567ffffffffffffffff811115611a9e57611a9d611533565b5b611aaa8b828c0161198a565b92509250509295985092959890939650565b611ac581611538565b82525050565b6000602082019050611ae06000830184611abc565b92915050565b611aef816115f3565b8114611afa57600080fd5b50565b600081359050611b0c81611ae6565b92915050565b60008083601f840112611b2857611b27611627565b5b8235905067ffffffffffffffff811115611b4557611b4461162c565b5b602083019150836020820283011115611b6157611b60611631565b5b9250929050565b60008060008060008060008060c0898b031215611b8857611b8761152e565b5b6000611b968b828c01611844565b9850506020611ba78b828c01611844565b9750506040611bb88b828c01611844565b9650506060611bc98b828c01611afd565b955050608089013567ffffffffffffffff811115611bea57611be9611533565b5b611bf68b828c01611b12565b945094505060a089013567ffffffffffffffff811115611c1957611c18611533565b5b611c258b828c01611b12565b92509250509295985092959890939650565b60008060008060408587031215611c5157611c5061152e565b5b600085013567ffffffffffffffff811115611c6f57611c6e611533565b5b611c7b87828801611636565b9450945050602085013567ffffffffffffffff811115611c9e57611c9d611533565b5b611caa87828801611636565b925092505092959194509250565b60008060008060008060a08789031215611cd557611cd461152e565b5b6000611ce389828a01611844565b9650506020611cf489828a01611844565b9550506040611d0589828a01611afd565b9450506060611d1689828a01611afd565b935050608087013567ffffffffffffffff811115611d3757611d36611533565b5b611d4389828a0161198a565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611dea826115f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e1d57611e1c611db0565b5b600182019050919050565b600081519050611e378161182d565b92915050565b600060208284031215611e5357611e5261152e565b5b6000611e6184828501611e28565b91505092915050565b600082825260208201905092915050565b7f44654d696e654167656e743a206f6e6c7920746f6b656e732066726f6d20637560008201527f73746f6469616e20616c6c6f7765640000000000000000000000000000000000602082015250565b6000611ed7602f83611e6a565b9150611ee282611e7b565b604082019050919050565b60006020820190508181036000830152611f0681611eca565b9050919050565b6000611f18826117fb565b9050919050565b611f2881611f0d565b8114611f3357600080fd5b50565b600081359050611f4581611f1f565b92915050565b600060208284031215611f6157611f6061152e565b5b6000611f6f84828501611f36565b91505092915050565b6000611f83826115f3565b9150611f8e836115f3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fc357611fc2611db0565b5b828201905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061202a602b83611e6a565b915061203582611fce565b604082019050919050565b600060208201905081810360008301526120598161201d565b9050919050565b6000602082840312156120765761207561152e565b5b600061208484828501611844565b91505092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006120c3601083611e6a565b91506120ce8261208d565b602082019050919050565b600060208201905081810360008301526120f2816120b6565b9050919050565b7f44654d696e654167656e743a206172726179206c656e677468206d69736d617460008201527f6368000000000000000000000000000000000000000000000000000000000000602082015250565b6000612155602283611e6a565b9150612160826120f9565b604082019050919050565b6000602082019050818103600083015261218481612148565b9050919050565b6000612196826115f3565b91506121a1836115f3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121da576121d9611db0565b5b828202905092915050565b7f44654d696e654167656e743a206e6f2073756666696369656e742062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612241602283611e6a565b915061224c826121e5565b604082019050919050565b6000602082019050818103600083015261227081612234565b9050919050565b6000612282826115f3565b915061228d836115f3565b9250828210156122a05761229f611db0565b5b828203905092915050565b6122b48161181b565b82525050565b600080fd5b82818337600083830152505050565b60006122da83856118c4565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561230d5761230c6122ba565b5b60208302925061231e8385846122bf565b82840190509392505050565b600082825260208201905092915050565b50565b600061234b60008361232a565b91506123568261233b565b600082019050919050565b600060a08201905061237660008301896122ab565b61238360208301886122ab565b81810360408301526123968186886122ce565b905081810360608301526123ab8184866122ce565b905081810360808301526123be8161233e565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612405826115f3565b9150612410836115f3565b9250826124205761241f6123cb565b5b828204905092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b60006124528261242b565b915061245d8361242b565b9250828210156124705761246f611db0565b5b828203905092915050565b60006124868261242b565b91506124918361242b565b9250826124a1576124a06123cb565b5b828204905092915050565b60006060820190506124c160008301866122ab565b6124ce60208301856122ab565b6124db60408301846115fd565b949350505050565b60006040820190506124f860008301856122ab565b61250560208301846115fd565b9392505050565b612515816115bd565b811461252057600080fd5b50565b6000815190506125328161250c565b92915050565b60006020828403121561254e5761254d61152e565b5b600061255c84828501612523565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006125c1602a83611e6a565b91506125cc82612565565b604082019050919050565b600060208201905081810360008301526125f0816125b4565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612653602683611e6a565b915061265e826125f7565b604082019050919050565b6000602082019050818103600083015261268281612646565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126bf601d83611e6a565b91506126ca82612689565b602082019050919050565b600060208201905081810360008301526126ee816126b2565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561272957808201518184015260208101905061270e565b83811115612738576000848401525b50505050565b6000612749826126f5565b6127538185612700565b935061276381856020860161270b565b80840191505092915050565b600061277b828461273e565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006127ad82612786565b6127b78185611e6a565b93506127c781856020860161270b565b6127d081612791565b840191505092915050565b600060208201905081810360008301526127f581846127a2565b90509291505056fea2646970667358221220656d4d2f026ebadcdd3418ffd61ce7fd41d4e85d17a3837071fac6f61b07f55164736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063bc197c8111610066578063bc197c8114610146578063e1a1bdc814610176578063e7da56cc14610192578063f057b6e5146101ae578063f23a6e61146101ca57610093565b806301ffc9a714610098578063887b8913146100c85780639d362920146100e6578063afd6908614610116575b600080fd5b6100b260048036038101906100ad9190611590565b6101fa565b6040516100bf91906115d8565b60405180910390f35b6100d061021d565b6040516100dd919061160c565b60405180910390f35b61010060048036038101906100fb919061168c565b610229565b60405161010d91906117d9565b60405180910390f35b610130600480360381019061012b9190611859565b610328565b60405161013d9190611968565b60405180910390f35b610160600480360381019061015b91906119e0565b610433565b60405161016d9190611acb565b60405180910390f35b610190600480360381019061018b9190611b68565b610688565b005b6101ac60048036038101906101a79190611c37565b61090f565b005b6101c860048036038101906101c3919061168c565b610cce565b005b6101e460048036038101906101df9190611cb8565b611030565b6040516101f19190611acb565b60405180910390f35b600061021682610208611042565b61106f90919063ffffffff16565b9050919050565b60008060000154905090565b606060008383905067ffffffffffffffff81111561024a57610249611d52565b5b60405190808252806020026020018201604052801561028357816020015b61027061150d565b8152602001906001900390816102685790505b50905060005b8484905081101561031d57600060070160008686848181106102ae576102ad611d81565b5b90506020020135815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250508282815181106102ff576102fe611d81565b5b6020026020010181905250808061031590611ddf565b915050610289565b508091505092915050565b606060008383905067ffffffffffffffff81111561034957610348611d52565b5b6040519080825280602002602001820160405280156103775781602001602082028036833780820191505090505b50905060005b8484905081101561042757600060060160008686848181106103a2576103a1611d81565b5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061040857610407611d81565b5b602002602001018181525050808061041f90611ddf565b91505061037d565b50809150509392505050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663375b74c36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c89190611e3d565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052c90611eed565b60405180910390fd5b600083838101906105469190611f4b565b905060005b8888905081101561067057600087878381811061056b5761056a611d81565b5b90506020020135600060060160008c8c8681811061058c5761058b611d81565b5b90506020020135815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105e99190611f78565b905080600060060160008c8c8681811061060657610605611d81565b5b90506020020135815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061066890611ddf565b91505061054b565b5063bc197c8160e01b91505098975050505050505050565b6106906110da565b60000160019054906101000a900460ff166106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790612040565b60405180910390fd5b600088905080600060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600080018190555060005b8585905081101561085e5760016000600b0160008888858181106107e4576107e3611d81565b5b90506020020160208101906107f99190612060565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550808061085690611ddf565b9150506107bd565b5060005b838390508110156109035760026000600b01600086868581811061088957610888611d81565b5b905060200201602081019061089e9190612060565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555080806108fb90611ddf565b915050610862565b50505050505050505050565b610917611107565b60000160009054906101000a900460ff1615610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095f906120d9565b60405180910390fd5b8181905084849050146109b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a79061216b565b60405180910390fd5b600080600001549050600080600090505b86869050811015610baa576109ee8787838181106109e2576109e1611d81565b5b90506020020135611134565b858583818110610a0157610a00611d81565b5b9050602002013584610a13919061218b565b610a1d919061218b565b82610a289190611f78565b91506000806006016000898985818110610a4557610a44611d81565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081118015610ac25750858583818110610ab857610ab7611d81565b5b9050602002013581115b610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af890612257565b60405180910390fd5b858583818110610b1457610b13611d81565b5b9050602002013581610b269190612277565b600060060160008a8a86818110610b4057610b3f611d81565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610ba290611ddf565b9150506109c1565b506000811115610c2c57610c2b33600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611179909392919063ffffffff16565b5b600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632eb2c2d63033898989896040518763ffffffff1660e01b8152600401610c9496959493929190612361565b600060405180830381600087803b158015610cae57600080fd5b505af1158015610cc2573d6000803e3d6000fd5b50505050505050505050565b610cd6611107565b60000160009054906101000a900460ff1615610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e906120d9565b60405180910390fd5b60008060005b84849050811015610ee0576000806007016000878785818110610d5357610d52611d81565b5b905060200201358152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000806006016000888886818110610dae57610dad611d81565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508160000151818360200151610e18919061218b565b610e2291906123fa565b85610e2d9190611f78565b94508160000151818360400151610e44919061218b565b610e4e91906123fa565b84610e599190611f78565b935060006006016000888886818110610e7557610e74611d81565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905550508080610ed890611ddf565b915050610d2d565b506000811115610f6257610f61600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611179909392919063ffffffff16565b5b600082111561102a576110293383600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fe205c76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190611e3d565b73ffffffffffffffffffffffffffffffffffffffff166112029092919063ffffffff16565b5b50505050565b60008060e01b90509695505050505050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b60006201518061114383611288565b61114c84611296565b6111569190612447565b611160919061247b565b6fffffffffffffffffffffffffffffffff169050919050565b6111fc846323b872dd60e01b85858560405160240161119a939291906124ac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112a0565b50505050565b6112838363a9059cbb60e01b84846040516024016112219291906124e3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112a0565b505050565b6000608082901c9050919050565b6000819050919050565b6000611302826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113679092919063ffffffff16565b905060008151111561136257808060200190518101906113229190612538565b611361576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611358906125d7565b60405180910390fd5b5b505050565b6060611376848460008561137f565b90509392505050565b6060824710156113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90612669565b60405180910390fd5b6113cd85611493565b61140c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611403906126d5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611435919061276f565b60006040518083038185875af1925050503d8060008114611472576040519150601f19603f3d011682016040523d82523d6000602084013e611477565b606091505b50915091506114878282866114a6565b92505050949350505050565b600080823b905060008111915050919050565b606083156114b657829050611506565b6000835111156114c95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fd91906127db565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61156d81611538565b811461157857600080fd5b50565b60008135905061158a81611564565b92915050565b6000602082840312156115a6576115a561152e565b5b60006115b48482850161157b565b91505092915050565b60008115159050919050565b6115d2816115bd565b82525050565b60006020820190506115ed60008301846115c9565b92915050565b6000819050919050565b611606816115f3565b82525050565b600060208201905061162160008301846115fd565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261164c5761164b611627565b5b8235905067ffffffffffffffff8111156116695761166861162c565b5b60208301915083602082028301111561168557611684611631565b5b9250929050565b600080602083850312156116a3576116a261152e565b5b600083013567ffffffffffffffff8111156116c1576116c0611533565b5b6116cd85828601611636565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61170e816115f3565b82525050565b60608201600082015161172a6000850182611705565b50602082015161173d6020850182611705565b5060408201516117506040850182611705565b50505050565b60006117628383611714565b60608301905092915050565b6000602082019050919050565b6000611786826116d9565b61179081856116e4565b935061179b836116f5565b8060005b838110156117cc5781516117b38882611756565b97506117be8361176e565b92505060018101905061179f565b5085935050505092915050565b600060208201905081810360008301526117f3818461177b565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611826826117fb565b9050919050565b6118368161181b565b811461184157600080fd5b50565b6000813590506118538161182d565b92915050565b6000806000604084860312156118725761187161152e565b5b600061188086828701611844565b935050602084013567ffffffffffffffff8111156118a1576118a0611533565b5b6118ad86828701611636565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006118f18383611705565b60208301905092915050565b6000602082019050919050565b6000611915826118b9565b61191f81856118c4565b935061192a836118d5565b8060005b8381101561195b57815161194288826118e5565b975061194d836118fd565b92505060018101905061192e565b5085935050505092915050565b60006020820190508181036000830152611982818461190a565b905092915050565b60008083601f8401126119a05761199f611627565b5b8235905067ffffffffffffffff8111156119bd576119bc61162c565b5b6020830191508360018202830111156119d9576119d8611631565b5b9250929050565b60008060008060008060008060a0898b031215611a00576119ff61152e565b5b6000611a0e8b828c01611844565b9850506020611a1f8b828c01611844565b975050604089013567ffffffffffffffff811115611a4057611a3f611533565b5b611a4c8b828c01611636565b9650965050606089013567ffffffffffffffff811115611a6f57611a6e611533565b5b611a7b8b828c01611636565b9450945050608089013567ffffffffffffffff811115611a9e57611a9d611533565b5b611aaa8b828c0161198a565b92509250509295985092959890939650565b611ac581611538565b82525050565b6000602082019050611ae06000830184611abc565b92915050565b611aef816115f3565b8114611afa57600080fd5b50565b600081359050611b0c81611ae6565b92915050565b60008083601f840112611b2857611b27611627565b5b8235905067ffffffffffffffff811115611b4557611b4461162c565b5b602083019150836020820283011115611b6157611b60611631565b5b9250929050565b60008060008060008060008060c0898b031215611b8857611b8761152e565b5b6000611b968b828c01611844565b9850506020611ba78b828c01611844565b9750506040611bb88b828c01611844565b9650506060611bc98b828c01611afd565b955050608089013567ffffffffffffffff811115611bea57611be9611533565b5b611bf68b828c01611b12565b945094505060a089013567ffffffffffffffff811115611c1957611c18611533565b5b611c258b828c01611b12565b92509250509295985092959890939650565b60008060008060408587031215611c5157611c5061152e565b5b600085013567ffffffffffffffff811115611c6f57611c6e611533565b5b611c7b87828801611636565b9450945050602085013567ffffffffffffffff811115611c9e57611c9d611533565b5b611caa87828801611636565b925092505092959194509250565b60008060008060008060a08789031215611cd557611cd461152e565b5b6000611ce389828a01611844565b9650506020611cf489828a01611844565b9550506040611d0589828a01611afd565b9450506060611d1689828a01611afd565b935050608087013567ffffffffffffffff811115611d3757611d36611533565b5b611d4389828a0161198a565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611dea826115f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e1d57611e1c611db0565b5b600182019050919050565b600081519050611e378161182d565b92915050565b600060208284031215611e5357611e5261152e565b5b6000611e6184828501611e28565b91505092915050565b600082825260208201905092915050565b7f44654d696e654167656e743a206f6e6c7920746f6b656e732066726f6d20637560008201527f73746f6469616e20616c6c6f7765640000000000000000000000000000000000602082015250565b6000611ed7602f83611e6a565b9150611ee282611e7b565b604082019050919050565b60006020820190508181036000830152611f0681611eca565b9050919050565b6000611f18826117fb565b9050919050565b611f2881611f0d565b8114611f3357600080fd5b50565b600081359050611f4581611f1f565b92915050565b600060208284031215611f6157611f6061152e565b5b6000611f6f84828501611f36565b91505092915050565b6000611f83826115f3565b9150611f8e836115f3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fc357611fc2611db0565b5b828201905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061202a602b83611e6a565b915061203582611fce565b604082019050919050565b600060208201905081810360008301526120598161201d565b9050919050565b6000602082840312156120765761207561152e565b5b600061208484828501611844565b91505092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006120c3601083611e6a565b91506120ce8261208d565b602082019050919050565b600060208201905081810360008301526120f2816120b6565b9050919050565b7f44654d696e654167656e743a206172726179206c656e677468206d69736d617460008201527f6368000000000000000000000000000000000000000000000000000000000000602082015250565b6000612155602283611e6a565b9150612160826120f9565b604082019050919050565b6000602082019050818103600083015261218481612148565b9050919050565b6000612196826115f3565b91506121a1836115f3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121da576121d9611db0565b5b828202905092915050565b7f44654d696e654167656e743a206e6f2073756666696369656e742062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612241602283611e6a565b915061224c826121e5565b604082019050919050565b6000602082019050818103600083015261227081612234565b9050919050565b6000612282826115f3565b915061228d836115f3565b9250828210156122a05761229f611db0565b5b828203905092915050565b6122b48161181b565b82525050565b600080fd5b82818337600083830152505050565b60006122da83856118c4565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561230d5761230c6122ba565b5b60208302925061231e8385846122bf565b82840190509392505050565b600082825260208201905092915050565b50565b600061234b60008361232a565b91506123568261233b565b600082019050919050565b600060a08201905061237660008301896122ab565b61238360208301886122ab565b81810360408301526123968186886122ce565b905081810360608301526123ab8184866122ce565b905081810360808301526123be8161233e565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612405826115f3565b9150612410836115f3565b9250826124205761241f6123cb565b5b828204905092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b60006124528261242b565b915061245d8361242b565b9250828210156124705761246f611db0565b5b828203905092915050565b60006124868261242b565b91506124918361242b565b9250826124a1576124a06123cb565b5b828204905092915050565b60006060820190506124c160008301866122ab565b6124ce60208301856122ab565b6124db60408301846115fd565b949350505050565b60006040820190506124f860008301856122ab565b61250560208301846115fd565b9392505050565b612515816115bd565b811461252057600080fd5b50565b6000815190506125328161250c565b92915050565b60006020828403121561254e5761254d61152e565b5b600061255c84828501612523565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006125c1602a83611e6a565b91506125cc82612565565b604082019050919050565b600060208201905081810360008301526125f0816125b4565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612653602683611e6a565b915061265e826125f7565b604082019050919050565b6000602082019050818103600083015261268281612646565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126bf601d83611e6a565b91506126ca82612689565b602082019050919050565b600060208201905081810360008301526126ee816126b2565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561272957808201518184015260208101905061270e565b83811115612738576000848401525b50505050565b6000612749826126f5565b6127538185612700565b935061276381856020860161270b565b80840191505092915050565b600061277b828461273e565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006127ad82612786565b6127b78185611e6a565b93506127c781856020860161270b565b6127d081612791565b840191505092915050565b600060208201905081810360008301526127f581846127a2565b90509291505056fea2646970667358221220656d4d2f026ebadcdd3418ffd61ce7fd41d4e85d17a3837071fac6f61b07f55164736f6c634300080b0033",
  "devdoc": {
    "author": "Shu Dong, Yijie Hong",
    "details": "the contract also implements IERC1155Receiver to receive and lock demine nft",
    "kind": "dev",
    "methods": {
      "redeemNFT(uint256[],uint256[])": {
        "params": {
          "amounts": "Amount of each demine nft token",
          "ids": "DeMine nft token ids to redeem"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      }
    },
    "title": "MortgageFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "redeemNFT(uint256[],uint256[])": {
        "notice": "Pay token cost and liquidize tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "withdrawAndPayoff(uint256[])": {
        "notice": "Withdraw surplus or payoff debt for NFT tokens that have been billed.         All balances of ids need to be paid off or withdrawn. Partial payoff         or withdraw is not supported."
      }
    },
    "notice": "Facet contract holding functions for miners to manage mortgage.Facet contract currently only supports weekly NFT token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2017,
        "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)3431_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155Rewardable)3890": {
        "encoding": "inplace",
        "label": "contract IERC1155Rewardable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(BillingStatement)3383_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BillingStatement)",
        "numberOfBytes": "32",
        "value": "t_struct(BillingStatement)3383_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AppStorage)3431_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 3385,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "tokenCost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3388,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "nft",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC1155Rewardable)3890"
          },
          {
            "astId": 3390,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "incomeToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3392,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "paymentToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3394,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "custodian",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3396,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "royaltyBps",
            "offset": 20,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 3398,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "royaltyCap",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3404,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "balances",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 3409,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "statements",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(BillingStatement)3383_storage)"
          },
          {
            "astId": 3412,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "chainlink",
            "offset": 0,
            "slot": "8",
            "type": "t_contract(AggregatorV3Interface)45"
          },
          {
            "astId": 3414,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "swapRouter",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 3416,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "earningTokenSaleDiscount10000Based",
            "offset": 20,
            "slot": "9",
            "type": "t_uint16"
          },
          {
            "astId": 3420,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 3424,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "strategyRegistry",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint8)"
          },
          {
            "astId": 3430,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "strategies",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_uint8,t_address))"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(BillingStatement)3383_storage": {
        "encoding": "inplace",
        "label": "struct BillingStatement",
        "members": [
          {
            "astId": 3378,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3380,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "surplus",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3382,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}