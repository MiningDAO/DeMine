{
  "address": "0x452e3208eA14A352bbE830AEabBF9A2A933a1023",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "priceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenCost",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12a64199422efbac1170e5991f948bf5ed32d28b44879730c1f2ceb8079d98e8",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0x452e3208eA14A352bbE830AEabBF9A2A933a1023",
    "transactionIndex": 16,
    "gasUsed": "736190",
    "logsBloom": "0x
    "blockHash": "0xf49d20555307e21112f848690a0f07171ec970618e0241ba6a3bcffbfcd6134e",
    "transactionHash": "0x12a64199422efbac1170e5991f948bf5ed32d28b44879730c1f2ceb8079d98e8",
    "logs": [],
    "blockNumber": 16971402,
    "cumulativeGasUsed": "5127617",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "44b9e1dbc96641abbb38e1db1b50bb97",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"priceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agent/lib/PricingStatic.sol\":\"PricingStatic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/agent/interfaces/IPricingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IPricingStrategy {\\n    function set(\\n        address owner,\\n        uint minPrice,\\n        bytes memory args\\n    ) external;\\n\\n    function priceOfBatch(\\n        address owner,\\n        uint[] memory ids\\n    ) external view returns(uint[] memory);\\n}\\n\",\"keccak256\":\"0x2696d00c9c0ec81bf9598ef710258afcb18fd832b69eb75c4590b85b3b859d42\",\"license\":\"MIT\"},\"contracts/agent/lib/PricingStatic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '../../shared/lib/Util.sol';\\nimport '../interfaces/IPricingStrategy.sol';\\nimport './PricingStaticStorage.sol';\\n\\ncontract PricingStatic is IPricingStrategy {\\n    function set(\\n        address owner,\\n        uint tokenCost,\\n        bytes memory args\\n    ) external override {\\n        PricingStaticStorage.Layout storage l = PricingStaticStorage.layout();\\n        (\\n            uint basePrice,\\n            uint[] memory ids,\\n            uint[] memory prices\\n        ) = abi.decode(args, (uint, uint[], uint[]));\\n        require(\\n            basePrice >= tokenCost,\\n            'PricingStatic: base price smaller than token cost'\\n        );\\n        l.base[owner] = basePrice;\\n        require(\\n            ids.length == prices.length,\\n            \\\"PricingStatic: array length mismatch\\\"\\n        );\\n        for (uint i = 0; i < ids.length; i++) {\\n            require(\\n                prices[i] >= tokenCost,\\n                'PricingStatic: override price smaller than token cost'\\n            );\\n            l.overrides[owner][ids[i]] = prices[i];\\n        }\\n    }\\n\\n    function priceOfBatch(\\n        address owner,\\n        uint[] memory ids\\n    ) external override view returns(uint[] memory) {\\n        PricingStaticStorage.Layout storage l = PricingStaticStorage.layout();\\n        uint base = l.base[owner];\\n        uint[] memory prices = new uint[](ids.length);\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint tokenPrice = l.overrides[owner][ids[i]];\\n            prices[i] = tokenPrice > 0 ? tokenPrice : base;\\n        }\\n        return prices;\\n    }\\n}\\n\",\"keccak256\":\"0x7e48214b53ed6601ebf411c7d45f8dc3857745702742479149e36f24bee239d1\",\"license\":\"MIT\"},\"contracts/agent/lib/PricingStaticStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nlibrary PricingStaticStorage {\\n    struct Layout {\\n        mapping(address => uint) base;\\n        mapping(address => mapping(uint => uint)) overrides;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('mining3.agent.contracts.storage.PricingStatic');\\n\\n    function layout() internal pure returns(Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe80d0725ae4910c9dc71849738bce24a22824e837d2fdf67ab5a7536a4ea4556\",\"license\":\"MIT\"},\"contracts/shared/lib/Util.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nlibrary Util {\\n    function ceil(uint a, uint m) internal pure returns(uint) {\\n        return ((a + m - 1) / m) * m;\\n    }\\n\\n    function max3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a > b ? max2(a, c) : max2(b, c);\\n    }\\n\\n    function max2(uint a, uint b) internal pure returns(uint) {\\n        return a > b ? a : b;\\n    }\\n\\n    function uint128max2(uint128 a, uint128 b) internal pure returns(uint128) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min2(uint a, uint b) internal pure returns(uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function uint128min2(uint128 a, uint128 b) internal pure returns(uint128) {\\n        return a < b ? a : b;\\n    }\\n\\n    function min3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a < b ? min2(a, c) : min2(b, c);\\n    }\\n}\\n\",\"keccak256\":\"0x193a469ef579e7ab002bdef2c4327accb3ee2293d252809ce2f478af143a7156\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c68806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634bbaaced1461003b5780635973921b1461006b575b600080fd5b6100556004803603810190610050919061062d565b610087565b6040516100629190610747565b60405180910390f35b6100856004803603810190610080919061081e565b6101f6565b005b606060006100936103ff565b905060008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000845167ffffffffffffffff8111156100f8576100f76104b4565b5b6040519080825280602002602001820160405280156101265781602001602082028036833780820191505090505b50905060005b85518110156101e95760008460010160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088848151811061018d5761018c61088d565b5b60200260200101518152602001908152602001600020549050600081116101b457836101b6565b805b8383815181106101c9576101c861088d565b5b6020026020010181815250505080806101e1906108eb565b91505061012c565b5080935050505092915050565b60006102006103ff565b905060008060008480602001905181019061021b91906109e0565b92509250925085831015610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025b90610aee565b60405180910390fd5b828460000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080518251146102ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e590610b80565b60405180910390fd5b60005b82518110156103f5578682828151811061030e5761030d61088d565b5b60200260200101511015610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610c12565b60405180910390fd5b81818151811061036a5761036961088d565b5b60200260200101518560010160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008584815181106103c8576103c761088d565b5b602002602001015181526020019081526020016000208190555080806103ed906108eb565b9150506102f1565b5050505050505050565b6000807f0393d738e65ef38556eaca9cf02df23a3044445fac512ed128468753f635556790508091505090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061046b82610440565b9050919050565b61047b81610460565b811461048657600080fd5b50565b60008135905061049881610472565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104ec826104a3565b810181811067ffffffffffffffff8211171561050b5761050a6104b4565b5b80604052505050565b600061051e61042c565b905061052a82826104e3565b919050565b600067ffffffffffffffff82111561054a576105496104b4565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61057381610560565b811461057e57600080fd5b50565b6000813590506105908161056a565b92915050565b60006105a96105a48461052f565b610514565b905080838252602082019050602084028301858111156105cc576105cb61055b565b5b835b818110156105f557806105e18882610581565b8452602084019350506020810190506105ce565b5050509392505050565b600082601f8301126106145761061361049e565b5b8135610624848260208601610596565b91505092915050565b6000806040838503121561064457610643610436565b5b600061065285828601610489565b925050602083013567ffffffffffffffff8111156106735761067261043b565b5b61067f858286016105ff565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6106be81610560565b82525050565b60006106d083836106b5565b60208301905092915050565b6000602082019050919050565b60006106f482610689565b6106fe8185610694565b9350610709836106a5565b8060005b8381101561073a57815161072188826106c4565b975061072c836106dc565b92505060018101905061070d565b5085935050505092915050565b6000602082019050818103600083015261076181846106e9565b905092915050565b600080fd5b600067ffffffffffffffff821115610789576107886104b4565b5b610792826104a3565b9050602081019050919050565b82818337600083830152505050565b60006107c16107bc8461076e565b610514565b9050828152602081018484840111156107dd576107dc610769565b5b6107e884828561079f565b509392505050565b600082601f8301126108055761080461049e565b5b81356108158482602086016107ae565b91505092915050565b60008060006060848603121561083757610836610436565b5b600061084586828701610489565b935050602061085686828701610581565b925050604084013567ffffffffffffffff8111156108775761087661043b565b5b610883868287016107f0565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f682610560565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610929576109286108bc565b5b600182019050919050565b6000815190506109438161056a565b92915050565b600061095c6109578461052f565b610514565b9050808382526020820190506020840283018581111561097f5761097e61055b565b5b835b818110156109a857806109948882610934565b845260208401935050602081019050610981565b5050509392505050565b600082601f8301126109c7576109c661049e565b5b81516109d7848260208601610949565b91505092915050565b6000806000606084860312156109f9576109f8610436565b5b6000610a0786828701610934565b935050602084015167ffffffffffffffff811115610a2857610a2761043b565b5b610a34868287016109b2565b925050604084015167ffffffffffffffff811115610a5557610a5461043b565b5b610a61868287016109b2565b9150509250925092565b600082825260208201905092915050565b7f50726963696e675374617469633a206261736520707269636520736d616c6c6560008201527f72207468616e20746f6b656e20636f7374000000000000000000000000000000602082015250565b6000610ad8603183610a6b565b9150610ae382610a7c565b604082019050919050565b60006020820190508181036000830152610b0781610acb565b9050919050565b7f50726963696e675374617469633a206172726179206c656e677468206d69736d60008201527f6174636800000000000000000000000000000000000000000000000000000000602082015250565b6000610b6a602483610a6b565b9150610b7582610b0e565b604082019050919050565b60006020820190508181036000830152610b9981610b5d565b9050919050565b7f50726963696e675374617469633a206f7665727269646520707269636520736d60008201527f616c6c6572207468616e20746f6b656e20636f73740000000000000000000000602082015250565b6000610bfc603583610a6b565b9150610c0782610ba0565b604082019050919050565b60006020820190508181036000830152610c2b81610bef565b905091905056fea264697066735822122024f1460ed7cd79476b8d432e04dcc301f4464c42672e40704cab4a5aafcaa7a364736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634bbaaced1461003b5780635973921b1461006b575b600080fd5b6100556004803603810190610050919061062d565b610087565b6040516100629190610747565b60405180910390f35b6100856004803603810190610080919061081e565b6101f6565b005b606060006100936103ff565b905060008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000845167ffffffffffffffff8111156100f8576100f76104b4565b5b6040519080825280602002602001820160405280156101265781602001602082028036833780820191505090505b50905060005b85518110156101e95760008460010160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088848151811061018d5761018c61088d565b5b60200260200101518152602001908152602001600020549050600081116101b457836101b6565b805b8383815181106101c9576101c861088d565b5b6020026020010181815250505080806101e1906108eb565b91505061012c565b5080935050505092915050565b60006102006103ff565b905060008060008480602001905181019061021b91906109e0565b92509250925085831015610264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025b90610aee565b60405180910390fd5b828460000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080518251146102ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e590610b80565b60405180910390fd5b60005b82518110156103f5578682828151811061030e5761030d61088d565b5b60200260200101511015610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610c12565b60405180910390fd5b81818151811061036a5761036961088d565b5b60200260200101518560010160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008584815181106103c8576103c761088d565b5b602002602001015181526020019081526020016000208190555080806103ed906108eb565b9150506102f1565b5050505050505050565b6000807f0393d738e65ef38556eaca9cf02df23a3044445fac512ed128468753f635556790508091505090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061046b82610440565b9050919050565b61047b81610460565b811461048657600080fd5b50565b60008135905061049881610472565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104ec826104a3565b810181811067ffffffffffffffff8211171561050b5761050a6104b4565b5b80604052505050565b600061051e61042c565b905061052a82826104e3565b919050565b600067ffffffffffffffff82111561054a576105496104b4565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61057381610560565b811461057e57600080fd5b50565b6000813590506105908161056a565b92915050565b60006105a96105a48461052f565b610514565b905080838252602082019050602084028301858111156105cc576105cb61055b565b5b835b818110156105f557806105e18882610581565b8452602084019350506020810190506105ce565b5050509392505050565b600082601f8301126106145761061361049e565b5b8135610624848260208601610596565b91505092915050565b6000806040838503121561064457610643610436565b5b600061065285828601610489565b925050602083013567ffffffffffffffff8111156106735761067261043b565b5b61067f858286016105ff565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6106be81610560565b82525050565b60006106d083836106b5565b60208301905092915050565b6000602082019050919050565b60006106f482610689565b6106fe8185610694565b9350610709836106a5565b8060005b8381101561073a57815161072188826106c4565b975061072c836106dc565b92505060018101905061070d565b5085935050505092915050565b6000602082019050818103600083015261076181846106e9565b905092915050565b600080fd5b600067ffffffffffffffff821115610789576107886104b4565b5b610792826104a3565b9050602081019050919050565b82818337600083830152505050565b60006107c16107bc8461076e565b610514565b9050828152602081018484840111156107dd576107dc610769565b5b6107e884828561079f565b509392505050565b600082601f8301126108055761080461049e565b5b81356108158482602086016107ae565b91505092915050565b60008060006060848603121561083757610836610436565b5b600061084586828701610489565b935050602061085686828701610581565b925050604084013567ffffffffffffffff8111156108775761087661043b565b5b610883868287016107f0565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108f682610560565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610929576109286108bc565b5b600182019050919050565b6000815190506109438161056a565b92915050565b600061095c6109578461052f565b610514565b9050808382526020820190506020840283018581111561097f5761097e61055b565b5b835b818110156109a857806109948882610934565b845260208401935050602081019050610981565b5050509392505050565b600082601f8301126109c7576109c661049e565b5b81516109d7848260208601610949565b91505092915050565b6000806000606084860312156109f9576109f8610436565b5b6000610a0786828701610934565b935050602084015167ffffffffffffffff811115610a2857610a2761043b565b5b610a34868287016109b2565b925050604084015167ffffffffffffffff811115610a5557610a5461043b565b5b610a61868287016109b2565b9150509250925092565b600082825260208201905092915050565b7f50726963696e675374617469633a206261736520707269636520736d616c6c6560008201527f72207468616e20746f6b656e20636f7374000000000000000000000000000000602082015250565b6000610ad8603183610a6b565b9150610ae382610a7c565b604082019050919050565b60006020820190508181036000830152610b0781610acb565b9050919050565b7f50726963696e675374617469633a206172726179206c656e677468206d69736d60008201527f6174636800000000000000000000000000000000000000000000000000000000602082015250565b6000610b6a602483610a6b565b9150610b7582610b0e565b604082019050919050565b60006020820190508181036000830152610b9981610b5d565b9050919050565b7f50726963696e675374617469633a206f7665727269646520707269636520736d60008201527f616c6c6572207468616e20746f6b656e20636f73740000000000000000000000602082015250565b6000610bfc603583610a6b565b9150610c0782610ba0565b604082019050919050565b60006020820190508181036000830152610c2b81610bef565b905091905056fea264697066735822122024f1460ed7cd79476b8d432e04dcc301f4464c42672e40704cab4a5aafcaa7a364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}