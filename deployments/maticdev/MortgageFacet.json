{
  "address": "0x0cf5EcD6091af4AAaf7a3D300C927b8f3b9C2332",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adjustDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Account",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ef48488b79d7b6e79dc5a88c2bd66786eb0f05ec5a7c4b2427273692acf6cf1",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0x0cf5EcD6091af4AAaf7a3D300C927b8f3b9C2332",
    "transactionIndex": 0,
    "gasUsed": "2519328",
    "logsBloom": "0x
    "blockHash": "0x7c1211ef49e30c526afda117a89973db79d259c10c5403bea7ee9cec7b30faec",
    "transactionHash": "0x2ef48488b79d7b6e79dc5a88c2bd66786eb0f05ec5a7c4b2427273692acf6cf1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24262511,
        "transactionHash": "0x2ef48488b79d7b6e79dc5a88c2bd66786eb0f05ec5a7c4b2427273692acf6cf1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000633da015e60f63b7de56817e9680d532aaa20016",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000059812797ecf70000000000000000000000000000000000000000000000000029479a21f1aeea0500000000000000000000000000000000000000000000056fd4fd4e6002ed43f400000000000000000000000000000000000000000000000028ee18fa59c1f30500000000000000000000000000000000000000000000056fd556cf879ada3af4",
        "logIndex": 0,
        "blockHash": "0x7c1211ef49e30c526afda117a89973db79d259c10c5403bea7ee9cec7b30faec"
      }
    ],
    "blockNumber": 24262511,
    "cumulativeGasUsed": "2519328",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b1a391ad26a855b7eca9d1bfba37e4c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adjustDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Account\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shu Dong\",\"details\":\"the contract also implements IERC1155Receiver to receive and lock demine nft\",\"kind\":\"dev\",\"methods\":{\"getAccountInfo(address)\":{\"params\":{\"account\":\"Address of account to query\"}},\"redeem(uint256[],uint256[])\":{\"params\":{\"amounts\":\"Amount of each demine nft token\",\"ids\":\"DeMine nft token ids to redeem\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}}},\"title\":\"MortgageFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adjustDeposit()\":{\"notice\":\"adjust deposit for msg sender and update account info         Ensure you have a valid start and end set for msg.sender         to prevent infinite loop\"},\"getAccountInfo(address)\":{\"notice\":\"get account info\"},\"payoff()\":{\"notice\":\"payoff debt from billing. Ensure you have a valid start and         end set for msg.sender to prevent infinite loop\"},\"redeem(uint256[],uint256[])\":{\"notice\":\"Pay token cost and liquidize tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"}},\"notice\":\"Facet contract holding functions for miners to manage mortgage.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agent/facets/MortgageFacet.sol\":\"MortgageFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x947bcb3e54346eb9721847ded4ebfa3f1ad3487fb0260ff53ce38f1445ff409e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xfac19be5f0d198ac556731a5589a4ae1c0c1622437d0b6b53b2cf3f317071acd\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x31fcdbc3c885a95d0449d9b5f20a7ef0cae2fa63bd82195995d05a7eecaa5f74\",\"license\":\"MIT\"},\"contracts/agent/facets/MortgageFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/introspection/ERC165.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol';\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport '../../shared/lib/Util.sol';\\nimport '../../shared/lib/LibPausable.sol';\\nimport '../lib/AppStorage.sol';\\nimport '../lib/BillingStorage.sol';\\n\\n/**\\n * @title MortgageFacet\\n * @author Shu Dong\\n * @notice Facet contract holding functions for miners to manage mortgage.\\n * @dev the contract also implements IERC1155Receiver to receive and lock demine nft\\n */\\ncontract MortgageFacet is\\n    PausableModifier,\\n    IERC1155Receiver,\\n    ERC165\\n{\\n    AppStorage internal s;\\n\\n    using SafeERC20 for IERC20;\\n\\n    event Redeem(address indexed, uint[], uint[]);\\n\\n    /**\\n     * @notice Pay token cost and liquidize tokens\\n     * @param ids DeMine nft token ids to redeem\\n     * @param amounts Amount of each demine nft token\\n     */\\n    function redeem(\\n        uint[] calldata ids,\\n        uint[] calldata amounts\\n    ) external whenNotPaused {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"DeMineAgent: array length mismatch\\\"\\n        );\\n        uint tokenCost = s.tokenCost;\\n        uint billing = s.billing;\\n        uint totalCost;\\n        for (uint i = 0; i < ids.length; i++) {\\n            require(ids[i] >= billing, 'DeMineAgent: token not redeemable');\\n            totalCost += tokenCost * amounts[i];\\n            uint balance = s.balances[ids[i]][msg.sender];\\n            require(balance > amounts[i], 'DeMineAgent: no sufficient balance');\\n            s.balances[ids[i]][msg.sender] = balance - amounts[i];\\n        }\\n        s.payment.safeTransferFrom(msg.sender, s.payee, totalCost);\\n        emit Redeem(msg.sender, ids, amounts);\\n        IERC1155(s.nft).safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice adjust deposit for msg sender and update account info\\n     *         Ensure you have a valid start and end set for msg.sender\\n     *         to prevent infinite loop\\n     */\\n    function adjustDeposit() external whenNotPaused {\\n        Account memory account = readAccount(msg.sender);\\n        require(account.start < s.billing, 'DeMineAgent: clear billed tokens first');\\n        require(account.maxBalance > 0, 'DeMineAgent: no need to adjust');\\n\\n        Account memory update = Account(account.start, account.end, 0);\\n        while (update.start <= update.end && s.balances[update.start][msg.sender] == 0) {\\n            update.start += 1;\\n        }\\n        while (update.end >= update.start && s.balances[update.end][msg.sender] == 0) {\\n            update.end -= 1;\\n        }\\n        if (update.start > update.end) {\\n            updateAccount(msg.sender, account, Account(type(uint).max, 0, 0));\\n        } else {\\n            for (uint id = update.start; id <= update.end; id++) {\\n                update.maxBalance = Util.max2(update.maxBalance, s.balances[id][msg.sender]);\\n            }\\n            updateAccount(msg.sender, account, update);\\n        }\\n    }\\n\\n    /**\\n     * @notice get account info\\n     * @param account Address of account to query\\n     */\\n    function getAccountInfo(address account) external view returns(Account memory) {\\n        return s.accounts[account];\\n    }\\n\\n    function balanceOfBatch(\\n        address account,\\n        uint[] calldata ids\\n    ) external view returns(uint[] memory) {\\n        uint[] memory balances = new uint[](ids.length);\\n        for (uint i = 0; i < ids.length; i++) {\\n            balances[i] = s.balances[ids[i]][account];\\n        }\\n        return balances;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0; // reject\\n    }\\n\\n    // @dev the function should only be called by mint function of DeMineNFT\\n    // @param from Must be address(0)\\n    // @param data Must be encoded address of mortagager\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(\\n            msg.sender == s.nft && from == address(0),\\n            'DeMineAgent: only minted tokens from DeMineNFT allowed'\\n        );\\n        (address mortgager) = abi.decode(data, (address));\\n        Account memory account = readAccount(mortgager);\\n        Account memory update = Account(type(uint).max, 0, 0);\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint balance = s.balances[ids[i]][mortgager] + amounts[i];\\n            s.balances[ids[i]][mortgager] = balance;\\n            update.maxBalance = Util.max2(balance, update.maxBalance);\\n            update.start = Util.min2(ids[i], update.start);\\n            update.end = Util.max2(ids[i], update.end);\\n        }\\n        mergeAccount(mortgager, account, update);\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @notice payoff debt from billing. Ensure you have a valid start and\\n     *         end set for msg.sender to prevent infinite loop\\n     */\\n    function payoff() external whenNotPaused {\\n        uint income;\\n        uint debt;\\n        Account memory account = readAccount(msg.sender);\\n        for (uint id = account.start; id < s.billing; id++) {\\n            uint balance = s.balances[id][msg.sender];\\n            if (balance > 0) {\\n                Statement memory st = s.statements[id];\\n                income += st.income * balance / st.balance;\\n                debt += Util.ceil(st.debt * balance, st.balance);\\n                s.balances[id][msg.sender] = 0;\\n            }\\n        }\\n        s.payment.safeTransferFrom(s.payee, msg.sender, debt);\\n        s.deposit += debt;\\n        s.income.safeTransfer(msg.sender, income);\\n    }\\n\\n    function readAccount(\\n        address account\\n    ) private view returns(Account memory acc) {\\n        acc = s.accounts[account];\\n        acc.start = type(uint).max - acc.start;\\n        return acc;\\n    }\\n\\n    function updateAccount(\\n        address account,\\n        Account memory current,\\n        Account memory update\\n    ) private {\\n        if (update.start > current.start) {\\n            s.accounts[account].start = type(uint).max - update.start;\\n        }\\n        if (update.end < current.end) {\\n            s.accounts[account].end = update.end;\\n        }\\n        if (update.maxBalance < current.maxBalance) {\\n            s.accounts[account].maxBalance = update.maxBalance;\\n            uint delta = (current.maxBalance - update.maxBalance) * depositBase();\\n            s.payment.safeTransfer(account, delta);\\n            s.deposit -= delta;\\n        }\\n    }\\n\\n    function mergeAccount(\\n        address account,\\n        Account memory current,\\n        Account memory update\\n    ) private {\\n        if (update.start < current.start) {\\n            s.accounts[account].start = type(uint).max - update.start;\\n            current.start = update.start;\\n        }\\n        if (update.end > current.end) {\\n            s.accounts[account].start = update.start;\\n            current.end = update.end;\\n        }\\n        if (update.maxBalance > current.maxBalance) {\\n            s.accounts[account].maxBalance = update.maxBalance;\\n            current.maxBalance = update.maxBalance;\\n            uint delta = (update.maxBalance - current.maxBalance) * depositBase();\\n            s.payment.safeTransferFrom(msg.sender, s.payee, delta);\\n            s.deposit += delta;\\n        }\\n    }\\n\\n    function depositBase() private view returns(uint) {\\n        return s.tokenCost * s.depositMultiplier;\\n    }\\n}\\n\",\"keccak256\":\"0x6e4e7423b75b0d62232fd66a3b2a1e70c10443e2e62cf2f25469d7ac119ada4e\",\"license\":\"MIT\"},\"contracts/agent/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct Account {\\n    uint start; // starting from 2**256 - 1 - start\\n    uint end;\\n    uint maxBalance;\\n}\\n\\nstruct Statement {\\n    uint balance;\\n    uint income;\\n    uint debt;\\n}\\n\\nstruct AppStorage {\\n    uint tokenCost; // cost per nft in cost token\\n\\n    IERC20 income;\\n    IERC20 payment;\\n    address nft; // DeMineNFT contract address\\n    address payee; // payee account address, could be contract\\n\\n    bool initialized;\\n    uint8 depositMultiplier; // deposit = maxBalance * tokenCost * depositMultiplier\\n    uint deposit; // total deposit in cost token\\n    uint billing; // current billing token\\n    // billing statement\\n    mapping(uint => Statement) statements;\\n    // account info\\n    mapping(address => Account) accounts;\\n    // tokenId => account => price\\n    mapping(uint => mapping(address => uint)) balances;\\n    // owner => buyer => allowance\\n    mapping(address => mapping(address => mapping(uint => uint))) allowances;\\n}\\n\",\"keccak256\":\"0x2bd995a2b93d34da87f2a303e9f51b4bebaf9e774855787fbd643eb57bf1a929\",\"license\":\"MIT\"},\"contracts/agent/lib/BillingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary BillingStorage {\\n    enum Stage{ NOT_STARTED, SALE_ONGOING }\\n\\n    struct LockedPrice {\\n        uint unitSize;\\n        uint unitPrice;\\n        uint expireAt;\\n    }\\n\\n    struct Layout {\\n        AggregatorV3Interface chainlink;\\n        address swapRouter;\\n        Stage stage;\\n        uint8 shrinkSize; // num of tokens we shrink starting from mining\\n        uint16 discount; // 10000 based\\n        uint16 saleDuration; // as second\\n        uint16 priceLockDuration; // as second\\n        uint shrinked; // latest token shrinked\\n        uint saleExpireAt; // timestamp\\n        mapping(address => LockedPrice) lockedPrices;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.agent.contracts.storage.Billing');\\n\\n    function layout() internal pure returns(Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x592f215a9b4511b0920d3b920ece945438a9015d5029dd5388a247cd411b8c61\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x18947b3b25f2912d86757e56560ee9d2d7c15bc4210e532d5de21006e90168f2\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xaf03bc9d579efb830f432cab5ba9dd61eb10015af38b7344f4ef46c42844ec59\",\"license\":\"MIT\"},\"contracts/shared/lib/Util.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary Util {\\n    function ceil(uint a, uint m) internal pure returns(uint) {\\n        return ((a + m - 1) / m) * m;\\n    }\\n\\n    function max3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a > b ? max2(a, c) : max2(b, c);\\n    }\\n\\n    function max2(uint a, uint b) internal pure returns(uint) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min2(uint a, uint b) internal pure returns(uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function min3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a < b ? min2(a, c) : min2(b, c);\\n    }\\n}\\n\",\"keccak256\":\"0x193f1007ad3b88a0004c61926889148930897c66b930fea0680af8cae124a68c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612cde806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063afd690861161005b578063afd6908614610113578063bc197c8114610143578063c7b7f88a14610173578063f23a6e611461017d57610088565b806301ffc9a71461008d5780632ca51e22146100bd5780637b510fe8146100d957806395fcd83614610109575b600080fd5b6100a760048036038101906100a2919061201d565b6101ad565b6040516100b491906124ca565b60405180910390f35b6100d760048036038101906100d29190611f7f565b6101d0565b005b6100f360048036038101906100ee9190611d77565b6106eb565b6040516101009190612662565b60405180910390f35b610111610765565b005b61012d60048036038101906101289190611f27565b610a34565b60405161013a91906124a8565b60405180910390f35b61015d60048036038101906101589190611dc9565b610bb1565b60405161016a91906124e5565b60405180910390f35b61017b610f60565b005b61019760048036038101906101929190611e95565b6112a5565b6040516101a491906124e5565b60405180910390f35b60006101c9826101bb6112b7565b6112e490919063ffffffff16565b9050919050565b6101d861134f565b60000160009054906101000a900460ff1615610229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610220906125a2565b60405180910390fd5b818190508484905014610271576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610268906125e2565b60405180910390fd5b600080600001549050600080600601549050600080600090505b8787905081101561057c57828888838181106102d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201351015610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f90612522565b60405180910390fd5b858582818110610351577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135846103639190612780565b8261036e91906126f9565b915060008060090160008a8a858181106103b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905086868381811061043f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358111610487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047e90612542565b60405180910390fd5b8686838181106104c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135816104d291906127da565b600060090160008b8b86818110610512577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610574906128d6565b91505061028b565b506105f433600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661137c909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fd63285f33fab7fc260b1b9e7ce1abbf3fc8906df5a271e6ebd3062bdca7bb29e88888888604051610640949392919061246d565b60405180910390a2600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632eb2c2d630338a8a8a8a6040518763ffffffff1660e01b81526004016106b0969594939291906123a3565b600060405180830381600087803b1580156106ca57600080fd5b505af11580156106de573d6000803e3d6000fd5b5050505050505050505050565b6106f3611c59565b600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b61076d61134f565b60000160009054906101000a900460ff16156107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b5906125a2565b60405180910390fd5b60008060006107cc33611405565b90506000816000015190505b60006006015481101561094b57600080600901600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561093757600080600701600084815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050806000015182826020015161089c9190612780565b6108a6919061274f565b866108b191906126f9565b95506108d08282604001516108c69190612780565b82600001516114b8565b856108db91906126f9565b9450600080600901600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b508080610943906128d6565b9150506107d8565b506109c3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661137c909392919063ffffffff16565b81600060050160008282546109d891906126f9565b92505081905550610a2f3384600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114f09092919063ffffffff16565b505050565b606060008383905067ffffffffffffffff811115610a7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610aa95781602001602082028036833780820191505090505b50905060005b84849050811015610ba55760006009016000868684818110610afa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610b86577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610b9d906128d6565b915050610aaf565b50809150509392505050565b60008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610c3e5750600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b610c7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7490612562565b60405180910390fd5b60008383810190610c8e9190611da0565b90506000610c9b82611405565b9050600060405180606001604052807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152602001600081526020016000815250905060005b8a8a9050811015610f3b576000898983818110610d27577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135600060090160008e8e86818110610d6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dcb91906126f9565b905080600060090160008e8e86818110610e0e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e72818460400151611576565b836040018181525050610ec88c8c84818110610eb7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135846000015161158f565b836000018181525050610f1e8c8c84818110610f0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358460200151611576565b836020018181525050508080610f33906128d6565b915050610ce1565b50610f478383836115a8565b63bc197c8160e01b935050505098975050505050505050565b610f6861134f565b60000160009054906101000a900460ff1615610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb0906125a2565b60405180910390fd5b6000610fc433611405565b9050600060060154816000015110611011576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100890612602565b60405180910390fd5b6000816040015111611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f906125c2565b60405180910390fd5b600060405180606001604052808360000151815260200183602001518152602001600081525090505b80602001518160000151111580156110ef575060008060090160008360000151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b156111135760018160000181815161110791906126f9565b91508181525050611081565b5b8060000151816020015110158015611182575060008060090160008360200151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b156111a65760018160200181815161119a91906127da565b91508181525050611114565b806020015181600001511115611202576111fd338360405180606001604052807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81526020016000815260200160008152506117dd565b6112a1565b6000816000015190505b816020015181116112945761127882604001516000600901600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611576565b826040018181525050808061128c906128d6565b91505061120c565b506112a03383836117dd565b5b5050565b60008060e01b90509695505050505050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6113ff846323b872dd60e01b85858560405160240161139d9392919061240d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119c1565b50505050565b61140d611c59565b600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905080600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6114aa91906127da565b816000018181525050919050565b60008182600184866114ca91906126f9565b6114d491906127da565b6114de919061274f565b6114e89190612780565b905092915050565b6115718363a9059cbb60e01b848460405160240161150f929190612444565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119c1565b505050565b60008183116115855781611587565b825b905092915050565b600081831061159e57816115a0565b825b905092915050565b8160000151816000015110156116405780600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6115e891906127da565b600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600001518260000181815250505b8160200151816020015111156116ad578060000151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080602001518260200181815250505b8160400151816040015111156117d8578060400151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555080604001518260400181815250506000611723611a88565b8360400151836040015161173791906127da565b6117419190612780565b90506117ba33600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661137c909392919063ffffffff16565b80600060050160008282546117cf91906126f9565b92505081905550505b505050565b8160000151816000015111156118675780600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61181d91906127da565b600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b8160200151816020015110156118c6578060200151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b8160400151816040015110156119bc578060400151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600061192e611a88565b8260400151846040015161194291906127da565b61194c9190612780565b905061199e8482600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114f09092919063ffffffff16565b80600060050160008282546119b391906127da565b92505081905550505b505050565b6000611a23826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ab39092919063ffffffff16565b9050600081511115611a835780806020019051810190611a439190611ff4565b611a82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7990612642565b60405180910390fd5b5b505050565b60008060040160159054906101000a900460ff1660ff166000800154611aae9190612780565b905090565b6060611ac28484600085611acb565b90509392505050565b606082471015611b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0790612582565b60405180910390fd5b611b1985611bdf565b611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f90612622565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b81919061238c565b60006040518083038185875af1925050503d8060008114611bbe576040519150601f19603f3d011682016040523d82523d6000602084013e611bc3565b606091505b5091509150611bd3828286611bf2565b92505050949350505050565b600080823b905060008111915050919050565b60608315611c0257829050611c52565b600083511115611c155782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c499190612500565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b600081359050611c8981612c35565b92915050565b600081359050611c9e81612c4c565b92915050565b60008083601f840112611cb657600080fd5b8235905067ffffffffffffffff811115611ccf57600080fd5b602083019150836020820283011115611ce757600080fd5b9250929050565b600081519050611cfd81612c63565b92915050565b600081359050611d1281612c7a565b92915050565b60008083601f840112611d2a57600080fd5b8235905067ffffffffffffffff811115611d4357600080fd5b602083019150836001820283011115611d5b57600080fd5b9250929050565b600081359050611d7181612c91565b92915050565b600060208284031215611d8957600080fd5b6000611d9784828501611c7a565b91505092915050565b600060208284031215611db257600080fd5b6000611dc084828501611c8f565b91505092915050565b60008060008060008060008060a0898b031215611de557600080fd5b6000611df38b828c01611c7a565b9850506020611e048b828c01611c7a565b975050604089013567ffffffffffffffff811115611e2157600080fd5b611e2d8b828c01611ca4565b9650965050606089013567ffffffffffffffff811115611e4c57600080fd5b611e588b828c01611ca4565b9450945050608089013567ffffffffffffffff811115611e7757600080fd5b611e838b828c01611d18565b92509250509295985092959890939650565b60008060008060008060a08789031215611eae57600080fd5b6000611ebc89828a01611c7a565b9650506020611ecd89828a01611c7a565b9550506040611ede89828a01611d62565b9450506060611eef89828a01611d62565b935050608087013567ffffffffffffffff811115611f0c57600080fd5b611f1889828a01611d18565b92509250509295509295509295565b600080600060408486031215611f3c57600080fd5b6000611f4a86828701611c7a565b935050602084013567ffffffffffffffff811115611f6757600080fd5b611f7386828701611ca4565b92509250509250925092565b60008060008060408587031215611f9557600080fd5b600085013567ffffffffffffffff811115611faf57600080fd5b611fbb87828801611ca4565b9450945050602085013567ffffffffffffffff811115611fda57600080fd5b611fe687828801611ca4565b925092505092959194509250565b60006020828403121561200657600080fd5b600061201484828501611cee565b91505092915050565b60006020828403121561202f57600080fd5b600061203d84828501611d03565b91505092915050565b6000612052838361236e565b60208301905092915050565b6120678161280e565b82525050565b600061207983856126bb565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156120a857600080fd5b6020830292506120b9838584612894565b82840190509392505050565b60006120d08261268d565b6120da81856126bb565b93506120e58361267d565b8060005b838110156121165781516120fd8882612046565b9750612108836126ae565b9250506001810190506120e9565b5085935050505092915050565b61212c81612832565b82525050565b61213b8161283e565b82525050565b600061214c82612698565b61215681856126dd565b93506121668185602086016128a3565b80840191505092915050565b600061217d826126a3565b61218781856126e8565b93506121978185602086016128a3565b6121a08161297d565b840191505092915050565b60006121b86021836126e8565b91506121c38261298e565b604082019050919050565b60006121db6022836126e8565b91506121e6826129dd565b604082019050919050565b60006121fe6036836126e8565b915061220982612a2c565b604082019050919050565b60006122216026836126e8565b915061222c82612a7b565b604082019050919050565b60006122446010836126e8565b915061224f82612aca565b602082019050919050565b6000612267601e836126e8565b915061227282612af3565b602082019050919050565b600061228a6022836126e8565b915061229582612b1c565b604082019050919050565b60006122ad6026836126e8565b91506122b882612b6b565b604082019050919050565b60006122d06000836126cc565b91506122db82612bba565b600082019050919050565b60006122f3601d836126e8565b91506122fe82612bbd565b602082019050919050565b6000612316602a836126e8565b915061232182612be6565b604082019050919050565b606082016000820151612342600085018261236e565b506020820151612355602085018261236e565b506040820151612368604085018261236e565b50505050565b6123778161288a565b82525050565b6123868161288a565b82525050565b60006123988284612141565b915081905092915050565b600060a0820190506123b8600083018961205e565b6123c5602083018861205e565b81810360408301526123d881868861206d565b905081810360608301526123ed81848661206d565b90508181036080830152612400816122c3565b9050979650505050505050565b6000606082019050612422600083018661205e565b61242f602083018561205e565b61243c604083018461237d565b949350505050565b6000604082019050612459600083018561205e565b612466602083018461237d565b9392505050565b6000604082019050818103600083015261248881868861206d565b9050818103602083015261249d81848661206d565b905095945050505050565b600060208201905081810360008301526124c281846120c5565b905092915050565b60006020820190506124df6000830184612123565b92915050565b60006020820190506124fa6000830184612132565b92915050565b6000602082019050818103600083015261251a8184612172565b905092915050565b6000602082019050818103600083015261253b816121ab565b9050919050565b6000602082019050818103600083015261255b816121ce565b9050919050565b6000602082019050818103600083015261257b816121f1565b9050919050565b6000602082019050818103600083015261259b81612214565b9050919050565b600060208201905081810360008301526125bb81612237565b9050919050565b600060208201905081810360008301526125db8161225a565b9050919050565b600060208201905081810360008301526125fb8161227d565b9050919050565b6000602082019050818103600083015261261b816122a0565b9050919050565b6000602082019050818103600083015261263b816122e6565b9050919050565b6000602082019050818103600083015261265b81612309565b9050919050565b6000606082019050612677600083018461232c565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006127048261288a565b915061270f8361288a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156127445761274361291f565b5b828201905092915050565b600061275a8261288a565b91506127658361288a565b9250826127755761277461294e565b5b828204905092915050565b600061278b8261288a565b91506127968361288a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156127cf576127ce61291f565b5b828202905092915050565b60006127e58261288a565b91506127f08361288a565b9250828210156128035761280261291f565b5b828203905092915050565b60006128198261286a565b9050919050565b600061282b8261286a565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156128c15780820151818401526020810190506128a6565b838111156128d0576000848401525b50505050565b60006128e18261288a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156129145761291361291f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f44654d696e654167656e743a20746f6b656e206e6f742072656465656d61626c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a206e6f2073756666696369656e742062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a206f6e6c79206d696e74656420746f6b656e732060008201527f66726f6d2044654d696e654e465420616c6c6f77656400000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f44654d696e654167656e743a206e6f206e65656420746f2061646a7573740000600082015250565b7f44654d696e654167656e743a206172726179206c656e677468206d69736d617460008201527f6368000000000000000000000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a20636c6561722062696c6c656420746f6b656e7360008201527f2066697273740000000000000000000000000000000000000000000000000000602082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b612c3e8161280e565b8114612c4957600080fd5b50565b612c5581612820565b8114612c6057600080fd5b50565b612c6c81612832565b8114612c7757600080fd5b50565b612c838161283e565b8114612c8e57600080fd5b50565b612c9a8161288a565b8114612ca557600080fd5b5056fea2646970667358221220924104649f00bb05c68fbf8f9ffbca04206129cc5d69e034914299936bb063f364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063afd690861161005b578063afd6908614610113578063bc197c8114610143578063c7b7f88a14610173578063f23a6e611461017d57610088565b806301ffc9a71461008d5780632ca51e22146100bd5780637b510fe8146100d957806395fcd83614610109575b600080fd5b6100a760048036038101906100a2919061201d565b6101ad565b6040516100b491906124ca565b60405180910390f35b6100d760048036038101906100d29190611f7f565b6101d0565b005b6100f360048036038101906100ee9190611d77565b6106eb565b6040516101009190612662565b60405180910390f35b610111610765565b005b61012d60048036038101906101289190611f27565b610a34565b60405161013a91906124a8565b60405180910390f35b61015d60048036038101906101589190611dc9565b610bb1565b60405161016a91906124e5565b60405180910390f35b61017b610f60565b005b61019760048036038101906101929190611e95565b6112a5565b6040516101a491906124e5565b60405180910390f35b60006101c9826101bb6112b7565b6112e490919063ffffffff16565b9050919050565b6101d861134f565b60000160009054906101000a900460ff1615610229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610220906125a2565b60405180910390fd5b818190508484905014610271576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610268906125e2565b60405180910390fd5b600080600001549050600080600601549050600080600090505b8787905081101561057c57828888838181106102d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201351015610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f90612522565b60405180910390fd5b858582818110610351577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135846103639190612780565b8261036e91906126f9565b915060008060090160008a8a858181106103b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905086868381811061043f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358111610487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047e90612542565b60405180910390fd5b8686838181106104c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135816104d291906127da565b600060090160008b8b86818110610512577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610574906128d6565b91505061028b565b506105f433600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661137c909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fd63285f33fab7fc260b1b9e7ce1abbf3fc8906df5a271e6ebd3062bdca7bb29e88888888604051610640949392919061246d565b60405180910390a2600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632eb2c2d630338a8a8a8a6040518763ffffffff1660e01b81526004016106b0969594939291906123a3565b600060405180830381600087803b1580156106ca57600080fd5b505af11580156106de573d6000803e3d6000fd5b5050505050505050505050565b6106f3611c59565b600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b61076d61134f565b60000160009054906101000a900460ff16156107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b5906125a2565b60405180910390fd5b60008060006107cc33611405565b90506000816000015190505b60006006015481101561094b57600080600901600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561093757600080600701600084815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050806000015182826020015161089c9190612780565b6108a6919061274f565b866108b191906126f9565b95506108d08282604001516108c69190612780565b82600001516114b8565b856108db91906126f9565b9450600080600901600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b508080610943906128d6565b9150506107d8565b506109c3600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661137c909392919063ffffffff16565b81600060050160008282546109d891906126f9565b92505081905550610a2f3384600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114f09092919063ffffffff16565b505050565b606060008383905067ffffffffffffffff811115610a7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610aa95781602001602082028036833780820191505090505b50905060005b84849050811015610ba55760006009016000868684818110610afa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610b86577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610b9d906128d6565b915050610aaf565b50809150509392505050565b60008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610c3e5750600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b610c7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7490612562565b60405180910390fd5b60008383810190610c8e9190611da0565b90506000610c9b82611405565b9050600060405180606001604052807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152602001600081526020016000815250905060005b8a8a9050811015610f3b576000898983818110610d27577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135600060090160008e8e86818110610d6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dcb91906126f9565b905080600060090160008e8e86818110610e0e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e72818460400151611576565b836040018181525050610ec88c8c84818110610eb7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135846000015161158f565b836000018181525050610f1e8c8c84818110610f0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358460200151611576565b836020018181525050508080610f33906128d6565b915050610ce1565b50610f478383836115a8565b63bc197c8160e01b935050505098975050505050505050565b610f6861134f565b60000160009054906101000a900460ff1615610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb0906125a2565b60405180910390fd5b6000610fc433611405565b9050600060060154816000015110611011576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100890612602565b60405180910390fd5b6000816040015111611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f906125c2565b60405180910390fd5b600060405180606001604052808360000151815260200183602001518152602001600081525090505b80602001518160000151111580156110ef575060008060090160008360000151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b156111135760018160000181815161110791906126f9565b91508181525050611081565b5b8060000151816020015110158015611182575060008060090160008360200151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b156111a65760018160200181815161119a91906127da565b91508181525050611114565b806020015181600001511115611202576111fd338360405180606001604052807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81526020016000815260200160008152506117dd565b6112a1565b6000816000015190505b816020015181116112945761127882604001516000600901600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611576565b826040018181525050808061128c906128d6565b91505061120c565b506112a03383836117dd565b5b5050565b60008060e01b90509695505050505050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6113ff846323b872dd60e01b85858560405160240161139d9392919061240d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119c1565b50505050565b61140d611c59565b600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905080600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6114aa91906127da565b816000018181525050919050565b60008182600184866114ca91906126f9565b6114d491906127da565b6114de919061274f565b6114e89190612780565b905092915050565b6115718363a9059cbb60e01b848460405160240161150f929190612444565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119c1565b505050565b60008183116115855781611587565b825b905092915050565b600081831061159e57816115a0565b825b905092915050565b8160000151816000015110156116405780600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6115e891906127da565b600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600001518260000181815250505b8160200151816020015111156116ad578060000151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080602001518260200181815250505b8160400151816040015111156117d8578060400151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555080604001518260400181815250506000611723611a88565b8360400151836040015161173791906127da565b6117419190612780565b90506117ba33600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661137c909392919063ffffffff16565b80600060050160008282546117cf91906126f9565b92505081905550505b505050565b8160000151816000015111156118675780600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61181d91906127da565b600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b8160200151816020015110156118c6578060200151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b8160400151816040015110156119bc578060400151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600061192e611a88565b8260400151846040015161194291906127da565b61194c9190612780565b905061199e8482600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114f09092919063ffffffff16565b80600060050160008282546119b391906127da565b92505081905550505b505050565b6000611a23826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611ab39092919063ffffffff16565b9050600081511115611a835780806020019051810190611a439190611ff4565b611a82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7990612642565b60405180910390fd5b5b505050565b60008060040160159054906101000a900460ff1660ff166000800154611aae9190612780565b905090565b6060611ac28484600085611acb565b90509392505050565b606082471015611b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0790612582565b60405180910390fd5b611b1985611bdf565b611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f90612622565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b81919061238c565b60006040518083038185875af1925050503d8060008114611bbe576040519150601f19603f3d011682016040523d82523d6000602084013e611bc3565b606091505b5091509150611bd3828286611bf2565b92505050949350505050565b600080823b905060008111915050919050565b60608315611c0257829050611c52565b600083511115611c155782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c499190612500565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b600081359050611c8981612c35565b92915050565b600081359050611c9e81612c4c565b92915050565b60008083601f840112611cb657600080fd5b8235905067ffffffffffffffff811115611ccf57600080fd5b602083019150836020820283011115611ce757600080fd5b9250929050565b600081519050611cfd81612c63565b92915050565b600081359050611d1281612c7a565b92915050565b60008083601f840112611d2a57600080fd5b8235905067ffffffffffffffff811115611d4357600080fd5b602083019150836001820283011115611d5b57600080fd5b9250929050565b600081359050611d7181612c91565b92915050565b600060208284031215611d8957600080fd5b6000611d9784828501611c7a565b91505092915050565b600060208284031215611db257600080fd5b6000611dc084828501611c8f565b91505092915050565b60008060008060008060008060a0898b031215611de557600080fd5b6000611df38b828c01611c7a565b9850506020611e048b828c01611c7a565b975050604089013567ffffffffffffffff811115611e2157600080fd5b611e2d8b828c01611ca4565b9650965050606089013567ffffffffffffffff811115611e4c57600080fd5b611e588b828c01611ca4565b9450945050608089013567ffffffffffffffff811115611e7757600080fd5b611e838b828c01611d18565b92509250509295985092959890939650565b60008060008060008060a08789031215611eae57600080fd5b6000611ebc89828a01611c7a565b9650506020611ecd89828a01611c7a565b9550506040611ede89828a01611d62565b9450506060611eef89828a01611d62565b935050608087013567ffffffffffffffff811115611f0c57600080fd5b611f1889828a01611d18565b92509250509295509295509295565b600080600060408486031215611f3c57600080fd5b6000611f4a86828701611c7a565b935050602084013567ffffffffffffffff811115611f6757600080fd5b611f7386828701611ca4565b92509250509250925092565b60008060008060408587031215611f9557600080fd5b600085013567ffffffffffffffff811115611faf57600080fd5b611fbb87828801611ca4565b9450945050602085013567ffffffffffffffff811115611fda57600080fd5b611fe687828801611ca4565b925092505092959194509250565b60006020828403121561200657600080fd5b600061201484828501611cee565b91505092915050565b60006020828403121561202f57600080fd5b600061203d84828501611d03565b91505092915050565b6000612052838361236e565b60208301905092915050565b6120678161280e565b82525050565b600061207983856126bb565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156120a857600080fd5b6020830292506120b9838584612894565b82840190509392505050565b60006120d08261268d565b6120da81856126bb565b93506120e58361267d565b8060005b838110156121165781516120fd8882612046565b9750612108836126ae565b9250506001810190506120e9565b5085935050505092915050565b61212c81612832565b82525050565b61213b8161283e565b82525050565b600061214c82612698565b61215681856126dd565b93506121668185602086016128a3565b80840191505092915050565b600061217d826126a3565b61218781856126e8565b93506121978185602086016128a3565b6121a08161297d565b840191505092915050565b60006121b86021836126e8565b91506121c38261298e565b604082019050919050565b60006121db6022836126e8565b91506121e6826129dd565b604082019050919050565b60006121fe6036836126e8565b915061220982612a2c565b604082019050919050565b60006122216026836126e8565b915061222c82612a7b565b604082019050919050565b60006122446010836126e8565b915061224f82612aca565b602082019050919050565b6000612267601e836126e8565b915061227282612af3565b602082019050919050565b600061228a6022836126e8565b915061229582612b1c565b604082019050919050565b60006122ad6026836126e8565b91506122b882612b6b565b604082019050919050565b60006122d06000836126cc565b91506122db82612bba565b600082019050919050565b60006122f3601d836126e8565b91506122fe82612bbd565b602082019050919050565b6000612316602a836126e8565b915061232182612be6565b604082019050919050565b606082016000820151612342600085018261236e565b506020820151612355602085018261236e565b506040820151612368604085018261236e565b50505050565b6123778161288a565b82525050565b6123868161288a565b82525050565b60006123988284612141565b915081905092915050565b600060a0820190506123b8600083018961205e565b6123c5602083018861205e565b81810360408301526123d881868861206d565b905081810360608301526123ed81848661206d565b90508181036080830152612400816122c3565b9050979650505050505050565b6000606082019050612422600083018661205e565b61242f602083018561205e565b61243c604083018461237d565b949350505050565b6000604082019050612459600083018561205e565b612466602083018461237d565b9392505050565b6000604082019050818103600083015261248881868861206d565b9050818103602083015261249d81848661206d565b905095945050505050565b600060208201905081810360008301526124c281846120c5565b905092915050565b60006020820190506124df6000830184612123565b92915050565b60006020820190506124fa6000830184612132565b92915050565b6000602082019050818103600083015261251a8184612172565b905092915050565b6000602082019050818103600083015261253b816121ab565b9050919050565b6000602082019050818103600083015261255b816121ce565b9050919050565b6000602082019050818103600083015261257b816121f1565b9050919050565b6000602082019050818103600083015261259b81612214565b9050919050565b600060208201905081810360008301526125bb81612237565b9050919050565b600060208201905081810360008301526125db8161225a565b9050919050565b600060208201905081810360008301526125fb8161227d565b9050919050565b6000602082019050818103600083015261261b816122a0565b9050919050565b6000602082019050818103600083015261263b816122e6565b9050919050565b6000602082019050818103600083015261265b81612309565b9050919050565b6000606082019050612677600083018461232c565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006127048261288a565b915061270f8361288a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156127445761274361291f565b5b828201905092915050565b600061275a8261288a565b91506127658361288a565b9250826127755761277461294e565b5b828204905092915050565b600061278b8261288a565b91506127968361288a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156127cf576127ce61291f565b5b828202905092915050565b60006127e58261288a565b91506127f08361288a565b9250828210156128035761280261291f565b5b828203905092915050565b60006128198261286a565b9050919050565b600061282b8261286a565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156128c15780820151818401526020810190506128a6565b838111156128d0576000848401525b50505050565b60006128e18261288a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156129145761291361291f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f44654d696e654167656e743a20746f6b656e206e6f742072656465656d61626c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a206e6f2073756666696369656e742062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a206f6e6c79206d696e74656420746f6b656e732060008201527f66726f6d2044654d696e654e465420616c6c6f77656400000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f44654d696e654167656e743a206e6f206e65656420746f2061646a7573740000600082015250565b7f44654d696e654167656e743a206172726179206c656e677468206d69736d617460008201527f6368000000000000000000000000000000000000000000000000000000000000602082015250565b7f44654d696e654167656e743a20636c6561722062696c6c656420746f6b656e7360008201527f2066697273740000000000000000000000000000000000000000000000000000602082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b612c3e8161280e565b8114612c4957600080fd5b50565b612c5581612820565b8114612c6057600080fd5b50565b612c6c81612832565b8114612c7757600080fd5b50565b612c838161283e565b8114612c8e57600080fd5b50565b612c9a8161288a565b8114612ca557600080fd5b5056fea2646970667358221220924104649f00bb05c68fbf8f9ffbca04206129cc5d69e034914299936bb063f364736f6c63430008040033",
  "devdoc": {
    "author": "Shu Dong",
    "details": "the contract also implements IERC1155Receiver to receive and lock demine nft",
    "kind": "dev",
    "methods": {
      "getAccountInfo(address)": {
        "params": {
          "account": "Address of account to query"
        }
      },
      "redeem(uint256[],uint256[])": {
        "params": {
          "amounts": "Amount of each demine nft token",
          "ids": "DeMine nft token ids to redeem"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      }
    },
    "title": "MortgageFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adjustDeposit()": {
        "notice": "adjust deposit for msg sender and update account info         Ensure you have a valid start and end set for msg.sender         to prevent infinite loop"
      },
      "getAccountInfo(address)": {
        "notice": "get account info"
      },
      "payoff()": {
        "notice": "payoff debt from billing. Ensure you have a valid start and         end set for msg.sender to prevent infinite loop"
      },
      "redeem(uint256[],uint256[])": {
        "notice": "Pay token cost and liquidize tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      }
    },
    "notice": "Facet contract holding functions for miners to manage mortgage.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7844,
        "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)9682_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)209": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Account)9630_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)9630_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Statement)9637_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Statement)",
        "numberOfBytes": "32",
        "value": "t_struct(Statement)9637_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Account)9630_storage": {
        "encoding": "inplace",
        "label": "struct Account",
        "members": [
          {
            "astId": 9625,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9627,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9629,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "maxBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AppStorage)9682_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 9639,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "tokenCost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9642,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "income",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)209"
          },
          {
            "astId": 9645,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "payment",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)209"
          },
          {
            "astId": 9647,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "nft",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 9649,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "payee",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9651,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "initialized",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 9653,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "depositMultiplier",
            "offset": 21,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 9655,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9657,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "billing",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9662,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "statements",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Statement)9637_storage)"
          },
          {
            "astId": 9667,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "accounts",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_struct(Account)9630_storage)"
          },
          {
            "astId": 9673,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "balances",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 9681,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "allowances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Statement)9637_storage": {
        "encoding": "inplace",
        "label": "struct Statement",
        "members": [
          {
            "astId": 9632,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9634,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "income",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9636,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}