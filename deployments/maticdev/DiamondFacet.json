{
  "address": "0x38d38f83A45cc6FC916cA8badd77d61006aeB89F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "diamondFacets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "name": "setFallbackAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3dd24c9303865bb3b1243889820a9e0db1c997ccdd113b06fd675d7fc719060a",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0x38d38f83A45cc6FC916cA8badd77d61006aeB89F",
    "transactionIndex": 18,
    "gasUsed": "2965613",
    "logsBloom": "0x
    "blockHash": "0x67a78f71f21f4d3f59f7e71f766c1b572111310824c745e232822ed27aa943b6",
    "transactionHash": "0x3dd24c9303865bb3b1243889820a9e0db1c997ccdd113b06fd675d7fc719060a",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 24223844,
        "transactionHash": "0x3dd24c9303865bb3b1243889820a9e0db1c997ccdd113b06fd675d7fc719060a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000633da015e60f63b7de56817e9680d532aaa20016",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000015126b296600980000000000000000000000000000000000000000000000002d26b6057b00ed7300000000000000000000000000000000000000000000054f9efaf798f98f38b50000000000000000000000000000000000000000000000002d11a39a519aecdb00000000000000000000000000000000000000000000054f9f100a0422f5394d",
        "logIndex": 62,
        "blockHash": "0x67a78f71f21f4d3f59f7e71f766c1b572111310824c745e232822ed27aa943b6"
      }
    ],
    "blockNumber": 24223844,
    "cumulativeGasUsed": "10760632",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "91f67aea1dc348227e3f6da62b6e39f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"data\":\"optional initialization call data\",\"facetCuts\":\"array of structured Diamond facet update data\",\"target\":\"optional recipient of initialization delegatecall\"}},\"facetAddress(bytes4)\":{\"params\":{\"selector\":\"function selector to query\"},\"returns\":{\"facet\":\"facet address (zero address if not found)\"}},\"facetAddresses()\":{\"returns\":{\"addresses\":\"array of facet addresses\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"facet\":\"address of facet to query\"},\"returns\":{\"selectors\":\"array of function selectors\"}},\"facets()\":{\"returns\":{\"diamondFacets\":\"array of structured facet data\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"update functions callable on Diamond proxy\"},\"facetAddress(bytes4)\":{\"notice\":\"get the address of the facet associated with given selector\"},\"facetAddresses()\":{\"notice\":\"get addresses of all facets used by diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"get all selectors for given facet address\"},\"facets()\":{\"notice\":\"get all facets and their selectors\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/facets/DiamondFacet.sol\":\"DiamondFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    using AddressUtils for address;\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    event DiamondCut(\\n        IDiamondCuttable.FacetCut[] facetCuts,\\n        address target,\\n        bytes data\\n    );\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param l storage layout\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                IDiamondCuttable.FacetCut memory facetCut = facetCuts[i];\\n                IDiamondCuttable.FacetCutAction action = facetCut.action;\\n\\n                require(\\n                    facetCut.selectors.length > 0,\\n                    'DiamondBase: no selectors specified'\\n                );\\n\\n                if (action == IDiamondCuttable.FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = l.addFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == IDiamondCuttable.FacetCutAction.REPLACE) {\\n                    l.replaceFacetSelectors(facetCut);\\n                } else if (action == IDiamondCuttable.FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = l.removeFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            initialize(target, data);\\n        }\\n    }\\n\\n    function addFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(this) ||\\n                    facetCut.target.isContract(),\\n                'DiamondBase: ADD target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    'DiamondBase: selector already added'\\n                );\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function removeFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(0),\\n                'DiamondBase: REMOVE target must be zero address'\\n            );\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function replaceFacetSelectors(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            require(\\n                facetCut.target.isContract(),\\n                'DiamondBase: REPLACE target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                require(\\n                    oldFacetAddress != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    oldFacetAddress != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                require(\\n                    oldFacetAddress != facetCut.target,\\n                    'DiamondBase: REPLACE target is identical'\\n                );\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function initialize(address target, bytes memory data) private {\\n        require(\\n            (target == address(0)) == (data.length == 0),\\n            'DiamondBase: invalid initialization parameters'\\n        );\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                require(\\n                    target.isContract(),\\n                    'DiamondBase: initialization target has no code'\\n                );\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28849abd900cb824f5a31e83a48b6d8c98cbab1b009bf28826cb6d6f82c8d94d\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondCuttable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableInternal } from '../../access/OwnableInternal.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondCuttable is IDiamondCuttable, OwnableInternal {\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external override onlyOwner {\\n        DiamondBaseStorage.layout().diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0x8b4af7f6d2eb33ceb43a8e750e1af387480228eb0cfa8f99ff02a064cfa211a9\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\nimport { IDiamondLoupe } from './IDiamondLoupe.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondLoupe is IDiamondLoupe {\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facets()\\n        external\\n        view\\n        override\\n        returns (Facet[] memory diamondFacets)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        override\\n        returns (bytes4[] memory selectors)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        override\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        override\\n        returns (address facet)\\n    {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x79d6e50faea16c1ad01ba6dd1b2505b23b911b31c6e8f6d27909fc748688187b\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondCuttable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondCuttable {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts facet addresses, actions, and function selectors\\n     * @param target initialization function target\\n     * @param data initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x891cc6eb426fc6babfccd51e4eea22796187bdd7023e725b15565a21244cacbe\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondLoupe {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        returns (address facet);\\n}\\n\",\"keccak256\":\"0x8480e0e111faaca3db5d23fb215150234174d135e4d2c4a208cda12fc6f8019a\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"contracts/shared/facets/DiamondFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/proxy/diamond/DiamondBaseStorage.sol';\\nimport '@solidstate/contracts/introspection/ERC165.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondCuttable.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondLoupe.sol';\\n\\ncontract DiamondFacet is DiamondCuttable, DiamondLoupe, ERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    function getFallbackAddress() external view returns (address) {\\n        return DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x1128ad1c9faaec740a38a562385fe898fdc3012a3f40a2670bc481ece866186b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613513806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637a0ed6271161005b5780637a0ed627146101155780639142376514610133578063adfca15e1461014f578063cdffacc61461017f57610088565b806301ffc9a71461008d5780631f931c1c146100bd5780632c408059146100d957806352ef6b2c146100f7575b600080fd5b6100a760048036038101906100a291906125f8565b6101af565b6040516100b49190612c1d565b60405180910390f35b6100d760048036038101906100d2919061256f565b6101d2565b005b6100e16102e0565b6040516100ee9190612b57565b60405180910390f35b6100ff610313565b60405161010c9190612b72565b60405180910390f35b61011d6105ed565b60405161012a9190612bfb565b60405180910390f35b61014d60048036038101906101489190612546565b610db5565b005b61016960048036038101906101649190612546565b610e9b565b6040516101769190612b94565b60405180910390f35b610199600480360381019061019491906125f8565b61110b565b6040516101a69190612b57565b60405180910390f35b60006101cb826101bd611172565b61119f90919063ffffffff16565b9050919050565b6101da61120a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026290612cd8565b60405180910390fd5b6102d985859061027b9190612fd6565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506102c9611237565b611264909392919063ffffffff16565b5050505050565b60006102ea611237565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600061031f611237565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610377577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103a55781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff168210156105e357600084600201600083815260200190815260200160002054905060005b60088110156105ce5783806103fd90613061565b9450508560010160009054906101000a900461ffff1661ffff16841115610423576105ce565b6000600582901b83901b90506000876000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b88811015610526578a81815181106104cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105135760019150610526565b808061051e90613061565b91505061048e565b508015610535575050506105bb565b818a898151811061056f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505087806105b490613061565b9850505050505b80806105c690613061565b9150506103e9565b505080806105db90613061565b9150506103ae565b5081845250505090565b606060006105f9611237565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610651577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561068a57816020015b6106776122af565b81526020019060019003908161066f5790505b50915060008160010160009054906101000a900461ffff1661ffff1667ffffffffffffffff8111156106e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107135781602001602082028036833780820191505090505b50905060008060005b8460010160009054906101000a900461ffff1661ffff16821015610cf557600085600201600083815260200190815260200160002054905060005b6008811015610ce057838061076b90613061565b9450508660010160009054906101000a900461ffff1661ffff1684111561079157610ce0565b6000600582901b83901b90506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b88811015610a4d578273ffffffffffffffffffffffffffffffffffffffff168c8281518110610854577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415610a3a57838c82815181106108b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518b83815181106108fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff168151811061093d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a82815181106109c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16106109d957600080fd5b898181518110610a12577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018051809190610a27906130aa565b60ff1660ff168152505060019150610a4d565b8080610a4590613061565b9150506107fc565b508015610a5c57505050610ccd565b818b8981518110610a96577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508960010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610b2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b585781602001602082028036833780820191505090505b508b8981518110610b92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200181905250828b8981518110610bdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151600081518110610c20577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250506001898981518110610ca7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019060ff16908160ff16815250508780610cc690613061565b9850505050505b8080610cd890613061565b915050610757565b50508080610ced90613061565b91505061071c565b5060005b82811015610daa576000848281518110610d3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff1690506000878381518110610d84577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151905081815250508080610da290613061565b915050610cf9565b508185525050505090565b610dbd61120a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4590612cd8565b60405180910390fd5b80610e57611237565b60030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610ea7611237565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610eff577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610f2d5781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff168210156110ff57600084600201600083815260200190815260200160002054905060005b60088110156110ea578380610f8590613061565b9450508560010160009054906101000a900461ffff1661ffff16841115610fab576110ea565b6000600582901b83901b9050866000016000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156110d6578088878151811061107b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505085806110d290613061565b9650505b5080806110e290613061565b915050610f71565b505080806110f790613061565b915050610f36565b50818452505050919050565b6000611115611237565b6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050919050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000807f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390508091505090565b60008460010160009054906101000a900461ffff1661ffff16905060008190506000806007831611156112ae57866002016000600384901c81526020019081526020016000205490505b60005b86518110156115275760008782815181106112f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600081602001519050600082604001515111611350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134790612c58565b60405180910390fd5b6000600281111561138a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156113c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156113ed576113e08585848d6115c8909392919063ffffffff16565b8095508196505050611518565b60016002811115611427577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816002811115611460577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561147e57611479828b6118af90919063ffffffff16565b611517565b6002808111156114b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156114f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156115165761150d8585848d611bb2909392919063ffffffff16565b80955081965050505b5b5b505080806001019150506112b1565b5082821461154f57818760010160006101000a81548161ffff021916908361ffff1602179055505b600060078316111561157a5780876002016000600385901c8152602001908152602001600020819055505b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738686866040516115ad93929190612bb6565b60405180910390a16115bf85856120dd565b50505050505050565b6000803073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614806116285750611627836000015173ffffffffffffffffffffffffffffffffffffffff1661229c565b5b611667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165e90612cb8565b60405180910390fd5b60005b83604001515181101561189f576000846040015182815181106116b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161461178a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178190612d78565b60405180910390fd5b8760001b866000015160601b6bffffffffffffffffffffffff191617896000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506000600560078a16901b905080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c19891617975060e081141561188757878a600201600060038c901c8152602001908152602001600020819055506000801b97505b8880600101995050505050808060010191505061166a565b5084849150915094509492505050565b6118d2816000015173ffffffffffffffffffffffffffffffffffffffff1661229c565b611911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190890612d58565b60405180910390fd5b60005b816040015151811015611bad57600082604001518281518110611960577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054905060008160601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3190612c38565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa090612cf8565b60405180910390fd5b846000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1390612c78565b60405180910390fd5b846000015160601b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b831617866000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050508080600101915050611914565b505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614611c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1f90612c98565b60405180910390fd5b6000600386901c9050600060078716905060005b8560400151518110156120c257600086604001518281518110611c88577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008a6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415611d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5490612c38565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415611dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc690612cf8565b60405180910390fd5b6000801b891415611e04578480600190039550508a600201600086815260200190815260200160002054985060079350611e0e565b8380600190039450505b6000806000600587901b8c901b9250847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f30578d6000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020546bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b8516178e6000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505b8d6000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560008460001c61ffff169050600381901c9250600560078216901b9150508782146120365760008e600201600084815260200190815260200160002054905081847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c827fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198216179050808f60020160008581526020019081526020016000208190555050612087565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198d16179b505b60008714156120b0578d6002016000898152602001908152602001600020600090556000801b9b505b50505050508080600101915050611c3c565b5080600383901b179650868693509350505094509492505050565b60008151141515600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151514612156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214d90612d38565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612298573073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461221c576121dc8273ffffffffffffffffffffffffffffffffffffffff1661229c565b61221b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221290612d18565b60405180910390fd5b5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516122439190612b40565b600060405180830381855af49150503d806000811461227e576040519150601f19603f3d011682016040523d82523d6000602084013e612283565b606091505b5050905080612296573d6000803e3d6000fd5b505b5050565b600080823b905060008111915050919050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60006122f26122ed84612dbd565b612d98565b9050808382526020820190508285602086028201111561231157600080fd5b60005b858110156123415781612327888261245a565b845260208401935060208301925050600181019050612314565b5050509392505050565b600061235e61235984612de9565b612d98565b9050808382526020820190508285602086028201111561237d57600080fd5b60005b858110156123c757813567ffffffffffffffff81111561239f57600080fd5b8086016123ac89826124ce565b85526020850194506020840193505050600181019050612380565b5050509392505050565b6000813590506123e08161349f565b92915050565b600082601f8301126123f757600080fd5b81356124078482602086016122df565b91505092915050565b60008083601f84011261242257600080fd5b8235905067ffffffffffffffff81111561243b57600080fd5b60208301915083602082028301111561245357600080fd5b9250929050565b600081359050612469816134b6565b92915050565b60008083601f84011261248157600080fd5b8235905067ffffffffffffffff81111561249a57600080fd5b6020830191508360018202830111156124b257600080fd5b9250929050565b6000813590506124c8816134cd565b92915050565b6000606082840312156124e057600080fd5b6124ea6060612d98565b905060006124fa848285016123d1565b600083015250602061250e848285016124b9565b602083015250604082013567ffffffffffffffff81111561252e57600080fd5b61253a848285016123e6565b60408301525092915050565b60006020828403121561255857600080fd5b6000612566848285016123d1565b91505092915050565b60008060008060006060868803121561258757600080fd5b600086013567ffffffffffffffff8111156125a157600080fd5b6125ad88828901612410565b955095505060206125c0888289016123d1565b935050604086013567ffffffffffffffff8111156125dd57600080fd5b6125e98882890161246f565b92509250509295509295909350565b60006020828403121561260a57600080fd5b60006126188482850161245a565b91505092915050565b600061262d8383612679565b60208301905092915050565b600061264583836128aa565b60208301905092915050565b600061265d8383612ab3565b905092915050565b60006126718383612b03565b905092915050565b61268281612f42565b82525050565b61269181612f42565b82525050565b60006126a282612e55565b6126ac8185612ec0565b93506126b783612e15565b8060005b838110156126e85781516126cf8882612621565b97506126da83612e8c565b9250506001810190506126bb565b5085935050505092915050565b600061270082612e60565b61270a8185612ed1565b935061271583612e25565b8060005b8381101561274657815161272d8882612639565b975061273883612e99565b925050600181019050612719565b5085935050505092915050565b600061275e82612e60565b6127688185612ee2565b935061277383612e25565b8060005b838110156127a457815161278b8882612639565b975061279683612e99565b925050600181019050612777565b5085935050505092915050565b60006127bc82612e6b565b6127c68185612ef3565b9350836020820285016127d885612e35565b8060005b8581101561281457848403895281516127f58582612651565b945061280083612ea6565b925060208a019950506001810190506127dc565b50829750879550505050505092915050565b600061283182612e76565b61283b8185612f04565b93508360208202850161284d85612e45565b8060005b85811015612889578484038952815161286a8582612665565b945061287583612eb3565b925060208a01995050600181019050612851565b50829750879550505050505092915050565b6128a481612f54565b82525050565b6128b381612f60565b82525050565b60006128c482612e81565b6128ce8185612f15565b93506128de818560208601612ffd565b6128e781613161565b840191505092915050565b60006128fd82612e81565b6129078185612f26565b9350612917818560208601612ffd565b80840191505092915050565b61292c81612feb565b82525050565b600061293f601f83612f31565b915061294a82613172565b602082019050919050565b6000612962602383612f31565b915061296d8261319b565b604082019050919050565b6000612985602883612f31565b9150612990826131ea565b604082019050919050565b60006129a8602f83612f31565b91506129b382613239565b604082019050919050565b60006129cb602383612f31565b91506129d682613288565b604082019050919050565b60006129ee601d83612f31565b91506129f9826132d7565b602082019050919050565b6000612a11602283612f31565b9150612a1c82613300565b604082019050919050565b6000612a34602e83612f31565b9150612a3f8261334f565b604082019050919050565b6000612a57602e83612f31565b9150612a628261339e565b604082019050919050565b6000612a7a602783612f31565b9150612a85826133ed565b604082019050919050565b6000612a9d602383612f31565b9150612aa88261343c565b604082019050919050565b6000606083016000830151612acb6000860182612679565b506020830151612ade6020860182612923565b5060408301518482036040860152612af682826126f5565b9150508091505092915050565b6000604083016000830151612b1b6000860182612679565b5060208301518482036020860152612b3382826126f5565b9150508091505092915050565b6000612b4c82846128f2565b915081905092915050565b6000602082019050612b6c6000830184612688565b92915050565b60006020820190508181036000830152612b8c8184612697565b905092915050565b60006020820190508181036000830152612bae8184612753565b905092915050565b60006060820190508181036000830152612bd081866127b1565b9050612bdf6020830185612688565b8181036040830152612bf181846128b9565b9050949350505050565b60006020820190508181036000830152612c158184612826565b905092915050565b6000602082019050612c32600083018461289b565b92915050565b60006020820190508181036000830152612c5181612932565b9050919050565b60006020820190508181036000830152612c7181612955565b9050919050565b60006020820190508181036000830152612c9181612978565b9050919050565b60006020820190508181036000830152612cb18161299b565b9050919050565b60006020820190508181036000830152612cd1816129be565b9050919050565b60006020820190508181036000830152612cf1816129e1565b9050919050565b60006020820190508181036000830152612d1181612a04565b9050919050565b60006020820190508181036000830152612d3181612a27565b9050919050565b60006020820190508181036000830152612d5181612a4a565b9050919050565b60006020820190508181036000830152612d7181612a6d565b9050919050565b60006020820190508181036000830152612d9181612a90565b9050919050565b6000612da2612db3565b9050612dae8282613030565b919050565b6000604051905090565b600067ffffffffffffffff821115612dd857612dd7613132565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612e0457612e03613132565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612f4d82612f9f565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050612f9a8261348b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612fe336848461234b565b905092915050565b6000612ff682612f8c565b9050919050565b60005b8381101561301b578082015181840152602081019050613000565b8381111561302a576000848401525b50505050565b61303982613161565b810181811067ffffffffffffffff8211171561305857613057613132565b5b80604052505050565b600061306c82612fbf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561309f5761309e6130d4565b5b600182019050919050565b60006130b582612fc9565b915060ff8214156130c9576130c86130d4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e6400600082015250565b7f4469616d6f6e64426173653a206e6f2073656c6563746f72732073706563696660008201527f6965640000000000000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a205245504c41434520746172676574206973206960008201527f64656e746963616c000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060008201527f6265207a65726f20616464726573730000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a204144442074617267657420686173206e6f206360008201527f6f64650000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b7f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d7574616260008201527f6c65000000000000000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760008201527f657420686173206e6f20636f6465000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460008201527f696f6e20706172616d6574657273000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a205245504c41434520746172676574206861732060008201527f6e6f20636f646500000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460008201527f6465640000000000000000000000000000000000000000000000000000000000602082015250565b6003811061349c5761349b613103565b5b50565b6134a881612f42565b81146134b357600080fd5b50565b6134bf81612f60565b81146134ca57600080fd5b50565b600381106134da57600080fd5b5056fea264697066735822122029b3f679d122dfc6d1f199ee01dc69345e7f87106df2247dca6d975b81a73fa564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80637a0ed6271161005b5780637a0ed627146101155780639142376514610133578063adfca15e1461014f578063cdffacc61461017f57610088565b806301ffc9a71461008d5780631f931c1c146100bd5780632c408059146100d957806352ef6b2c146100f7575b600080fd5b6100a760048036038101906100a291906125f8565b6101af565b6040516100b49190612c1d565b60405180910390f35b6100d760048036038101906100d2919061256f565b6101d2565b005b6100e16102e0565b6040516100ee9190612b57565b60405180910390f35b6100ff610313565b60405161010c9190612b72565b60405180910390f35b61011d6105ed565b60405161012a9190612bfb565b60405180910390f35b61014d60048036038101906101489190612546565b610db5565b005b61016960048036038101906101649190612546565b610e9b565b6040516101769190612b94565b60405180910390f35b610199600480360381019061019491906125f8565b61110b565b6040516101a69190612b57565b60405180910390f35b60006101cb826101bd611172565b61119f90919063ffffffff16565b9050919050565b6101da61120a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026290612cd8565b60405180910390fd5b6102d985859061027b9190612fd6565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506102c9611237565b611264909392919063ffffffff16565b5050505050565b60006102ea611237565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600061031f611237565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610377577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103a55781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff168210156105e357600084600201600083815260200190815260200160002054905060005b60088110156105ce5783806103fd90613061565b9450508560010160009054906101000a900461ffff1661ffff16841115610423576105ce565b6000600582901b83901b90506000876000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b88811015610526578a81815181106104cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105135760019150610526565b808061051e90613061565b91505061048e565b508015610535575050506105bb565b818a898151811061056f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505087806105b490613061565b9850505050505b80806105c690613061565b9150506103e9565b505080806105db90613061565b9150506103ae565b5081845250505090565b606060006105f9611237565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610651577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561068a57816020015b6106776122af565b81526020019060019003908161066f5790505b50915060008160010160009054906101000a900461ffff1661ffff1667ffffffffffffffff8111156106e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107135781602001602082028036833780820191505090505b50905060008060005b8460010160009054906101000a900461ffff1661ffff16821015610cf557600085600201600083815260200190815260200160002054905060005b6008811015610ce057838061076b90613061565b9450508660010160009054906101000a900461ffff1661ffff1684111561079157610ce0565b6000600582901b83901b90506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b88811015610a4d578273ffffffffffffffffffffffffffffffffffffffff168c8281518110610854577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415610a3a57838c82815181106108b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518b83815181106108fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff168151811061093d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a82815181106109c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16106109d957600080fd5b898181518110610a12577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018051809190610a27906130aa565b60ff1660ff168152505060019150610a4d565b8080610a4590613061565b9150506107fc565b508015610a5c57505050610ccd565b818b8981518110610a96577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508960010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610b2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b585781602001602082028036833780820191505090505b508b8981518110610b92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200181905250828b8981518110610bdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151600081518110610c20577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250506001898981518110610ca7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019060ff16908160ff16815250508780610cc690613061565b9850505050505b8080610cd890613061565b915050610757565b50508080610ced90613061565b91505061071c565b5060005b82811015610daa576000848281518110610d3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff1690506000878381518110610d84577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151905081815250508080610da290613061565b915050610cf9565b508185525050505090565b610dbd61120a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4590612cd8565b60405180910390fd5b80610e57611237565b60030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610ea7611237565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610eff577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610f2d5781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff168210156110ff57600084600201600083815260200190815260200160002054905060005b60088110156110ea578380610f8590613061565b9450508560010160009054906101000a900461ffff1661ffff16841115610fab576110ea565b6000600582901b83901b9050866000016000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156110d6578088878151811061107b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505085806110d290613061565b9650505b5080806110e290613061565b915050610f71565b505080806110f790613061565b915050610f36565b50818452505050919050565b6000611115611237565b6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050919050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000807f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390508091505090565b60008460010160009054906101000a900461ffff1661ffff16905060008190506000806007831611156112ae57866002016000600384901c81526020019081526020016000205490505b60005b86518110156115275760008782815181106112f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600081602001519050600082604001515111611350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134790612c58565b60405180910390fd5b6000600281111561138a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156113c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156113ed576113e08585848d6115c8909392919063ffffffff16565b8095508196505050611518565b60016002811115611427577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816002811115611460577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561147e57611479828b6118af90919063ffffffff16565b611517565b6002808111156114b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156114f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156115165761150d8585848d611bb2909392919063ffffffff16565b80955081965050505b5b5b505080806001019150506112b1565b5082821461154f57818760010160006101000a81548161ffff021916908361ffff1602179055505b600060078316111561157a5780876002016000600385901c8152602001908152602001600020819055505b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738686866040516115ad93929190612bb6565b60405180910390a16115bf85856120dd565b50505050505050565b6000803073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614806116285750611627836000015173ffffffffffffffffffffffffffffffffffffffff1661229c565b5b611667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165e90612cb8565b60405180910390fd5b60005b83604001515181101561189f576000846040015182815181106116b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161461178a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178190612d78565b60405180910390fd5b8760001b866000015160601b6bffffffffffffffffffffffff191617896000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506000600560078a16901b905080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c19891617975060e081141561188757878a600201600060038c901c8152602001908152602001600020819055506000801b97505b8880600101995050505050808060010191505061166a565b5084849150915094509492505050565b6118d2816000015173ffffffffffffffffffffffffffffffffffffffff1661229c565b611911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190890612d58565b60405180910390fd5b60005b816040015151811015611bad57600082604001518281518110611960577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054905060008160601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3190612c38565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa090612cf8565b60405180910390fd5b846000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1390612c78565b60405180910390fd5b846000015160601b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b831617866000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050508080600101915050611914565b505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614611c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1f90612c98565b60405180910390fd5b6000600386901c9050600060078716905060005b8560400151518110156120c257600086604001518281518110611c88577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008a6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415611d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5490612c38565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415611dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc690612cf8565b60405180910390fd5b6000801b891415611e04578480600190039550508a600201600086815260200190815260200160002054985060079350611e0e565b8380600190039450505b6000806000600587901b8c901b9250847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f30578d6000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020546bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b8516178e6000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505b8d6000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560008460001c61ffff169050600381901c9250600560078216901b9150508782146120365760008e600201600084815260200190815260200160002054905081847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c827fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198216179050808f60020160008581526020019081526020016000208190555050612087565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198d16179b505b60008714156120b0578d6002016000898152602001908152602001600020600090556000801b9b505b50505050508080600101915050611c3c565b5080600383901b179650868693509350505094509492505050565b60008151141515600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151514612156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214d90612d38565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612298573073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461221c576121dc8273ffffffffffffffffffffffffffffffffffffffff1661229c565b61221b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221290612d18565b60405180910390fd5b5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516122439190612b40565b600060405180830381855af49150503d806000811461227e576040519150601f19603f3d011682016040523d82523d6000602084013e612283565b606091505b5050905080612296573d6000803e3d6000fd5b505b5050565b600080823b905060008111915050919050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60006122f26122ed84612dbd565b612d98565b9050808382526020820190508285602086028201111561231157600080fd5b60005b858110156123415781612327888261245a565b845260208401935060208301925050600181019050612314565b5050509392505050565b600061235e61235984612de9565b612d98565b9050808382526020820190508285602086028201111561237d57600080fd5b60005b858110156123c757813567ffffffffffffffff81111561239f57600080fd5b8086016123ac89826124ce565b85526020850194506020840193505050600181019050612380565b5050509392505050565b6000813590506123e08161349f565b92915050565b600082601f8301126123f757600080fd5b81356124078482602086016122df565b91505092915050565b60008083601f84011261242257600080fd5b8235905067ffffffffffffffff81111561243b57600080fd5b60208301915083602082028301111561245357600080fd5b9250929050565b600081359050612469816134b6565b92915050565b60008083601f84011261248157600080fd5b8235905067ffffffffffffffff81111561249a57600080fd5b6020830191508360018202830111156124b257600080fd5b9250929050565b6000813590506124c8816134cd565b92915050565b6000606082840312156124e057600080fd5b6124ea6060612d98565b905060006124fa848285016123d1565b600083015250602061250e848285016124b9565b602083015250604082013567ffffffffffffffff81111561252e57600080fd5b61253a848285016123e6565b60408301525092915050565b60006020828403121561255857600080fd5b6000612566848285016123d1565b91505092915050565b60008060008060006060868803121561258757600080fd5b600086013567ffffffffffffffff8111156125a157600080fd5b6125ad88828901612410565b955095505060206125c0888289016123d1565b935050604086013567ffffffffffffffff8111156125dd57600080fd5b6125e98882890161246f565b92509250509295509295909350565b60006020828403121561260a57600080fd5b60006126188482850161245a565b91505092915050565b600061262d8383612679565b60208301905092915050565b600061264583836128aa565b60208301905092915050565b600061265d8383612ab3565b905092915050565b60006126718383612b03565b905092915050565b61268281612f42565b82525050565b61269181612f42565b82525050565b60006126a282612e55565b6126ac8185612ec0565b93506126b783612e15565b8060005b838110156126e85781516126cf8882612621565b97506126da83612e8c565b9250506001810190506126bb565b5085935050505092915050565b600061270082612e60565b61270a8185612ed1565b935061271583612e25565b8060005b8381101561274657815161272d8882612639565b975061273883612e99565b925050600181019050612719565b5085935050505092915050565b600061275e82612e60565b6127688185612ee2565b935061277383612e25565b8060005b838110156127a457815161278b8882612639565b975061279683612e99565b925050600181019050612777565b5085935050505092915050565b60006127bc82612e6b565b6127c68185612ef3565b9350836020820285016127d885612e35565b8060005b8581101561281457848403895281516127f58582612651565b945061280083612ea6565b925060208a019950506001810190506127dc565b50829750879550505050505092915050565b600061283182612e76565b61283b8185612f04565b93508360208202850161284d85612e45565b8060005b85811015612889578484038952815161286a8582612665565b945061287583612eb3565b925060208a01995050600181019050612851565b50829750879550505050505092915050565b6128a481612f54565b82525050565b6128b381612f60565b82525050565b60006128c482612e81565b6128ce8185612f15565b93506128de818560208601612ffd565b6128e781613161565b840191505092915050565b60006128fd82612e81565b6129078185612f26565b9350612917818560208601612ffd565b80840191505092915050565b61292c81612feb565b82525050565b600061293f601f83612f31565b915061294a82613172565b602082019050919050565b6000612962602383612f31565b915061296d8261319b565b604082019050919050565b6000612985602883612f31565b9150612990826131ea565b604082019050919050565b60006129a8602f83612f31565b91506129b382613239565b604082019050919050565b60006129cb602383612f31565b91506129d682613288565b604082019050919050565b60006129ee601d83612f31565b91506129f9826132d7565b602082019050919050565b6000612a11602283612f31565b9150612a1c82613300565b604082019050919050565b6000612a34602e83612f31565b9150612a3f8261334f565b604082019050919050565b6000612a57602e83612f31565b9150612a628261339e565b604082019050919050565b6000612a7a602783612f31565b9150612a85826133ed565b604082019050919050565b6000612a9d602383612f31565b9150612aa88261343c565b604082019050919050565b6000606083016000830151612acb6000860182612679565b506020830151612ade6020860182612923565b5060408301518482036040860152612af682826126f5565b9150508091505092915050565b6000604083016000830151612b1b6000860182612679565b5060208301518482036020860152612b3382826126f5565b9150508091505092915050565b6000612b4c82846128f2565b915081905092915050565b6000602082019050612b6c6000830184612688565b92915050565b60006020820190508181036000830152612b8c8184612697565b905092915050565b60006020820190508181036000830152612bae8184612753565b905092915050565b60006060820190508181036000830152612bd081866127b1565b9050612bdf6020830185612688565b8181036040830152612bf181846128b9565b9050949350505050565b60006020820190508181036000830152612c158184612826565b905092915050565b6000602082019050612c32600083018461289b565b92915050565b60006020820190508181036000830152612c5181612932565b9050919050565b60006020820190508181036000830152612c7181612955565b9050919050565b60006020820190508181036000830152612c9181612978565b9050919050565b60006020820190508181036000830152612cb18161299b565b9050919050565b60006020820190508181036000830152612cd1816129be565b9050919050565b60006020820190508181036000830152612cf1816129e1565b9050919050565b60006020820190508181036000830152612d1181612a04565b9050919050565b60006020820190508181036000830152612d3181612a27565b9050919050565b60006020820190508181036000830152612d5181612a4a565b9050919050565b60006020820190508181036000830152612d7181612a6d565b9050919050565b60006020820190508181036000830152612d9181612a90565b9050919050565b6000612da2612db3565b9050612dae8282613030565b919050565b6000604051905090565b600067ffffffffffffffff821115612dd857612dd7613132565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612e0457612e03613132565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612f4d82612f9f565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050612f9a8261348b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612fe336848461234b565b905092915050565b6000612ff682612f8c565b9050919050565b60005b8381101561301b578082015181840152602081019050613000565b8381111561302a576000848401525b50505050565b61303982613161565b810181811067ffffffffffffffff8211171561305857613057613132565b5b80604052505050565b600061306c82612fbf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561309f5761309e6130d4565b5b600182019050919050565b60006130b582612fc9565b915060ff8214156130c9576130c86130d4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e6400600082015250565b7f4469616d6f6e64426173653a206e6f2073656c6563746f72732073706563696660008201527f6965640000000000000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a205245504c41434520746172676574206973206960008201527f64656e746963616c000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060008201527f6265207a65726f20616464726573730000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a204144442074617267657420686173206e6f206360008201527f6f64650000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b7f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d7574616260008201527f6c65000000000000000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760008201527f657420686173206e6f20636f6465000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460008201527f696f6e20706172616d6574657273000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a205245504c41434520746172676574206861732060008201527f6e6f20636f646500000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460008201527f6465640000000000000000000000000000000000000000000000000000000000602082015250565b6003811061349c5761349b613103565b5b50565b6134a881612f42565b81146134b357600080fd5b50565b6134bf81612f60565b81146134ca57600080fd5b50565b600381106134da57600080fd5b5056fea264697066735822122029b3f679d122dfc6d1f199ee01dc69345e7f87106df2247dca6d975b81a73fa564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "data": "optional initialization call data",
          "facetCuts": "array of structured Diamond facet update data",
          "target": "optional recipient of initialization delegatecall"
        }
      },
      "facetAddress(bytes4)": {
        "params": {
          "selector": "function selector to query"
        },
        "returns": {
          "facet": "facet address (zero address if not found)"
        }
      },
      "facetAddresses()": {
        "returns": {
          "addresses": "array of facet addresses"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "facet": "address of facet to query"
        },
        "returns": {
          "selectors": "array of function selectors"
        }
      },
      "facets()": {
        "returns": {
          "diamondFacets": "array of structured facet data"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "update functions callable on Diamond proxy"
      },
      "facetAddress(bytes4)": {
        "notice": "get the address of the facet associated with given selector"
      },
      "facetAddresses()": {
        "notice": "get addresses of all facets used by diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "get all selectors for given facet address"
      },
      "facets()": {
        "notice": "get all facets and their selectors"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}