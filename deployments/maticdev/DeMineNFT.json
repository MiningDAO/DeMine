{
  "address": "0xd0CdDf6DfE39fA331A0C505e0cF07C5aBf773aB0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cloned",
          "type": "address"
        }
      ],
      "name": "Clone",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "diamondFacet",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaces",
          "type": "bytes4[]"
        },
        {
          "internalType": "address",
          "name": "income",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "diamondFacet",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaces",
          "type": "bytes4[]"
        },
        {
          "internalType": "address",
          "name": "income",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa64ec22f228298fe2caa18a979c3f5c596afc5baac8ebc42fdb5eee27e3dea19",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0xd0CdDf6DfE39fA331A0C505e0cF07C5aBf773aB0",
    "transactionIndex": 5,
    "gasUsed": "1446561",
    "logsBloom": "0x
    "blockHash": "0x7566407a7ad99bc1af017ae1cabbb6a068091746114e1e3dd8a9723d4b708248",
    "transactionHash": "0xa64ec22f228298fe2caa18a979c3f5c596afc5baac8ebc42fdb5eee27e3dea19",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 24223859,
        "transactionHash": "0xa64ec22f228298fe2caa18a979c3f5c596afc5baac8ebc42fdb5eee27e3dea19",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000633da015e60f63b7de56817e9680d532aaa20016",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a4747747f91990000000000000000000000000000000000000000000000002a05e52b807517b200000000000000000000000000000000000000000000054fa5b97f399c6ca16000000000000000000000000000000000000000000000000029fb9de40bf5861900000000000000000000000000000000000000000000054fa5c3c68110ec32f9",
        "logIndex": 13,
        "blockHash": "0x7566407a7ad99bc1af017ae1cabbb6a068091746114e1e3dd8a9723d4b708248"
      }
    ],
    "blockNumber": 24223859,
    "cumulativeGasUsed": "6676550",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "91f67aea1dc348227e3f6da62b6e39f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloned\",\"type\":\"address\"}],\"name\":\"Clone\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"diamondFacet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaces\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"income\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"diamondFacet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaces\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"income\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/DeMineNFT.sol\":\"DeMineNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x947bcb3e54346eb9721847ded4ebfa3f1ad3487fb0260ff53ce38f1445ff409e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xb0ff3f5c37c94cfa0da555a4c7d9034c46d70d0479917bed63612a9fc7092672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        require(\\n            implementation.isContract(),\\n            'Proxy: implementation must be contract'\\n        );\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0xd4c47f98fdccfbc6b9f3a76e8fc2c009a00b927533476468167197686d0518a8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Proxy } from '../Proxy.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\nimport { IDiamondLoupe } from './IDiamondLoupe.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation() internal view override returns (address) {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        address implementation = address(bytes20(l.facets[msg.sig]));\\n\\n        if (implementation == address(0)) {\\n            implementation = l.fallbackAddress;\\n            require(\\n                implementation != address(0),\\n                'DiamondBase: no facet found for function signature'\\n            );\\n        }\\n\\n        return implementation;\\n    }\\n}\\n\",\"keccak256\":\"0x9340a14b651cbf712e8483f3a8dfcb6a3254381bbaf391acb3a41088f8139aab\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    using AddressUtils for address;\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    event DiamondCut(\\n        IDiamondCuttable.FacetCut[] facetCuts,\\n        address target,\\n        bytes data\\n    );\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param l storage layout\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                IDiamondCuttable.FacetCut memory facetCut = facetCuts[i];\\n                IDiamondCuttable.FacetCutAction action = facetCut.action;\\n\\n                require(\\n                    facetCut.selectors.length > 0,\\n                    'DiamondBase: no selectors specified'\\n                );\\n\\n                if (action == IDiamondCuttable.FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = l.addFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == IDiamondCuttable.FacetCutAction.REPLACE) {\\n                    l.replaceFacetSelectors(facetCut);\\n                } else if (action == IDiamondCuttable.FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = l.removeFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            initialize(target, data);\\n        }\\n    }\\n\\n    function addFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(this) ||\\n                    facetCut.target.isContract(),\\n                'DiamondBase: ADD target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    'DiamondBase: selector already added'\\n                );\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function removeFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(0),\\n                'DiamondBase: REMOVE target must be zero address'\\n            );\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function replaceFacetSelectors(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            require(\\n                facetCut.target.isContract(),\\n                'DiamondBase: REPLACE target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                require(\\n                    oldFacetAddress != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    oldFacetAddress != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                require(\\n                    oldFacetAddress != facetCut.target,\\n                    'DiamondBase: REPLACE target is identical'\\n                );\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function initialize(address target, bytes memory data) private {\\n        require(\\n            (target == address(0)) == (data.length == 0),\\n            'DiamondBase: invalid initialization parameters'\\n        );\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                require(\\n                    target.isContract(),\\n                    'DiamondBase: initialization target has no code'\\n                );\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28849abd900cb824f5a31e83a48b6d8c98cbab1b009bf28826cb6d6f82c8d94d\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondCuttable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondCuttable {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts facet addresses, actions, and function selectors\\n     * @param target initialization function target\\n     * @param data initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x891cc6eb426fc6babfccd51e4eea22796187bdd7023e725b15565a21244cacbe\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondLoupe {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        returns (address facet);\\n}\\n\",\"keccak256\":\"0x8480e0e111faaca3db5d23fb215150234174d135e4d2c4a208cda12fc6f8019a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Metadata');\\n\\n    struct Layout {\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb01fdd26dbaf6423ff6b208fd58cfefd84dbaf9a0bebcd64f3ff7467e691c6a\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"contracts/nft/DeMineNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/proxy/diamond/IDiamondCuttable.sol';\\nimport '@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol';\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport '../shared/lib/DeMineBase.sol';\\nimport './lib/AppStorage.sol';\\n\\ncontract DeMineNFT is DeMineBase {\\n    AppStorage internal s;\\n\\n    function initialize(\\n        address diamondFacet,\\n        IDiamondCuttable.FacetCut[] calldata facetCuts,\\n        bytes4[] calldata interfaces,\\n        address income,\\n        address recipient,\\n        uint16 bps,\\n        string memory uri,\\n        address owner\\n    ) external initializer {\\n        __DeMineBase_init(diamondFacet, facetCuts, interfaces, owner);\\n        ERC1155MetadataStorage.layout().baseURI = uri;\\n        s.royalty = RoyaltyInfo(recipient, bps);\\n        s.income = IERC20(income);\\n    }\\n\\n    function create(\\n        address diamondFacet,\\n        IDiamondCuttable.FacetCut[] calldata facetCuts,\\n        bytes4[] calldata interfaces,\\n        address income,\\n        address recipient,\\n        uint16 bps,\\n        string memory uri,\\n        address owner\\n    ) external {\\n        address cloned = Clones.clone(address(this));\\n        DeMineNFT(payable(cloned)).initialize(\\n            diamondFacet, facetCuts, interfaces, income, recipient, bps, uri, owner\\n        );\\n        emit Clone(address(this), cloned);\\n    }\\n}\\n\",\"keccak256\":\"0x6164e66b791dc862be85d408531f5e8cc8975013cc125a1e780225ba668b1022\",\"license\":\"MIT\"},\"contracts/nft/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nstruct Token {\\n    uint supply;\\n    uint income;\\n}\\n\\nstruct RoyaltyInfo {\\n    address recipient;\\n    uint16 bps;\\n}\\n\\nstruct AppStorage {\\n    IERC20 income;\\n    uint mining;\\n    mapping(uint => Token) tokens;\\n    RoyaltyInfo royalty;\\n}\\n\",\"keccak256\":\"0x494f66f44b8127507d835afe9f3086c8bd0333ab14c5543eb698423327028671\",\"license\":\"MIT\"},\"contracts/shared/lib/DeMineBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/introspection/ERC165Storage.sol';\\nimport '@solidstate/contracts/access/OwnableStorage.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondBase.sol';\\nimport './LibInitializable.sol';\\n\\nabstract contract DeMineBase is DiamondBase, Initializable {\\n    event Clone(address indexed from, address indexed cloned);\\n\\n    using ERC165Storage for ERC165Storage.Layout;\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    function __DeMineBase_init(\\n        address diamond,\\n        IDiamondCuttable.FacetCut[] calldata facetCuts,\\n        bytes4[] calldata interfaces,\\n        address owner\\n    ) internal onlyInitializing {\\n        // set owner to ensure delegate call works\\n        OwnableStorage.layout().setOwner(msg.sender);\\n        (bool success, bytes memory returndata) = diamond.delegatecall(\\n            abi.encodeWithSelector(\\n                IDiamondCuttable.diamondCut.selector,\\n                facetCuts,\\n                address(0),\\n                \\\"\\\"\\n            )\\n        );\\n        require(success, string(returndata));\\n\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n        for (uint i; i < interfaces.length; i++) {\\n            erc165.setSupportedInterface(interfaces[i], true);\\n        }\\n        // set the new owner after initialization\\n        OwnableStorage.layout().setOwner(owner);\\n    }\\n\\n    receive() external payable { }\\n}\\n\",\"keccak256\":\"0x42ff134aed1339654e80c24ecb828a8317df029240a8f1455a34c09a8bafe2b5\",\"license\":\"MIT\"},\"contracts/shared/lib/LibInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@solidstate/contracts/utils/AddressUtils.sol';\\n\\n/**\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary InitializableStorage {\\n    struct Layout {\\n        bool initialized;\\n        bool initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.contracts.storage.Initializable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    modifier initializer() {\\n        InitializableStorage.Layout storage l = InitializableStorage.layout();\\n        require(\\n            l.initializing ? isConstructor() : !l.initialized,\\n            'Initializable: contract is already initialized'\\n        );\\n        bool isTopLevelCall = !l.initializing;\\n        if (isTopLevelCall) {\\n            l.initializing = true;\\n            l.initialized = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            l.initializing = false;\\n        }\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(\\n            InitializableStorage.layout().initializing,\\n            'Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    function isConstructor() private view returns (bool) {\\n        return !AddressUtils.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x384138ec1fe56d4554347d34245c2d30986470c7166fbf858bcd8aee9025dd55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061002d5760003560e01c806345faf773146100c45780636d53b128146100ed57610034565b3661003457005b600061003e610116565b905061005f8173ffffffffffffffffffffffffffffffffffffffff16610295565b61009e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610095906112e6565b60405180910390fd5b3660008037600080366000845af43d6000803e80600081146100bf573d6000f35b3d6000fd5b3480156100d057600080fd5b506100eb60048036038101906100e69190610cb7565b6102a8565b005b3480156100f957600080fd5b50610114600480360381019061010f9190610cb7565b610399565b005b60008060007f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939050809150600082600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561028c578260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561028b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610282906112c6565b60405180910390fd5b5b80935050505090565b600080823b905060008111915050919050565b60006102b3306105b7565b90508073ffffffffffffffffffffffffffffffffffffffff16636d53b1288c8c8c8c8c8c8c8c8c8c6040518b63ffffffff1660e01b81526004016103009a99989796959493929190611168565b600060405180830381600087803b15801561031a57600080fd5b505af115801561032e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fb557324045551eafb0789d69d5679a7017a31840124b2220df4b81dea45ec08360405160405180910390a35050505050505050505050565b60006103a361068c565b90508060000160019054906101000a900460ff166103d3578060000160009054906101000a900460ff16156103dc565b6103db6106b9565b5b61041b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610412906112a6565b60405180910390fd5b60008160000160019054906101000a900460ff1615905080156104735760018260000160016101000a81548160ff02191690831515021790555060018260000160006101000a81548160ff0219169083151502179055505b6104818c8c8c8c8c886106ca565b8361048a61091d565b60000190805190602001906104a0929190610ac4565b5060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018661ffff16815250600060030160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548161ffff021916908361ffff160217905550905050866000800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156105a95760008260000160016101000a81548160ff0219169083151502179055505b505050505050505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90611286565b60405180910390fd5b919050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b60006106c430610295565b15905090565b6106d261068c565b60000160019054906101000a900460ff16610722576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071990611306565b60405180910390fd5b61073c3361072e61094a565b61097790919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff16631f931c1c60e01b88886000604051602401610774939291906111ff565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107de9190611151565b600060405180830381855af49150503d8060008114610819576040519150601f19603f3d011682016040523d82523d6000602084013e61081e565b606091505b5091509150818190610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d9190611244565b60405180910390fd5b5060006108716109be565b905060005b868690508110156108f7576108e48787838181106108bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108d29190610dba565b6001846109eb9092919063ffffffff16565b80806108ef9061160f565b915050610876565b506109128461090461094a565b61097790919063ffffffff16565b505050505050505050565b6000807f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f490508091505090565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b63ffffffff60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415610a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4b90611266565b60405180910390fd5b80836000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b828054610ad0906115ac565b90600052602060002090601f016020900481019282610af25760008555610b39565b82601f10610b0b57805160ff1916838001178555610b39565b82800160010185558215610b39579182015b82811115610b38578251825591602001919060010190610b1d565b5b509050610b469190610b4a565b5090565b5b80821115610b63576000816000905550600101610b4b565b5090565b6000610b7a610b758461134b565b611326565b905082815260208101848484011115610b9257600080fd5b610b9d84828561156a565b509392505050565b600081359050610bb4816118ca565b92915050565b60008083601f840112610bcc57600080fd5b8235905067ffffffffffffffff811115610be557600080fd5b602083019150836020820283011115610bfd57600080fd5b9250929050565b60008083601f840112610c1657600080fd5b8235905067ffffffffffffffff811115610c2f57600080fd5b602083019150836020820283011115610c4757600080fd5b9250929050565b600081359050610c5d816118e1565b92915050565b600081359050610c72816118f8565b92915050565b600082601f830112610c8957600080fd5b8135610c99848260208601610b67565b91505092915050565b600081359050610cb181611908565b92915050565b6000806000806000806000806000806101008b8d031215610cd757600080fd5b6000610ce58d828e01610ba5565b9a505060208b013567ffffffffffffffff811115610d0257600080fd5b610d0e8d828e01610c04565b995099505060408b013567ffffffffffffffff811115610d2d57600080fd5b610d398d828e01610bba565b97509750506060610d4c8d828e01610ba5565b9550506080610d5d8d828e01610ba5565b94505060a0610d6e8d828e01610ca2565b93505060c08b013567ffffffffffffffff811115610d8b57600080fd5b610d978d828e01610c78565b92505060e0610da88d828e01610ba5565b9150509295989b9194979a5092959850565b600060208284031215610dcc57600080fd5b6000610dda84828501610c4e565b91505092915050565b6000610def8383610f5b565b60208301905092915050565b6000610e0783836110d8565b905092915050565b610e18816114cf565b82525050565b610e27816114cf565b82525050565b6000610e3983856113c0565b9350610e448261137c565b8060005b85811015610e7d57610e5a828461147d565b610e648882610de3565b9750610e6f836113a6565b925050600181019050610e48565b5085925050509392505050565b6000610e9683856113d1565b9350610ea18261137c565b8060005b85811015610eda57610eb7828461147d565b610ec18882610de3565b9750610ecc836113a6565b925050600181019050610ea5565b5085925050509392505050565b6000610ef383856113e2565b935083602084028501610f0584611386565b8060005b87811015610f49578484038952610f2082846114ab565b610f2a8582610dfb565b9450610f35836113b3565b925060208a01995050600181019050610f09565b50829750879450505050509392505050565b610f64816114e1565b82525050565b6000610f7582611390565b610f7f81856113f3565b9350610f8f818560208601611579565b80840191505092915050565b610fa481611558565b82525050565b6000610fb58261139b565b610fbf81856113fe565b9350610fcf818560208601611579565b610fd881611714565b840191505092915050565b6000610ff0601c836113fe565b9150610ffb82611725565b602082019050919050565b60006110136016836113fe565b915061101e8261174e565b602082019050919050565b6000611036602e836113fe565b915061104182611777565b604082019050919050565b60006110596032836113fe565b9150611064826117c6565b604082019050919050565b600061107c6000836113fe565b915061108782611815565b600082019050919050565b600061109f6026836113fe565b91506110aa82611818565b604082019050919050565b60006110c2602b836113fe565b91506110cd82611867565b604082019050919050565b6000606083016110eb600084018461140f565b6110f86000860182610e0f565b506111066020840184611494565b6111136020860182610f9b565b506111216040840184611426565b8583036040870152611134838284610e2d565b925050508091505092915050565b61114b81611520565b82525050565b600061115d8284610f6a565b915081905092915050565b60006101008201905061117e600083018d610e1e565b8181036020830152611191818b8d610ee7565b905081810360408301526111a681898b610e8a565b90506111b56060830188610e1e565b6111c26080830187610e1e565b6111cf60a0830186611142565b81810360c08301526111e18185610faa565b90506111f060e0830184610e1e565b9b9a5050505050505050505050565b6000606082019050818103600083015261121a818587610ee7565b90506112296020830184610e1e565b818103604083015261123a8161106f565b9050949350505050565b6000602082019050818103600083015261125e8184610faa565b905092915050565b6000602082019050818103600083015261127f81610fe3565b9050919050565b6000602082019050818103600083015261129f81611006565b9050919050565b600060208201905081810360008301526112bf81611029565b9050919050565b600060208201905081810360008301526112df8161104c565b9050919050565b600060208201905081810360008301526112ff81611092565b9050919050565b6000602082019050818103600083015261131f816110b5565b9050919050565b6000611330611341565b905061133c82826115de565b919050565b6000604051905090565b600067ffffffffffffffff821115611366576113656116e5565b5b61136f82611714565b9050602081019050919050565b6000819050919050565b6000819050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061141e6020840184610ba5565b905092915050565b6000808335600160200384360303811261143f57600080fd5b83810192508235915060208301925067ffffffffffffffff82111561146357600080fd5b60208202360384131561147557600080fd5b509250929050565b600061148c6020840184610c4e565b905092915050565b60006114a36020840184610c63565b905092915050565b6000823560016060038336030381126114c357600080fd5b82810191505092915050565b60006114da8261152e565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061151b826118b6565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115638261150d565b9050919050565b82818337600083830152505050565b60005b8381101561159757808201518184015260208101905061157c565b838111156115a6576000848401525b50505050565b600060028204905060018216806115c457607f821691505b602082108114156115d8576115d76116b6565b5b50919050565b6115e782611714565b810181811067ffffffffffffffff82111715611606576116056116e5565b5b80604052505050565b600061161a8261154e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561164d5761164c611658565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433136353a20696e76616c696420696e7465726661636520696400000000600082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a206e6f20666163657420666f756e6420666f722060008201527f66756e6374696f6e207369676e61747572650000000000000000000000000000602082015250565b50565b7f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600381106118c7576118c6611687565b5b50565b6118d3816114cf565b81146118de57600080fd5b50565b6118ea816114e1565b81146118f557600080fd5b50565b6003811061190557600080fd5b50565b61191181611520565b811461191c57600080fd5b5056fea26469706673582212200976dc294ccbcffccea92c6e4728e41bbbf1ffbeb868b48cd354cf1bbefdea3764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10119,
        "contract": "contracts/nft/DeMineNFT.sol:DeMineNFT",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)10983_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)209": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Token)10964_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)10964_storage"
      },
      "t_struct(AppStorage)10983_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 10972,
            "contract": "contracts/nft/DeMineNFT.sol:DeMineNFT",
            "label": "income",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)209"
          },
          {
            "astId": 10974,
            "contract": "contracts/nft/DeMineNFT.sol:DeMineNFT",
            "label": "mining",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10979,
            "contract": "contracts/nft/DeMineNFT.sol:DeMineNFT",
            "label": "tokens",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(Token)10964_storage)"
          },
          {
            "astId": 10982,
            "contract": "contracts/nft/DeMineNFT.sol:DeMineNFT",
            "label": "royalty",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(RoyaltyInfo)10969_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoyaltyInfo)10969_storage": {
        "encoding": "inplace",
        "label": "struct RoyaltyInfo",
        "members": [
          {
            "astId": 10966,
            "contract": "contracts/nft/DeMineNFT.sol:DeMineNFT",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10968,
            "contract": "contracts/nft/DeMineNFT.sol:DeMineNFT",
            "label": "bps",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Token)10964_storage": {
        "encoding": "inplace",
        "label": "struct Token",
        "members": [
          {
            "astId": 10961,
            "contract": "contracts/nft/DeMineNFT.sol:DeMineNFT",
            "label": "supply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10963,
            "contract": "contracts/nft/DeMineNFT.sol:DeMineNFT",
            "label": "income",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}