{
  "address": "0xB9942aFE15a45900FEc923bB991Bb88dE9BDA306",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "diamondFacets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "name": "setFallbackAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x94c277fd8de38e3d6a4ffe0b2a313125da3fd63e569bcc72f54924c9831e6961",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0xB9942aFE15a45900FEc923bB991Bb88dE9BDA306",
    "transactionIndex": 27,
    "gasUsed": "2868186",
    "logsBloom": "0x
    "blockHash": "0x6676f6be322f733da183c2c251bf2057d90363ea64e558f4313655e5098e32f3",
    "transactionHash": "0x94c277fd8de38e3d6a4ffe0b2a313125da3fd63e569bcc72f54924c9831e6961",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 24172322,
        "transactionHash": "0x94c277fd8de38e3d6a4ffe0b2a313125da3fd63e569bcc72f54924c9831e6961",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000633da015e60f63b7de56817e9680d532aaa20016",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001ed9d04b5e67ff80000000000000000000000000000000000000000000000019d1ce600ed323356000000000000000000000000000000000000000000008a68c7c8beb55d1888320000000000000000000000000000000000000000000000019b2f48fc374bb35e000000000000000000000000000000000000000000008a68c9b65bba12ff082a",
        "logIndex": 130,
        "blockHash": "0x6676f6be322f733da183c2c251bf2057d90363ea64e558f4313655e5098e32f3"
      }
    ],
    "blockNumber": 24172322,
    "cumulativeGasUsed": "7938309",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b1a391ad26a855b7eca9d1bfba37e4c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"data\":\"optional initialization call data\",\"facetCuts\":\"array of structured Diamond facet update data\",\"target\":\"optional recipient of initialization delegatecall\"}},\"facetAddress(bytes4)\":{\"params\":{\"selector\":\"function selector to query\"},\"returns\":{\"facet\":\"facet address (zero address if not found)\"}},\"facetAddresses()\":{\"returns\":{\"addresses\":\"array of facet addresses\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"facet\":\"address of facet to query\"},\"returns\":{\"selectors\":\"array of function selectors\"}},\"facets()\":{\"returns\":{\"diamondFacets\":\"array of structured facet data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"update functions callable on Diamond proxy\"},\"facetAddress(bytes4)\":{\"notice\":\"get the address of the facet associated with given selector\"},\"facetAddresses()\":{\"notice\":\"get addresses of all facets used by diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"get all selectors for given facet address\"},\"facets()\":{\"notice\":\"get all facets and their selectors\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/facets/DiamondFacet.sol\":\"DiamondFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    using AddressUtils for address;\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    event DiamondCut(\\n        IDiamondCuttable.FacetCut[] facetCuts,\\n        address target,\\n        bytes data\\n    );\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param l storage layout\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                IDiamondCuttable.FacetCut memory facetCut = facetCuts[i];\\n                IDiamondCuttable.FacetCutAction action = facetCut.action;\\n\\n                require(\\n                    facetCut.selectors.length > 0,\\n                    'DiamondBase: no selectors specified'\\n                );\\n\\n                if (action == IDiamondCuttable.FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = l.addFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == IDiamondCuttable.FacetCutAction.REPLACE) {\\n                    l.replaceFacetSelectors(facetCut);\\n                } else if (action == IDiamondCuttable.FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = l.removeFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            initialize(target, data);\\n        }\\n    }\\n\\n    function addFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(this) ||\\n                    facetCut.target.isContract(),\\n                'DiamondBase: ADD target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    'DiamondBase: selector already added'\\n                );\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function removeFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(0),\\n                'DiamondBase: REMOVE target must be zero address'\\n            );\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function replaceFacetSelectors(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            require(\\n                facetCut.target.isContract(),\\n                'DiamondBase: REPLACE target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                require(\\n                    oldFacetAddress != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    oldFacetAddress != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                require(\\n                    oldFacetAddress != facetCut.target,\\n                    'DiamondBase: REPLACE target is identical'\\n                );\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function initialize(address target, bytes memory data) private {\\n        require(\\n            (target == address(0)) == (data.length == 0),\\n            'DiamondBase: invalid initialization parameters'\\n        );\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                require(\\n                    target.isContract(),\\n                    'DiamondBase: initialization target has no code'\\n                );\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28849abd900cb824f5a31e83a48b6d8c98cbab1b009bf28826cb6d6f82c8d94d\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondCuttable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableInternal } from '../../access/OwnableInternal.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondCuttable is IDiamondCuttable, OwnableInternal {\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external override onlyOwner {\\n        DiamondBaseStorage.layout().diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0x8b4af7f6d2eb33ceb43a8e750e1af387480228eb0cfa8f99ff02a064cfa211a9\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\nimport { IDiamondLoupe } from './IDiamondLoupe.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondLoupe is IDiamondLoupe {\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facets()\\n        external\\n        view\\n        override\\n        returns (Facet[] memory diamondFacets)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        override\\n        returns (bytes4[] memory selectors)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        override\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        override\\n        returns (address facet)\\n    {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x79d6e50faea16c1ad01ba6dd1b2505b23b911b31c6e8f6d27909fc748688187b\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondCuttable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondCuttable {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts facet addresses, actions, and function selectors\\n     * @param target initialization function target\\n     * @param data initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x891cc6eb426fc6babfccd51e4eea22796187bdd7023e725b15565a21244cacbe\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondLoupe {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        returns (address facet);\\n}\\n\",\"keccak256\":\"0x8480e0e111faaca3db5d23fb215150234174d135e4d2c4a208cda12fc6f8019a\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"contracts/shared/facets/DiamondFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/proxy/diamond/DiamondCuttable.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondLoupe.sol';\\n\\ncontract DiamondFacet is DiamondCuttable, DiamondLoupe {\\n    function getFallbackAddress() external view returns (address) {\\n        return DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    function setFallbackAddress(address fallbackAddress) external {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xeff415b3768fef012256b0b5f6ac6058cd3c7bd3bbcb04104446916c872bf285\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061334e806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a0ed6271161005b5780637a0ed627146100da57806391423765146100f8578063adfca15e14610114578063cdffacc6146101445761007d565b80631f931c1c146100825780632c4080591461009e57806352ef6b2c146100bc575b600080fd5b61009c600480360381019061009791906123e0565b610174565b005b6100a6610282565b6040516100b391906129b9565b60405180910390f35b6100c46102b5565b6040516100d191906129d4565b60405180910390f35b6100e261058f565b6040516100ef9190612a5d565b60405180910390f35b610112600480360381019061010d91906123b7565b610d57565b005b61012e600480360381019061012991906123b7565b610da4565b60405161013b91906129f6565b60405180910390f35b61015e60048036038101906101599190612469565b611014565b60405161016b91906129b9565b60405180910390f35b61017c61107b565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020490612b1f565b60405180910390fd5b61027b85859061021d9190612e11565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061026b6110a8565b6110d5909392919063ffffffff16565b5050505050565b600061028c6110a8565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060006102c16110a8565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610319577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103475781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff1682101561058557600084600201600083815260200190815260200160002054905060005b600881101561057057838061039f90612e9c565b9450508560010160009054906101000a900461ffff1661ffff168411156103c557610570565b6000600582901b83901b90506000876000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b888110156104c8578a8181518110610471577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104b557600191506104c8565b80806104c090612e9c565b915050610430565b5080156104d75750505061055d565b818a8981518110610511577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050878061055690612e9c565b9850505050505b808061056890612e9c565b91505061038b565b5050808061057d90612e9c565b915050610350565b5081845250505090565b6060600061059b6110a8565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff8111156105f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561062c57816020015b610619612120565b8152602001906001900390816106115790505b50915060008160010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610687577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156106b55781602001602082028036833780820191505090505b50905060008060005b8460010160009054906101000a900461ffff1661ffff16821015610c9757600085600201600083815260200190815260200160002054905060005b6008811015610c8257838061070d90612e9c565b9450508660010160009054906101000a900461ffff1661ffff1684111561073357610c82565b6000600582901b83901b90506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b888110156109ef578273ffffffffffffffffffffffffffffffffffffffff168c82815181106107f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156109dc57838c8281518110610858577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518b838151811061089d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815181106108df577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a8281518110610966577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff161061097b57600080fd5b8981815181106109b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010180518091906109c990612ee5565b60ff1660ff1681525050600191506109ef565b80806109e790612e9c565b91505061079e565b5080156109fe57505050610c6f565b818b8981518110610a38577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508960010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610acc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610afa5781602001602082028036833780820191505090505b508b8981518110610b34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200181905250828b8981518110610b7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151600081518110610bc2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250506001898981518110610c49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019060ff16908160ff16815250508780610c6890612e9c565b9850505050505b8080610c7a90612e9c565b9150506106f9565b50508080610c8f90612e9c565b9150506106be565b5060005b82811015610d4c576000848281518110610cde577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff1690506000878381518110610d26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151905081815250508080610d4490612e9c565b915050610c9b565b508185525050505090565b80610d606110a8565b60030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610db06110a8565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610e08577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e365781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff1682101561100857600084600201600083815260200190815260200160002054905060005b6008811015610ff3578380610e8e90612e9c565b9450508560010160009054906101000a900461ffff1661ffff16841115610eb457610ff3565b6000600582901b83901b9050866000016000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610fdf5780888781518110610f84577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250508580610fdb90612e9c565b9650505b508080610feb90612e9c565b915050610e7a565b5050808061100090612e9c565b915050610e3f565b50818452505050919050565b600061101e6110a8565b6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050919050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000807f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390508091505090565b60008460010160009054906101000a900461ffff1661ffff169050600081905060008060078316111561111f57866002016000600384901c81526020019081526020016000205490505b60005b8651811015611398576000878281518110611166577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000816020015190506000826040015151116111c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b890612a9f565b60405180910390fd5b600060028111156111fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816002811115611234577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561125e576112518585848d611439909392919063ffffffff16565b8095508196505050611389565b60016002811115611298577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156112d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156112ef576112ea828b61172090919063ffffffff16565b611388565b600280811115611328577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816002811115611361577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156113875761137e8585848d611a23909392919063ffffffff16565b80955081965050505b5b5b50508080600101915050611122565b508282146113c057818760010160006101000a81548161ffff021916908361ffff1602179055505b60006007831611156113eb5780876002016000600385901c8152602001908152602001600020819055505b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67386868660405161141e93929190612a18565b60405180910390a16114308585611f4e565b50505050505050565b6000803073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614806114995750611498836000015173ffffffffffffffffffffffffffffffffffffffff1661210d565b5b6114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cf90612aff565b60405180910390fd5b60005b83604001515181101561171057600084604001518281518110611527577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff16146115fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f290612bbf565b60405180910390fd5b8760001b866000015160601b6bffffffffffffffffffffffff191617896000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506000600560078a16901b905080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c19891617975060e08114156116f857878a600201600060038c901c8152602001908152602001600020819055506000801b97505b888060010199505050505080806001019150506114db565b5084849150915094509492505050565b611743816000015173ffffffffffffffffffffffffffffffffffffffff1661210d565b611782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177990612b9f565b60405180910390fd5b60005b816040015151811015611a1e576000826040015182815181106117d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054905060008160601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a290612a7f565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561191a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191190612b3f565b60405180910390fd5b846000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561198d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198490612abf565b60405180910390fd5b846000015160601b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b831617866000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050508080600101915050611785565b505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9090612adf565b60405180910390fd5b6000600386901c9050600060078716905060005b856040015151811015611f3357600086604001518281518110611af9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008a6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc590612a7f565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415611c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3790612b3f565b60405180910390fd5b6000801b891415611c75578480600190039550508a600201600086815260200190815260200160002054985060079350611c7f565b8380600190039450505b6000806000600587901b8c901b9250847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611da1578d6000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020546bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b8516178e6000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505b8d6000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560008460001c61ffff169050600381901c9250600560078216901b915050878214611ea75760008e600201600084815260200190815260200160002054905081847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c827fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198216179050808f60020160008581526020019081526020016000208190555050611ef8565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198d16179b505b6000871415611f21578d6002016000898152602001908152602001600020600090556000801b9b505b50505050508080600101915050611aad565b5080600383901b179650868693509350505094509492505050565b60008151141515600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151514611fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbe90612b7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612109573073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461208d5761204d8273ffffffffffffffffffffffffffffffffffffffff1661210d565b61208c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208390612b5f565b60405180910390fd5b5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516120b491906129a2565b600060405180830381855af49150503d80600081146120ef576040519150601f19603f3d011682016040523d82523d6000602084013e6120f4565b606091505b5050905080612107573d6000803e3d6000fd5b505b5050565b600080823b905060008111915050919050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600061216361215e84612c04565b612bdf565b9050808382526020820190508285602086028201111561218257600080fd5b60005b858110156121b2578161219888826122cb565b845260208401935060208301925050600181019050612185565b5050509392505050565b60006121cf6121ca84612c30565b612bdf565b905080838252602082019050828560208602820111156121ee57600080fd5b60005b8581101561223857813567ffffffffffffffff81111561221057600080fd5b80860161221d898261233f565b855260208501945060208401935050506001810190506121f1565b5050509392505050565b600081359050612251816132da565b92915050565b600082601f83011261226857600080fd5b8135612278848260208601612150565b91505092915050565b60008083601f84011261229357600080fd5b8235905067ffffffffffffffff8111156122ac57600080fd5b6020830191508360208202830111156122c457600080fd5b9250929050565b6000813590506122da816132f1565b92915050565b60008083601f8401126122f257600080fd5b8235905067ffffffffffffffff81111561230b57600080fd5b60208301915083600182028301111561232357600080fd5b9250929050565b60008135905061233981613308565b92915050565b60006060828403121561235157600080fd5b61235b6060612bdf565b9050600061236b84828501612242565b600083015250602061237f8482850161232a565b602083015250604082013567ffffffffffffffff81111561239f57600080fd5b6123ab84828501612257565b60408301525092915050565b6000602082840312156123c957600080fd5b60006123d784828501612242565b91505092915050565b6000806000806000606086880312156123f857600080fd5b600086013567ffffffffffffffff81111561241257600080fd5b61241e88828901612281565b9550955050602061243188828901612242565b935050604086013567ffffffffffffffff81111561244e57600080fd5b61245a888289016122e0565b92509250509295509295909350565b60006020828403121561247b57600080fd5b6000612489848285016122cb565b91505092915050565b600061249e83836124ea565b60208301905092915050565b60006124b6838361270c565b60208301905092915050565b60006124ce8383612915565b905092915050565b60006124e28383612965565b905092915050565b6124f381612d89565b82525050565b61250281612d89565b82525050565b600061251382612c9c565b61251d8185612d07565b935061252883612c5c565b8060005b838110156125595781516125408882612492565b975061254b83612cd3565b92505060018101905061252c565b5085935050505092915050565b600061257182612ca7565b61257b8185612d18565b935061258683612c6c565b8060005b838110156125b757815161259e88826124aa565b97506125a983612ce0565b92505060018101905061258a565b5085935050505092915050565b60006125cf82612ca7565b6125d98185612d29565b93506125e483612c6c565b8060005b838110156126155781516125fc88826124aa565b975061260783612ce0565b9250506001810190506125e8565b5085935050505092915050565b600061262d82612cb2565b6126378185612d3a565b93508360208202850161264985612c7c565b8060005b85811015612685578484038952815161266685826124c2565b945061267183612ced565b925060208a0199505060018101905061264d565b50829750879550505050505092915050565b60006126a282612cbd565b6126ac8185612d4b565b9350836020820285016126be85612c8c565b8060005b858110156126fa57848403895281516126db85826124d6565b94506126e683612cfa565b925060208a019950506001810190506126c2565b50829750879550505050505092915050565b61271581612d9b565b82525050565b600061272682612cc8565b6127308185612d5c565b9350612740818560208601612e38565b61274981612f9c565b840191505092915050565b600061275f82612cc8565b6127698185612d6d565b9350612779818560208601612e38565b80840191505092915050565b61278e81612e26565b82525050565b60006127a1601f83612d78565b91506127ac82612fad565b602082019050919050565b60006127c4602383612d78565b91506127cf82612fd6565b604082019050919050565b60006127e7602883612d78565b91506127f282613025565b604082019050919050565b600061280a602f83612d78565b915061281582613074565b604082019050919050565b600061282d602383612d78565b9150612838826130c3565b604082019050919050565b6000612850601d83612d78565b915061285b82613112565b602082019050919050565b6000612873602283612d78565b915061287e8261313b565b604082019050919050565b6000612896602e83612d78565b91506128a18261318a565b604082019050919050565b60006128b9602e83612d78565b91506128c4826131d9565b604082019050919050565b60006128dc602783612d78565b91506128e782613228565b604082019050919050565b60006128ff602383612d78565b915061290a82613277565b604082019050919050565b600060608301600083015161292d60008601826124ea565b5060208301516129406020860182612785565b50604083015184820360408601526129588282612566565b9150508091505092915050565b600060408301600083015161297d60008601826124ea565b50602083015184820360208601526129958282612566565b9150508091505092915050565b60006129ae8284612754565b915081905092915050565b60006020820190506129ce60008301846124f9565b92915050565b600060208201905081810360008301526129ee8184612508565b905092915050565b60006020820190508181036000830152612a1081846125c4565b905092915050565b60006060820190508181036000830152612a328186612622565b9050612a4160208301856124f9565b8181036040830152612a53818461271b565b9050949350505050565b60006020820190508181036000830152612a778184612697565b905092915050565b60006020820190508181036000830152612a9881612794565b9050919050565b60006020820190508181036000830152612ab8816127b7565b9050919050565b60006020820190508181036000830152612ad8816127da565b9050919050565b60006020820190508181036000830152612af8816127fd565b9050919050565b60006020820190508181036000830152612b1881612820565b9050919050565b60006020820190508181036000830152612b3881612843565b9050919050565b60006020820190508181036000830152612b5881612866565b9050919050565b60006020820190508181036000830152612b7881612889565b9050919050565b60006020820190508181036000830152612b98816128ac565b9050919050565b60006020820190508181036000830152612bb8816128cf565b9050919050565b60006020820190508181036000830152612bd8816128f2565b9050919050565b6000612be9612bfa565b9050612bf58282612e6b565b919050565b6000604051905090565b600067ffffffffffffffff821115612c1f57612c1e612f6d565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612c4b57612c4a612f6d565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612d9482612dda565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050612dd5826132c6565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612e1e3684846121bc565b905092915050565b6000612e3182612dc7565b9050919050565b60005b83811015612e56578082015181840152602081019050612e3b565b83811115612e65576000848401525b50505050565b612e7482612f9c565b810181811067ffffffffffffffff82111715612e9357612e92612f6d565b5b80604052505050565b6000612ea782612dfa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612eda57612ed9612f0f565b5b600182019050919050565b6000612ef082612e04565b915060ff821415612f0457612f03612f0f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e6400600082015250565b7f4469616d6f6e64426173653a206e6f2073656c6563746f72732073706563696660008201527f6965640000000000000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a205245504c41434520746172676574206973206960008201527f64656e746963616c000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060008201527f6265207a65726f20616464726573730000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a204144442074617267657420686173206e6f206360008201527f6f64650000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b7f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d7574616260008201527f6c65000000000000000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760008201527f657420686173206e6f20636f6465000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460008201527f696f6e20706172616d6574657273000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a205245504c41434520746172676574206861732060008201527f6e6f20636f646500000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460008201527f6465640000000000000000000000000000000000000000000000000000000000602082015250565b600381106132d7576132d6612f3e565b5b50565b6132e381612d89565b81146132ee57600080fd5b50565b6132fa81612d9b565b811461330557600080fd5b50565b6003811061331557600080fd5b5056fea264697066735822122047b09fc8a039dbd7888ea5f3a16867bb3d0f87fef50b8a089bb546dcd344fb5264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a0ed6271161005b5780637a0ed627146100da57806391423765146100f8578063adfca15e14610114578063cdffacc6146101445761007d565b80631f931c1c146100825780632c4080591461009e57806352ef6b2c146100bc575b600080fd5b61009c600480360381019061009791906123e0565b610174565b005b6100a6610282565b6040516100b391906129b9565b60405180910390f35b6100c46102b5565b6040516100d191906129d4565b60405180910390f35b6100e261058f565b6040516100ef9190612a5d565b60405180910390f35b610112600480360381019061010d91906123b7565b610d57565b005b61012e600480360381019061012991906123b7565b610da4565b60405161013b91906129f6565b60405180910390f35b61015e60048036038101906101599190612469565b611014565b60405161016b91906129b9565b60405180910390f35b61017c61107b565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020490612b1f565b60405180910390fd5b61027b85859061021d9190612e11565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061026b6110a8565b6110d5909392919063ffffffff16565b5050505050565b600061028c6110a8565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060006102c16110a8565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610319577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103475781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff1682101561058557600084600201600083815260200190815260200160002054905060005b600881101561057057838061039f90612e9c565b9450508560010160009054906101000a900461ffff1661ffff168411156103c557610570565b6000600582901b83901b90506000876000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b888110156104c8578a8181518110610471577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104b557600191506104c8565b80806104c090612e9c565b915050610430565b5080156104d75750505061055d565b818a8981518110610511577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050878061055690612e9c565b9850505050505b808061056890612e9c565b91505061038b565b5050808061057d90612e9c565b915050610350565b5081845250505090565b6060600061059b6110a8565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff8111156105f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561062c57816020015b610619612120565b8152602001906001900390816106115790505b50915060008160010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610687577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156106b55781602001602082028036833780820191505090505b50905060008060005b8460010160009054906101000a900461ffff1661ffff16821015610c9757600085600201600083815260200190815260200160002054905060005b6008811015610c8257838061070d90612e9c565b9450508660010160009054906101000a900461ffff1661ffff1684111561073357610c82565b6000600582901b83901b90506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b888110156109ef578273ffffffffffffffffffffffffffffffffffffffff168c82815181106107f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156109dc57838c8281518110610858577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518b838151811061089d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff16815181106108df577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a8281518110610966577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff161061097b57600080fd5b8981815181106109b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010180518091906109c990612ee5565b60ff1660ff1681525050600191506109ef565b80806109e790612e9c565b91505061079e565b5080156109fe57505050610c6f565b818b8981518110610a38577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508960010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610acc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610afa5781602001602082028036833780820191505090505b508b8981518110610b34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200181905250828b8981518110610b7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151600081518110610bc2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250506001898981518110610c49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019060ff16908160ff16815250508780610c6890612e9c565b9850505050505b8080610c7a90612e9c565b9150506106f9565b50508080610c8f90612e9c565b9150506106be565b5060005b82811015610d4c576000848281518110610cde577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160ff1690506000878381518110610d26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151905081815250508080610d4490612e9c565b915050610c9b565b508185525050505090565b80610d606110a8565b60030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610db06110a8565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610e08577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e365781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff1682101561100857600084600201600083815260200190815260200160002054905060005b6008811015610ff3578380610e8e90612e9c565b9450508560010160009054906101000a900461ffff1661ffff16841115610eb457610ff3565b6000600582901b83901b9050866000016000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610fdf5780888781518110610f84577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250508580610fdb90612e9c565b9650505b508080610feb90612e9c565b915050610e7a565b5050808061100090612e9c565b915050610e3f565b50818452505050919050565b600061101e6110a8565b6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050919050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000807f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390508091505090565b60008460010160009054906101000a900461ffff1661ffff169050600081905060008060078316111561111f57866002016000600384901c81526020019081526020016000205490505b60005b8651811015611398576000878281518110611166577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000816020015190506000826040015151116111c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b890612a9f565b60405180910390fd5b600060028111156111fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816002811115611234577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561125e576112518585848d611439909392919063ffffffff16565b8095508196505050611389565b60016002811115611298577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156112d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156112ef576112ea828b61172090919063ffffffff16565b611388565b600280811115611328577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816002811115611361577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156113875761137e8585848d611a23909392919063ffffffff16565b80955081965050505b5b5b50508080600101915050611122565b508282146113c057818760010160006101000a81548161ffff021916908361ffff1602179055505b60006007831611156113eb5780876002016000600385901c8152602001908152602001600020819055505b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67386868660405161141e93929190612a18565b60405180910390a16114308585611f4e565b50505050505050565b6000803073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614806114995750611498836000015173ffffffffffffffffffffffffffffffffffffffff1661210d565b5b6114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cf90612aff565b60405180910390fd5b60005b83604001515181101561171057600084604001518281518110611527577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff16146115fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f290612bbf565b60405180910390fd5b8760001b866000015160601b6bffffffffffffffffffffffff191617896000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506000600560078a16901b905080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c19891617975060e08114156116f857878a600201600060038c901c8152602001908152602001600020819055506000801b97505b888060010199505050505080806001019150506114db565b5084849150915094509492505050565b611743816000015173ffffffffffffffffffffffffffffffffffffffff1661210d565b611782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177990612b9f565b60405180910390fd5b60005b816040015151811015611a1e576000826040015182815181106117d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054905060008160601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a290612a7f565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561191a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191190612b3f565b60405180910390fd5b846000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561198d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198490612abf565b60405180910390fd5b846000015160601b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b831617866000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050508080600101915050611785565b505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9090612adf565b60405180910390fd5b6000600386901c9050600060078716905060005b856040015151811015611f3357600086604001518281518110611af9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008a6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc590612a7f565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415611c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3790612b3f565b60405180910390fd5b6000801b891415611c75578480600190039550508a600201600086815260200190815260200160002054985060079350611c7f565b8380600190039450505b6000806000600587901b8c901b9250847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611da1578d6000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020546bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b8516178e6000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505b8d6000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560008460001c61ffff169050600381901c9250600560078216901b915050878214611ea75760008e600201600084815260200190815260200160002054905081847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c827fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198216179050808f60020160008581526020019081526020016000208190555050611ef8565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198d16179b505b6000871415611f21578d6002016000898152602001908152602001600020600090556000801b9b505b50505050508080600101915050611aad565b5080600383901b179650868693509350505094509492505050565b60008151141515600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151514611fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbe90612b7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612109573073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461208d5761204d8273ffffffffffffffffffffffffffffffffffffffff1661210d565b61208c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208390612b5f565b60405180910390fd5b5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516120b491906129a2565b600060405180830381855af49150503d80600081146120ef576040519150601f19603f3d011682016040523d82523d6000602084013e6120f4565b606091505b5050905080612107573d6000803e3d6000fd5b505b5050565b600080823b905060008111915050919050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600061216361215e84612c04565b612bdf565b9050808382526020820190508285602086028201111561218257600080fd5b60005b858110156121b2578161219888826122cb565b845260208401935060208301925050600181019050612185565b5050509392505050565b60006121cf6121ca84612c30565b612bdf565b905080838252602082019050828560208602820111156121ee57600080fd5b60005b8581101561223857813567ffffffffffffffff81111561221057600080fd5b80860161221d898261233f565b855260208501945060208401935050506001810190506121f1565b5050509392505050565b600081359050612251816132da565b92915050565b600082601f83011261226857600080fd5b8135612278848260208601612150565b91505092915050565b60008083601f84011261229357600080fd5b8235905067ffffffffffffffff8111156122ac57600080fd5b6020830191508360208202830111156122c457600080fd5b9250929050565b6000813590506122da816132f1565b92915050565b60008083601f8401126122f257600080fd5b8235905067ffffffffffffffff81111561230b57600080fd5b60208301915083600182028301111561232357600080fd5b9250929050565b60008135905061233981613308565b92915050565b60006060828403121561235157600080fd5b61235b6060612bdf565b9050600061236b84828501612242565b600083015250602061237f8482850161232a565b602083015250604082013567ffffffffffffffff81111561239f57600080fd5b6123ab84828501612257565b60408301525092915050565b6000602082840312156123c957600080fd5b60006123d784828501612242565b91505092915050565b6000806000806000606086880312156123f857600080fd5b600086013567ffffffffffffffff81111561241257600080fd5b61241e88828901612281565b9550955050602061243188828901612242565b935050604086013567ffffffffffffffff81111561244e57600080fd5b61245a888289016122e0565b92509250509295509295909350565b60006020828403121561247b57600080fd5b6000612489848285016122cb565b91505092915050565b600061249e83836124ea565b60208301905092915050565b60006124b6838361270c565b60208301905092915050565b60006124ce8383612915565b905092915050565b60006124e28383612965565b905092915050565b6124f381612d89565b82525050565b61250281612d89565b82525050565b600061251382612c9c565b61251d8185612d07565b935061252883612c5c565b8060005b838110156125595781516125408882612492565b975061254b83612cd3565b92505060018101905061252c565b5085935050505092915050565b600061257182612ca7565b61257b8185612d18565b935061258683612c6c565b8060005b838110156125b757815161259e88826124aa565b97506125a983612ce0565b92505060018101905061258a565b5085935050505092915050565b60006125cf82612ca7565b6125d98185612d29565b93506125e483612c6c565b8060005b838110156126155781516125fc88826124aa565b975061260783612ce0565b9250506001810190506125e8565b5085935050505092915050565b600061262d82612cb2565b6126378185612d3a565b93508360208202850161264985612c7c565b8060005b85811015612685578484038952815161266685826124c2565b945061267183612ced565b925060208a0199505060018101905061264d565b50829750879550505050505092915050565b60006126a282612cbd565b6126ac8185612d4b565b9350836020820285016126be85612c8c565b8060005b858110156126fa57848403895281516126db85826124d6565b94506126e683612cfa565b925060208a019950506001810190506126c2565b50829750879550505050505092915050565b61271581612d9b565b82525050565b600061272682612cc8565b6127308185612d5c565b9350612740818560208601612e38565b61274981612f9c565b840191505092915050565b600061275f82612cc8565b6127698185612d6d565b9350612779818560208601612e38565b80840191505092915050565b61278e81612e26565b82525050565b60006127a1601f83612d78565b91506127ac82612fad565b602082019050919050565b60006127c4602383612d78565b91506127cf82612fd6565b604082019050919050565b60006127e7602883612d78565b91506127f282613025565b604082019050919050565b600061280a602f83612d78565b915061281582613074565b604082019050919050565b600061282d602383612d78565b9150612838826130c3565b604082019050919050565b6000612850601d83612d78565b915061285b82613112565b602082019050919050565b6000612873602283612d78565b915061287e8261313b565b604082019050919050565b6000612896602e83612d78565b91506128a18261318a565b604082019050919050565b60006128b9602e83612d78565b91506128c4826131d9565b604082019050919050565b60006128dc602783612d78565b91506128e782613228565b604082019050919050565b60006128ff602383612d78565b915061290a82613277565b604082019050919050565b600060608301600083015161292d60008601826124ea565b5060208301516129406020860182612785565b50604083015184820360408601526129588282612566565b9150508091505092915050565b600060408301600083015161297d60008601826124ea565b50602083015184820360208601526129958282612566565b9150508091505092915050565b60006129ae8284612754565b915081905092915050565b60006020820190506129ce60008301846124f9565b92915050565b600060208201905081810360008301526129ee8184612508565b905092915050565b60006020820190508181036000830152612a1081846125c4565b905092915050565b60006060820190508181036000830152612a328186612622565b9050612a4160208301856124f9565b8181036040830152612a53818461271b565b9050949350505050565b60006020820190508181036000830152612a778184612697565b905092915050565b60006020820190508181036000830152612a9881612794565b9050919050565b60006020820190508181036000830152612ab8816127b7565b9050919050565b60006020820190508181036000830152612ad8816127da565b9050919050565b60006020820190508181036000830152612af8816127fd565b9050919050565b60006020820190508181036000830152612b1881612820565b9050919050565b60006020820190508181036000830152612b3881612843565b9050919050565b60006020820190508181036000830152612b5881612866565b9050919050565b60006020820190508181036000830152612b7881612889565b9050919050565b60006020820190508181036000830152612b98816128ac565b9050919050565b60006020820190508181036000830152612bb8816128cf565b9050919050565b60006020820190508181036000830152612bd8816128f2565b9050919050565b6000612be9612bfa565b9050612bf58282612e6b565b919050565b6000604051905090565b600067ffffffffffffffff821115612c1f57612c1e612f6d565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612c4b57612c4a612f6d565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612d9482612dda565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050612dd5826132c6565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612e1e3684846121bc565b905092915050565b6000612e3182612dc7565b9050919050565b60005b83811015612e56578082015181840152602081019050612e3b565b83811115612e65576000848401525b50505050565b612e7482612f9c565b810181811067ffffffffffffffff82111715612e9357612e92612f6d565b5b80604052505050565b6000612ea782612dfa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612eda57612ed9612f0f565b5b600182019050919050565b6000612ef082612e04565b915060ff821415612f0457612f03612f0f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e6400600082015250565b7f4469616d6f6e64426173653a206e6f2073656c6563746f72732073706563696660008201527f6965640000000000000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a205245504c41434520746172676574206973206960008201527f64656e746963616c000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060008201527f6265207a65726f20616464726573730000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a204144442074617267657420686173206e6f206360008201527f6f64650000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b7f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d7574616260008201527f6c65000000000000000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760008201527f657420686173206e6f20636f6465000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460008201527f696f6e20706172616d6574657273000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a205245504c41434520746172676574206861732060008201527f6e6f20636f646500000000000000000000000000000000000000000000000000602082015250565b7f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460008201527f6465640000000000000000000000000000000000000000000000000000000000602082015250565b600381106132d7576132d6612f3e565b5b50565b6132e381612d89565b81146132ee57600080fd5b50565b6132fa81612d9b565b811461330557600080fd5b50565b6003811061331557600080fd5b5056fea264697066735822122047b09fc8a039dbd7888ea5f3a16867bb3d0f87fef50b8a089bb546dcd344fb5264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "data": "optional initialization call data",
          "facetCuts": "array of structured Diamond facet update data",
          "target": "optional recipient of initialization delegatecall"
        }
      },
      "facetAddress(bytes4)": {
        "params": {
          "selector": "function selector to query"
        },
        "returns": {
          "facet": "facet address (zero address if not found)"
        }
      },
      "facetAddresses()": {
        "returns": {
          "addresses": "array of facet addresses"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "facet": "address of facet to query"
        },
        "returns": {
          "selectors": "array of function selectors"
        }
      },
      "facets()": {
        "returns": {
          "diamondFacets": "array of structured facet data"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "update functions callable on Diamond proxy"
      },
      "facetAddress(bytes4)": {
        "notice": "get the address of the facet associated with given selector"
      },
      "facetAddresses()": {
        "notice": "get addresses of all facets used by diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "get all selectors for given facet address"
      },
      "facets()": {
        "notice": "get all facets and their selectors"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}