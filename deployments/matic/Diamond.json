{
  "address": "0xc7C7C774aAFAbCd67498DA94Bf5EAAcb5536Bf54",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cloned",
          "type": "address"
        }
      ],
      "name": "Clone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "interfaces",
              "type": "bytes4[]"
            },
            {
              "internalType": "address",
              "name": "fallbackAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Diamond.InitArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCuttable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCuttable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "diamondFacets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "interfaces",
              "type": "bytes4[]"
            },
            {
              "internalType": "address",
              "name": "fallbackAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Diamond.InitArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nomineeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fallbackAddr",
          "type": "address"
        }
      ],
      "name": "setFallbackAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "setSupportedInterface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe1ba7e6ae491cf0929a89bb6aa06dc16e11941d5691696327316d0f91cc5c8af",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0xc7C7C774aAFAbCd67498DA94Bf5EAAcb5536Bf54",
    "transactionIndex": 37,
    "gasUsed": "4194570",
    "logsBloom": "0x
    "blockHash": "0x80ccf89d70c085ee3ea89a666a704189da43f2b328052d2857337f657dfdac36",
    "transactionHash": "0xe1ba7e6ae491cf0929a89bb6aa06dc16e11941d5691696327316d0f91cc5c8af",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 25520389,
        "transactionHash": "0xe1ba7e6ae491cf0929a89bb6aa06dc16e11941d5691696327316d0f91cc5c8af",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a4b368e3a9d49ff15b58f70fb976724a98b6d149",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001f4b5f4eeb9106a00000000000000000000000000000000000000000000000086fe7ff87f687860000000000000000000000000000000000000000000014442ae992a827ee30fcc0000000000000000000000000000000000000000000000008509ca0390af67f6000000000000000000000000000000000000000000014442b08de0776d9c2036",
        "logIndex": 101,
        "blockHash": "0x80ccf89d70c085ee3ea89a666a704189da43f2b328052d2857337f657dfdac36"
      }
    ],
    "blockNumber": 25520389,
    "cumulativeGasUsed": "7549852",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0901cad12aac146dbdbf78117ae00a1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloned\",\"type\":\"address\"}],\"name\":\"Clone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaces\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Diamond.InitArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCuttable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCuttable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaces\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Diamond.InitArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nomineeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddr\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"setSupportedInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"data\":\"optional initialization call data\",\"facetCuts\":\"array of structured Diamond facet update data\",\"target\":\"optional recipient of initialization delegatecall\"}},\"facetAddress(bytes4)\":{\"params\":{\"selector\":\"function selector to query\"},\"returns\":{\"facet\":\"facet address (zero address if not found)\"}},\"facetAddresses()\":{\"returns\":{\"addresses\":\"array of facet addresses\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"facet\":\"address of facet to query\"},\"returns\":{\"selectors\":\"array of function selectors\"}},\"facets()\":{\"returns\":{\"diamondFacets\":\"array of structured facet data\"}},\"owner()\":{\"returns\":{\"_0\":\"conract owner\"}},\"pause()\":{\"details\":\"pause the contract\"},\"paused()\":{\"details\":\"Should return if the contract is paused\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"transferOwnership(address)\":{\"details\":\"ownership transfer must be accepted by beneficiary before transfer is complete\",\"params\":{\"account\":\"address of new owner\"}},\"unpause()\":{\"details\":\"unpause the contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"accept transfer of contract ownership\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"update functions callable on Diamond proxy\"},\"facetAddress(bytes4)\":{\"notice\":\"get the address of the facet associated with given selector\"},\"facetAddresses()\":{\"notice\":\"get addresses of all facets used by diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"get all selectors for given facet address\"},\"facets()\":{\"notice\":\"get all facets and their selectors\"},\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@solidstate/contracts/access/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conract owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x0fd040e17aa91c491c878ce12d104254b5f3ddd9ac8ccc01e355e3f56a686ef6\",\"license\":\"MIT\"},\"@solidstate/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC173 } from './IERC173.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IERC173, OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(msg.sender, account);\\n    }\\n}\\n\",\"keccak256\":\"0x266ec400ca10bb3f6caaa967a41a515be5344a51ef29eb4f89365f1bd84fe7a0\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/access/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Ownable, OwnableStorage } from './Ownable.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is Ownable, SafeOwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n    using SafeOwnableStorage for SafeOwnableStorage.Layout;\\n\\n    function nomineeOwner() public view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc Ownable\\n     * @dev ownership transfer must be accepted by beneficiary before transfer is complete\\n     */\\n    function transferOwnership(address account)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        SafeOwnableStorage.layout().setNomineeOwner(account);\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, msg.sender);\\n        l.setOwner(msg.sender);\\n        SafeOwnableStorage.layout().setNomineeOwner(address(0));\\n    }\\n}\\n\",\"keccak256\":\"0xcde42dfacad074a3ab5d07ac085d0c2165b5fbaa384940b2937b6397f1e31389\",\"license\":\"MIT\"},\"@solidstate/contracts/access/SafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal {\\n    using SafeOwnableStorage for SafeOwnableStorage.Layout;\\n\\n    modifier onlyNomineeOwner() {\\n        require(\\n            msg.sender == SafeOwnableStorage.layout().nomineeOwner,\\n            'SafeOwnable: sender must be nominee owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4275d29f1735aa755ffe476081a6b87c8994f77629f6b613866db2d55042b16f\",\"license\":\"MIT\"},\"@solidstate/contracts/access/SafeOwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setNomineeOwner(Layout storage l, address nomineeOwner) internal {\\n        l.nomineeOwner = nomineeOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf6c40aa6fa00d6d1091a7ff9188a35d8851c89ae2747b39166858c4309794b87\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        require(\\n            implementation.isContract(),\\n            'Proxy: implementation must be contract'\\n        );\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0xd4c47f98fdccfbc6b9f3a76e8fc2c009a00b927533476468167197686d0518a8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Proxy } from '../Proxy.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\nimport { IDiamondLoupe } from './IDiamondLoupe.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation() internal view override returns (address) {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        address implementation = address(bytes20(l.facets[msg.sig]));\\n\\n        if (implementation == address(0)) {\\n            implementation = l.fallbackAddress;\\n            require(\\n                implementation != address(0),\\n                'DiamondBase: no facet found for function signature'\\n            );\\n        }\\n\\n        return implementation;\\n    }\\n}\\n\",\"keccak256\":\"0x9340a14b651cbf712e8483f3a8dfcb6a3254381bbaf391acb3a41088f8139aab\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    using AddressUtils for address;\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    event DiamondCut(\\n        IDiamondCuttable.FacetCut[] facetCuts,\\n        address target,\\n        bytes data\\n    );\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param l storage layout\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                IDiamondCuttable.FacetCut memory facetCut = facetCuts[i];\\n                IDiamondCuttable.FacetCutAction action = facetCut.action;\\n\\n                require(\\n                    facetCut.selectors.length > 0,\\n                    'DiamondBase: no selectors specified'\\n                );\\n\\n                if (action == IDiamondCuttable.FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = l.addFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == IDiamondCuttable.FacetCutAction.REPLACE) {\\n                    l.replaceFacetSelectors(facetCut);\\n                } else if (action == IDiamondCuttable.FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = l.removeFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            initialize(target, data);\\n        }\\n    }\\n\\n    function addFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(this) ||\\n                    facetCut.target.isContract(),\\n                'DiamondBase: ADD target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    'DiamondBase: selector already added'\\n                );\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function removeFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(0),\\n                'DiamondBase: REMOVE target must be zero address'\\n            );\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function replaceFacetSelectors(\\n        Layout storage l,\\n        IDiamondCuttable.FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            require(\\n                facetCut.target.isContract(),\\n                'DiamondBase: REPLACE target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                require(\\n                    oldFacetAddress != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    oldFacetAddress != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                require(\\n                    oldFacetAddress != facetCut.target,\\n                    'DiamondBase: REPLACE target is identical'\\n                );\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function initialize(address target, bytes memory data) private {\\n        require(\\n            (target == address(0)) == (data.length == 0),\\n            'DiamondBase: invalid initialization parameters'\\n        );\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                require(\\n                    target.isContract(),\\n                    'DiamondBase: initialization target has no code'\\n                );\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28849abd900cb824f5a31e83a48b6d8c98cbab1b009bf28826cb6d6f82c8d94d\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondCuttable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableInternal } from '../../access/OwnableInternal.sol';\\nimport { IDiamondCuttable } from './IDiamondCuttable.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondCuttable is IDiamondCuttable, OwnableInternal {\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external override onlyOwner {\\n        DiamondBaseStorage.layout().diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0x8b4af7f6d2eb33ceb43a8e750e1af387480228eb0cfa8f99ff02a064cfa211a9\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/DiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\nimport { IDiamondLoupe } from './IDiamondLoupe.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondLoupe is IDiamondLoupe {\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facets()\\n        external\\n        view\\n        override\\n        returns (Facet[] memory diamondFacets)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        override\\n        returns (bytes4[] memory selectors)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        override\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondLoupe\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        override\\n        returns (address facet)\\n    {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x79d6e50faea16c1ad01ba6dd1b2505b23b911b31c6e8f6d27909fc748688187b\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondCuttable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondCuttable {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts facet addresses, actions, and function selectors\\n     * @param target initialization function target\\n     * @param data initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x891cc6eb426fc6babfccd51e4eea22796187bdd7023e725b15565a21244cacbe\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondLoupe {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        returns (address facet);\\n}\\n\",\"keccak256\":\"0x8480e0e111faaca3db5d23fb215150234174d135e4d2c4a208cda12fc6f8019a\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"contracts/shared/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/access/SafeOwnable.sol';\\nimport '@solidstate/contracts/access/IERC173.sol';\\nimport '@solidstate/contracts/introspection/IERC165.sol';\\nimport '@solidstate/contracts/introspection/ERC165Storage.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondBase.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondCuttable.sol';\\nimport '@solidstate/contracts/proxy/diamond/DiamondLoupe.sol';\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport './lib/LibInitializable.sol';\\nimport './lib/LibPausable.sol';\\n\\ncontract Diamond is\\n    IERC165,\\n    Initializable,\\n    Pausable,\\n    SafeOwnable,\\n    DiamondBase,\\n    DiamondCuttable,\\n    DiamondLoupe\\n{\\n    using ERC165Storage for ERC165Storage.Layout;\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    event Clone(address indexed from, address indexed cloned);\\n\\n    struct InitArgs {\\n        address owner;\\n        bytes4[] interfaces;\\n        address fallbackAddress;\\n        bytes data;\\n    }\\n\\n    function init(InitArgs calldata args) external initializer {\\n        OwnableStorage.layout().setOwner(args.owner);\\n\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n        l.fallbackAddress = args.fallbackAddress;\\n        (\\n            bool success,\\n            bytes memory result\\n        ) = args.fallbackAddress.delegatecall(args.data);\\n        require(success, string(result));\\n\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n        for (uint i; i < args.interfaces.length; i++) {\\n            erc165.setSupportedInterface(args.interfaces[i], true);\\n        }\\n    }\\n\\n    function create(InitArgs memory args) external {\\n        address cloned = Clones.clone(address(this));\\n        Diamond(payable(cloned)).init(args);\\n        emit Clone(address(this), cloned);\\n    }\\n\\n    function setSupportedInterface(\\n        bytes4 interfaceId,\\n        bool supported\\n    ) onlyOwner external {\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n        erc165.setSupportedInterface(interfaceId, supported);\\n    }\\n\\n    function setFallbackAddress(address fallbackAddr) onlyOwner external {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddr;\\n    }\\n\\n    function getFallbackAddress() external view returns (address) {\\n        return DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public virtual override view returns (bool) {\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n        return interfaceId == type(IPausable).interfaceId ||\\n            interfaceId == type(IERC173).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IDiamondCuttable).interfaceId ||\\n            interfaceId == type(IDiamondLoupe).interfaceId ||\\n            erc165.isSupportedInterface(interfaceId);\\n    }\\n\\n    receive() external payable { }\\n}\\n\",\"keccak256\":\"0x2f93ec422de2c73370a5a807a0895004027ccf82c7199678f57a4d2febe2edd3\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xb33768d5a13e8aa6c9c15a2988d677ec850db777536db6ab0c38f0f768f71569\",\"license\":\"MIT\"},\"contracts/shared/lib/LibInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/utils/AddressUtils.sol';\\n\\n/**\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary InitializableStorage {\\n    struct Layout {\\n        bool initialized;\\n        bool initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.contracts.storage.Initializable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    modifier initializer() {\\n        InitializableStorage.Layout storage l = InitializableStorage.layout();\\n        require(\\n            l.initializing ? isConstructor() : !l.initialized,\\n            'Initializable: contract is already initialized'\\n        );\\n        bool isTopLevelCall = !l.initializing;\\n        if (isTopLevelCall) {\\n            l.initializing = true;\\n            l.initialized = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            l.initializing = false;\\n        }\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(\\n            InitializableStorage.layout().initializing,\\n            'Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    function isConstructor() private view returns (bool) {\\n        return !AddressUtils.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9fad7cc55f61de87ce9768325bf94406261eaf42f198e1a69f3ead0dc56b656d\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x86af35526539727370e6cfcd7132918c2b8923052391f7a1816458066006979a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614b3f806100206000396000f3fe60806040526004361061010d5760003560e01c80638456cb591161009557806396c32e511161006457806396c32e51146103a3578063adfca15e146103cc578063c197ea3514610409578063cdffacc614610432578063f2fde38b1461046f57610114565b80638456cb591461030d5780638ab5150a146103245780638da5cb5b1461034f578063914237651461037a57610114565b806352ef6b2c116100dc57806352ef6b2c1461024c5780635c975abb1461027757806379ba5097146102a25780637a0ed627146102b95780637f73528b146102e457610114565b806301ffc9a7146101a45780631f931c1c146101e15780632c4080591461020a5780633f4ba83a1461023557610114565b3661011457005b600061011e610498565b905061013f8173ffffffffffffffffffffffffffffffffffffffff16610617565b61017e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017590613110565b60405180910390fd5b3660008037600080366000845af43d6000803e806000811461019f573d6000f35b3d6000fd5b3480156101b057600080fd5b506101cb60048036038101906101c6919061319c565b61062a565b6040516101d891906131e4565b60405180910390f35b3480156101ed57600080fd5b5061020860048036038101906102039190613318565b61085a565b005b34801561021657600080fd5b5061021f610968565b60405161022c91906133bc565b60405180910390f35b34801561024157600080fd5b5061024a61099b565b005b34801561025857600080fd5b50610261610a91565b60405161026e9190613495565b60405180910390f35b34801561028357600080fd5b5061028c610cf9565b60405161029991906131e4565b60405180910390f35b3480156102ae57600080fd5b506102b7610d19565b005b3480156102c557600080fd5b506102ce610e6d565b6040516102db9190613674565b60405180910390f35b3480156102f057600080fd5b5061030b600480360381019061030691906136c2565b6113d5565b005b34801561031957600080fd5b50610322611494565b005b34801561033057600080fd5b5061033961158a565b60405161034691906133bc565b60405180910390f35b34801561035b57600080fd5b506103646115bd565b60405161037191906133bc565b60405180910390f35b34801561038657600080fd5b506103a1600480360381019061039c9190613702565b6115f0565b005b3480156103af57600080fd5b506103ca60048036038101906103c591906139ed565b6116d6565b005b3480156103d857600080fd5b506103f360048036038101906103ee9190613702565b6117ac565b6040516104009190613aa5565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b9190613aeb565b6119d0565b005b34801561043e57600080fd5b506104596004803603810190610454919061319c565b611cbe565b60405161046691906133bc565b60405180910390f35b34801561047b57600080fd5b5061049660048036038101906104919190613702565b611d25565b005b60008060007f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939050809150600082600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561060e578260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561060d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060490613ba6565b60405180910390fd5b5b80935050505090565b600080823b905060008111915050919050565b600080610635611ddb565b90507fe78a39d8000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061070057507f7f5828d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061076857507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107d057507f1f931c1c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061083857507f48e2b093000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061085257506108518382611e0890919063ffffffff16565b5b915050919050565b610862611e73565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ea90613c12565b60405180910390fd5b6109618585906109039190613d8a565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610951611ea0565b611ecd909392919063ffffffff16565b5050505050565b6000610972611ea0565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109a3611e73565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2b90613c12565b60405180910390fd5b6000610a3e612127565b60000160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051610a8791906133bc565b60405180910390a1565b60606000610a9d611ea0565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610acf57610ace613745565b5b604051908082528060200260200182016040528015610afd5781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff16821015610cef57600084600201600083815260200190815260200160002054905060005b6008811015610cda578380610b5590613dd8565b9450508560010160009054906101000a900461ffff1661ffff16841115610b7b57610cda565b6000600582901b83901b90506000876000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b88811015610c58578a8181518110610c0157610c00613e21565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c455760019150610c58565b8080610c5090613dd8565b915050610be6565b508015610c6757505050610cc7565b818a8981518110610c7b57610c7a613e21565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508780610cc090613dd8565b9850505050505b8080610cd290613dd8565b915050610b41565b50508080610ce790613dd8565b915050610b06565b5081845250505090565b6000610d03612127565b60000160009054906101000a900460ff16905090565b610d21612154565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da990613ec2565b60405180910390fd5b6000610dbc611e73565b90503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610e4f338261218190919063ffffffff16565b610e6a6000610e5c612154565b6121c890919063ffffffff16565b50565b60606000610e79611ea0565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610eab57610eaa613745565b5b604051908082528060200260200182016040528015610ee457816020015b610ed161305d565b815260200190600190039081610ec95790505b50915060008160010160009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610f1957610f18613745565b5b604051908082528060200260200182016040528015610f475781602001602082028036833780820191505090505b50905060008060005b8460010160009054906101000a900461ffff1661ffff1682101561136157600085600201600083815260200190815260200160002054905060005b600881101561134c578380610f9f90613dd8565b9450508660010160009054906101000a900461ffff1661ffff16841115610fc55761134c565b6000600582901b83901b90506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c90506000805b8881101561119d578273ffffffffffffffffffffffffffffffffffffffff168c828151811061106257611061613e21565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16141561118a57838c828151811061109e5761109d613e21565b5b6020026020010151602001518b83815181106110bd576110bc613e21565b5b602002602001015160ff16815181106110d9576110d8613e21565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060ff8a828151811061113a57611139613e21565b5b602002602001015160ff161061114f57600080fd5b89818151811061116257611161613e21565b5b60200260200101805180919061117790613eef565b60ff1660ff16815250506001915061119d565b808061119590613dd8565b915050611030565b5080156111ac57505050611339565b818b89815181106111c0576111bf613e21565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508960010160009054906101000a900461ffff1661ffff1667ffffffffffffffff81111561122e5761122d613745565b5b60405190808252806020026020018201604052801561125c5781602001602082028036833780820191505090505b508b89815181106112705761126f613e21565b5b602002602001015160200181905250828b898151811061129357611292613e21565b5b6020026020010151602001516000815181106112b2576112b1613e21565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050600189898151811061131357611312613e21565b5b602002602001019060ff16908160ff1681525050878061133290613dd8565b9850505050505b808061134490613dd8565b915050610f8b565b5050808061135990613dd8565b915050610f50565b5060005b828110156113ca57600084828151811061138257611381613e21565b5b602002602001015160ff16905060008783815181106113a4576113a3613e21565b5b6020026020010151602001519050818152505080806113c290613dd8565b915050611365565b508185525050505090565b6113dd611e73565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461146e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146590613c12565b60405180910390fd5b6000611478611ddb565b905061148f83838361220f9092919063ffffffff16565b505050565b61149c611e73565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461152d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152490613c12565b60405180910390fd5b6001611537612127565b60000160006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583360405161158091906133bc565b60405180910390a1565b6000611594612154565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006115c7611e73565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6115f8611e73565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168090613c12565b60405180910390fd5b80611692611ea0565b60030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006116e1306122e8565b90508073ffffffffffffffffffffffffffffffffffffffff1663c197ea35836040518263ffffffff1660e01b815260040161171c919061400b565b600060405180830381600087803b15801561173657600080fd5b505af115801561174a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fb557324045551eafb0789d69d5679a7017a31840124b2220df4b81dea45ec08360405160405180910390a35050565b606060006117b8611ea0565b90508060010160009054906101000a900461ffff1661ffff1667ffffffffffffffff8111156117ea576117e9613745565b5b6040519080825280602002602001820160405280156118185781602001602082028036833780820191505090505b50915060008060005b8360010160009054906101000a900461ffff1661ffff168210156119c457600084600201600083815260200190815260200160002054905060005b60088110156119af57838061187090613dd8565b9450508560010160009054906101000a900461ffff1661ffff16841115611896576119af565b6000600582901b83901b9050866000016000827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561199b57808887815181106119405761193f613e21565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050858061199790613dd8565b9650505b5080806119a790613dd8565b91505061185c565b505080806119bc90613dd8565b915050611821565b50818452505050919050565b60006119da6123bd565b90508060000160019054906101000a900460ff16611a0a578060000160009054906101000a900460ff1615611a13565b611a126123ea565b5b611a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a499061409f565b60405180910390fd5b60008160000160019054906101000a900460ff161590508015611aaa5760018260000160016101000a81548160ff02191690831515021790555060018260000160006101000a81548160ff0219169083151502179055505b611ad6836000016020810190611ac09190613702565b611ac8611e73565b61218190919063ffffffff16565b6000611ae0611ea0565b9050836040016020810190611af59190613702565b8160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080856040016020810190611b4d9190613702565b73ffffffffffffffffffffffffffffffffffffffff16868060600190611b7391906140ce565b604051611b81929190614161565b600060405180830381855af49150503d8060008114611bbc576040519150601f19603f3d011682016040523d82523d6000602084013e611bc1565b606091505b5091509150818190611c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0091906141be565b60405180910390fd5b506000611c14611ddb565b905060005b878060200190611c2991906141e0565b9050811015611c9057611c7d888060200190611c4591906141e0565b83818110611c5657611c55613e21565b5b9050602002016020810190611c6b919061319c565b60018461220f9092919063ffffffff16565b8080611c8890613dd8565b915050611c19565b50505050508015611cb95760008260000160016101000a81548160ff0219169083151502179055505b505050565b6000611cc8611ea0565b6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000205460601c9050919050565b611d2d611e73565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db590613c12565b60405180910390fd5b611dd881611dca612154565b6121c890919063ffffffff16565b50565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b6000807f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390508091505090565b60008460010160009054906101000a900461ffff1661ffff1690506000819050600080600783161115611f1757866002016000600384901c81526020019081526020016000205490505b60005b8651811015612086576000878281518110611f3857611f37613e21565b5b60200260200101519050600081602001519050600082604001515111611f93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8a906142b5565b60405180910390fd5b60006002811115611fa757611fa66142d5565b5b816002811115611fba57611fb96142d5565b5b1415611fe457611fd78585848d6123fb909392919063ffffffff16565b8095508196505050612077565b60016002811115611ff857611ff76142d5565b5b81600281111561200b5761200a6142d5565b5b141561202957612024828b6126bc90919063ffffffff16565b612076565b60028081111561203c5761203b6142d5565b5b81600281111561204f5761204e6142d5565b5b14156120755761206c8585848d612999909392919063ffffffff16565b80955081965050505b5b5b50508080600101915050611f1a565b508282146120ae57818760010160006101000a81548161ffff021916908361ffff1602179055505b60006007831611156120d95780876002016000600385901c8152602001908152602001600020819055505b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67386868660405161210c939291906144a8565b60405180910390a161211e8585612e9e565b50505050505050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6000807f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce661789090508091505090565b808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b808260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b63ffffffff60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226f90614539565b60405180910390fd5b80836000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156123b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123af906145a5565b60405180910390fd5b919050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b60006123f530610617565b15905090565b6000803073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16148061245b575061245a836000015173ffffffffffffffffffffffffffffffffffffffff16610617565b5b61249a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249190614637565b60405180910390fd5b60005b8360400151518110156126ac576000846040015182815181106124c3576124c2613e21565b5b602002602001015190506000886000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff1614612597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258e906146c9565b60405180910390fd5b8760001b866000015160601b6bffffffffffffffffffffffff191617896000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055506000600560078a16901b905080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c19891617975060e081141561269457878a600201600060038c901c8152602001908152602001600020819055506000801b97505b8880600101995050505050808060010191505061249d565b5084849150915094509492505050565b6126df816000015173ffffffffffffffffffffffffffffffffffffffff16610617565b61271e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127159061475b565b60405180910390fd5b60005b8160400151518110156129945760008260400151828151811061274757612746613e21565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002054905060008160601c9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612821576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612818906147c7565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288790614859565b60405180910390fd5b846000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128fa906148eb565b60405180910390fd5b846000015160601b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b831617866000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505050508080600101915050612721565b505050565b600080600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614612a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a069061497d565b60405180910390fd5b6000600386901c9050600060078716905060005b856040015151811015612e8357600086604001518281518110612a4957612a48613e21565b5b6020026020010151905060008a6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415612b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b15906147c7565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff161415612b90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8790614859565b60405180910390fd5b6000801b891415612bc5578480600190039550508a600201600086815260200190815260200160002054985060079350612bcf565b8380600190039450505b6000806000600587901b8c901b9250847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612cf1578d6000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020546bffffffffffffffffffffffff19166bffffffffffffffffffffffff60001b8516178e6000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020819055505b8d6000016000867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000206000905560008460001c61ffff169050600381901c9250600560078216901b915050878214612df75760008e600201600084815260200190815260200160002054905081847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c827fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198216179050808f60020160008581526020019081526020016000208190555050612e48565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198d16179b505b6000871415612e71578d6002016000898152602001908152602001600020600090556000801b9b505b50505050508080600101915050612a23565b5080600383901b179650868693509350505094509492505050565b60008151141515600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151514612f17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0e90614a0f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613059573073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612fdd57612f9d8273ffffffffffffffffffffffffffffffffffffffff16610617565b612fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fd390614aa1565b60405180910390fd5b5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516130049190614af2565b600060405180830381855af49150503d806000811461303f576040519150601f19603f3d011682016040523d82523d6000602084013e613044565b606091505b5050905080613057573d6000803e3d6000fd5b505b5050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600082825260208201905092915050565b7f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006130fa60268361308d565b91506131058261309e565b604082019050919050565b60006020820190508181036000830152613129816130ed565b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61317981613144565b811461318457600080fd5b50565b60008135905061319681613170565b92915050565b6000602082840312156131b2576131b161313a565b5b60006131c084828501613187565b91505092915050565b60008115159050919050565b6131de816131c9565b82525050565b60006020820190506131f960008301846131d5565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112613224576132236131ff565b5b8235905067ffffffffffffffff81111561324157613240613204565b5b60208301915083602082028301111561325d5761325c613209565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061328f82613264565b9050919050565b61329f81613284565b81146132aa57600080fd5b50565b6000813590506132bc81613296565b92915050565b60008083601f8401126132d8576132d76131ff565b5b8235905067ffffffffffffffff8111156132f5576132f4613204565b5b60208301915083600182028301111561331157613310613209565b5b9250929050565b6000806000806000606086880312156133345761333361313a565b5b600086013567ffffffffffffffff8111156133525761335161313f565b5b61335e8882890161320e565b95509550506020613371888289016132ad565b935050604086013567ffffffffffffffff8111156133925761339161313f565b5b61339e888289016132c2565b92509250509295509295909350565b6133b681613284565b82525050565b60006020820190506133d160008301846133ad565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61340c81613284565b82525050565b600061341e8383613403565b60208301905092915050565b6000602082019050919050565b6000613442826133d7565b61344c81856133e2565b9350613457836133f3565b8060005b8381101561348857815161346f8882613412565b975061347a8361342a565b92505060018101905061345b565b5085935050505092915050565b600060208201905081810360008301526134af8184613437565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61351881613144565b82525050565b600061352a838361350f565b60208301905092915050565b6000602082019050919050565b600061354e826134e3565b61355881856134ee565b9350613563836134ff565b8060005b8381101561359457815161357b888261351e565b975061358683613536565b925050600181019050613567565b5085935050505092915050565b60006040830160008301516135b96000860182613403565b50602083015184820360208601526135d18282613543565b9150508091505092915050565b60006135ea83836135a1565b905092915050565b6000602082019050919050565b600061360a826134b7565b61361481856134c2565b935083602082028501613626856134d3565b8060005b85811015613662578484038952815161364385826135de565b945061364e836135f2565b925060208a0199505060018101905061362a565b50829750879550505050505092915050565b6000602082019050818103600083015261368e81846135ff565b905092915050565b61369f816131c9565b81146136aa57600080fd5b50565b6000813590506136bc81613696565b92915050565b600080604083850312156136d9576136d861313a565b5b60006136e785828601613187565b92505060206136f8858286016136ad565b9150509250929050565b6000602082840312156137185761371761313a565b5b6000613726848285016132ad565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61377d82613734565b810181811067ffffffffffffffff8211171561379c5761379b613745565b5b80604052505050565b60006137af613130565b90506137bb8282613774565b919050565b600080fd5b600067ffffffffffffffff8211156137e0576137df613745565b5b602082029050602081019050919050565b60006138046137ff846137c5565b6137a5565b9050808382526020820190506020840283018581111561382757613826613209565b5b835b81811015613850578061383c8882613187565b845260208401935050602081019050613829565b5050509392505050565b600082601f83011261386f5761386e6131ff565b5b813561387f8482602086016137f1565b91505092915050565b600080fd5b600067ffffffffffffffff8211156138a8576138a7613745565b5b6138b182613734565b9050602081019050919050565b82818337600083830152505050565b60006138e06138db8461388d565b6137a5565b9050828152602081018484840111156138fc576138fb613888565b5b6139078482856138be565b509392505050565b600082601f830112613924576139236131ff565b5b81356139348482602086016138cd565b91505092915050565b6000608082840312156139535761395261372f565b5b61395d60806137a5565b9050600061396d848285016132ad565b600083015250602082013567ffffffffffffffff811115613991576139906137c0565b5b61399d8482850161385a565b60208301525060406139b1848285016132ad565b604083015250606082013567ffffffffffffffff8111156139d5576139d46137c0565b5b6139e18482850161390f565b60608301525092915050565b600060208284031215613a0357613a0261313a565b5b600082013567ffffffffffffffff811115613a2157613a2061313f565b5b613a2d8482850161393d565b91505092915050565b600082825260208201905092915050565b6000613a52826134e3565b613a5c8185613a36565b9350613a67836134ff565b8060005b83811015613a98578151613a7f888261351e565b9750613a8a83613536565b925050600181019050613a6b565b5085935050505092915050565b60006020820190508181036000830152613abf8184613a47565b905092915050565b600080fd5b600060808284031215613ae257613ae1613ac7565b5b81905092915050565b600060208284031215613b0157613b0061313a565b5b600082013567ffffffffffffffff811115613b1f57613b1e61313f565b5b613b2b84828501613acc565b91505092915050565b7f4469616d6f6e64426173653a206e6f20666163657420666f756e6420666f722060008201527f66756e6374696f6e207369676e61747572650000000000000000000000000000602082015250565b6000613b9060328361308d565b9150613b9b82613b34565b604082019050919050565b60006020820190508181036000830152613bbf81613b83565b9050919050565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b6000613bfc601d8361308d565b9150613c0782613bc6565b602082019050919050565b60006020820190508181036000830152613c2b81613bef565b9050919050565b600067ffffffffffffffff821115613c4d57613c4c613745565b5b602082029050602081019050919050565b60038110613c6b57600080fd5b50565b600081359050613c7d81613c5e565b92915050565b600060608284031215613c9957613c9861372f565b5b613ca360606137a5565b90506000613cb3848285016132ad565b6000830152506020613cc784828501613c6e565b602083015250604082013567ffffffffffffffff811115613ceb57613cea6137c0565b5b613cf78482850161385a565b60408301525092915050565b6000613d16613d1184613c32565b6137a5565b90508083825260208201905060208402830185811115613d3957613d38613209565b5b835b81811015613d8057803567ffffffffffffffff811115613d5e57613d5d6131ff565b5b808601613d6b8982613c83565b85526020850194505050602081019050613d3b565b5050509392505050565b6000613d97368484613d03565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000613de382613dce565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e1657613e15613d9f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f536166654f776e61626c653a2073656e646572206d757374206265206e6f6d6960008201527f6e6565206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613eac60298361308d565b9150613eb782613e50565b604082019050919050565b60006020820190508181036000830152613edb81613e9f565b9050919050565b600060ff82169050919050565b6000613efa82613ee2565b915060ff821415613f0e57613f0d613d9f565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613f53578082015181840152602081019050613f38565b83811115613f62576000848401525b50505050565b6000613f7382613f19565b613f7d8185613f24565b9350613f8d818560208601613f35565b613f9681613734565b840191505092915050565b6000608083016000830151613fb96000860182613403565b5060208301518482036020860152613fd18282613543565b9150506040830151613fe66040860182613403565b5060608301518482036060860152613ffe8282613f68565b9150508091505092915050565b600060208201905081810360008301526140258184613fa1565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614089602e8361308d565b91506140948261402d565b604082019050919050565b600060208201905081810360008301526140b88161407c565b9050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126140eb576140ea6140bf565b5b80840192508235915067ffffffffffffffff82111561410d5761410c6140c4565b5b602083019250600182023603831315614129576141286140c9565b5b509250929050565b600081905092915050565b60006141488385614131565b93506141558385846138be565b82840190509392505050565b600061416e82848661413c565b91508190509392505050565b600081519050919050565b60006141908261417a565b61419a818561308d565b93506141aa818560208601613f35565b6141b381613734565b840191505092915050565b600060208201905081810360008301526141d88184614185565b905092915050565b600080833560016020038436030381126141fd576141fc6140bf565b5b80840192508235915067ffffffffffffffff82111561421f5761421e6140c4565b5b60208301925060208202360383131561423b5761423a6140c9565b5b509250929050565b7f4469616d6f6e64426173653a206e6f2073656c6563746f72732073706563696660008201527f6965640000000000000000000000000000000000000000000000000000000000602082015250565b600061429f60238361308d565b91506142aa82614243565b604082019050919050565b600060208201905081810360008301526142ce81614292565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60038110614341576143406142d5565b5b50565b600081905061435282614330565b919050565b600061436282614344565b9050919050565b61437281614357565b82525050565b60006060830160008301516143906000860182613403565b5060208301516143a36020860182614369565b50604083015184820360408601526143bb8282613543565b9150508091505092915050565b60006143d48383614378565b905092915050565b6000602082019050919050565b60006143f482614304565b6143fe818561430f565b93508360208202850161441085614320565b8060005b8581101561444c578484038952815161442d85826143c8565b9450614438836143dc565b925060208a01995050600181019050614414565b50829750879550505050505092915050565b600082825260208201905092915050565b600061447a82613f19565b614484818561445e565b9350614494818560208601613f35565b61449d81613734565b840191505092915050565b600060608201905081810360008301526144c281866143e9565b90506144d160208301856133ad565b81810360408301526144e3818461446f565b9050949350505050565b7f4552433136353a20696e76616c696420696e7465726661636520696400000000600082015250565b6000614523601c8361308d565b915061452e826144ed565b602082019050919050565b6000602082019050818103600083015261455281614516565b9050919050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b600061458f60168361308d565b915061459a82614559565b602082019050919050565b600060208201905081810360008301526145be81614582565b9050919050565b7f4469616d6f6e64426173653a204144442074617267657420686173206e6f206360008201527f6f64650000000000000000000000000000000000000000000000000000000000602082015250565b600061462160238361308d565b915061462c826145c5565b604082019050919050565b6000602082019050818103600083015261465081614614565b9050919050565b7f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460008201527f6465640000000000000000000000000000000000000000000000000000000000602082015250565b60006146b360238361308d565b91506146be82614657565b604082019050919050565b600060208201905081810360008301526146e2816146a6565b9050919050565b7f4469616d6f6e64426173653a205245504c41434520746172676574206861732060008201527f6e6f20636f646500000000000000000000000000000000000000000000000000602082015250565b600061474560278361308d565b9150614750826146e9565b604082019050919050565b6000602082019050818103600083015261477481614738565b9050919050565b7f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e6400600082015250565b60006147b1601f8361308d565b91506147bc8261477b565b602082019050919050565b600060208201905081810360008301526147e0816147a4565b9050919050565b7f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d7574616260008201527f6c65000000000000000000000000000000000000000000000000000000000000602082015250565b600061484360228361308d565b915061484e826147e7565b604082019050919050565b6000602082019050818103600083015261487281614836565b9050919050565b7f4469616d6f6e64426173653a205245504c41434520746172676574206973206960008201527f64656e746963616c000000000000000000000000000000000000000000000000602082015250565b60006148d560288361308d565b91506148e082614879565b604082019050919050565b60006020820190508181036000830152614904816148c8565b9050919050565b7f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060008201527f6265207a65726f20616464726573730000000000000000000000000000000000602082015250565b6000614967602f8361308d565b91506149728261490b565b604082019050919050565b600060208201905081810360008301526149968161495a565b9050919050565b7f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460008201527f696f6e20706172616d6574657273000000000000000000000000000000000000602082015250565b60006149f9602e8361308d565b9150614a048261499d565b604082019050919050565b60006020820190508181036000830152614a28816149ec565b9050919050565b7f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760008201527f657420686173206e6f20636f6465000000000000000000000000000000000000602082015250565b6000614a8b602e8361308d565b9150614a9682614a2f565b604082019050919050565b60006020820190508181036000830152614aba81614a7e565b9050919050565b6000614acc82613f19565b614ad68185614131565b9350614ae6818560208601613f35565b80840191505092915050565b6000614afe8284614ac1565b91508190509291505056fea264697066735822122009b57487d5ab8a750d755b8b1e2aa3c035ed964d3ad4ac3c7d0ae06f510ccb3364736f6c634300080b0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "data": "optional initialization call data",
          "facetCuts": "array of structured Diamond facet update data",
          "target": "optional recipient of initialization delegatecall"
        }
      },
      "facetAddress(bytes4)": {
        "params": {
          "selector": "function selector to query"
        },
        "returns": {
          "facet": "facet address (zero address if not found)"
        }
      },
      "facetAddresses()": {
        "returns": {
          "addresses": "array of facet addresses"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "facet": "address of facet to query"
        },
        "returns": {
          "selectors": "array of function selectors"
        }
      },
      "facets()": {
        "returns": {
          "diamondFacets": "array of structured facet data"
        }
      },
      "owner()": {
        "returns": {
          "_0": "conract owner"
        }
      },
      "pause()": {
        "details": "pause the contract"
      },
      "paused()": {
        "details": "Should return if the contract is paused"
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "transferOwnership(address)": {
        "details": "ownership transfer must be accepted by beneficiary before transfer is complete",
        "params": {
          "account": "address of new owner"
        }
      },
      "unpause()": {
        "details": "unpause the contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "accept transfer of contract ownership"
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "update functions callable on Diamond proxy"
      },
      "facetAddress(bytes4)": {
        "notice": "get the address of the facet associated with given selector"
      },
      "facetAddresses()": {
        "notice": "get addresses of all facets used by diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "get all selectors for given facet address"
      },
      "facets()": {
        "notice": "get all facets and their selectors"
      },
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}