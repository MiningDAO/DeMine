{
  "address": "0xe54916C70f75a1A0C4749e4d830999daeF13f7FD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adjustDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Account",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payment",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenCost",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "payoff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a074b4c6939c7d21f4db408ed08e8eb3e5ae5b995718db56751541383f32e85",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0xe54916C70f75a1A0C4749e4d830999daeF13f7FD",
    "transactionIndex": 20,
    "gasUsed": "2715689",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe016576a704ebdb2b6b850cc771d3bae8f5fc18e6067a6969306e016795c54a5",
    "transactionHash": "0x2a074b4c6939c7d21f4db408ed08e8eb3e5ae5b995718db56751541383f32e85",
    "logs": [],
    "blockNumber": 10151300,
    "cumulativeGasUsed": "6415269",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "025e39e0d63240003af6e7ed5db9df38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adjustDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Account\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCost\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"payoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shu Dong\",\"details\":\"the contract also implements IERC1155Receiver to receive and lock demine nft\",\"kind\":\"dev\",\"methods\":{\"getAccountInfo(address)\":{\"params\":{\"account\":\"Address of account to query\"}},\"redeem(uint256[],uint256[])\":{\"params\":{\"amounts\":\"Amount of each demine nft token\",\"ids\":\"DeMine nft token ids to redeem\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}}},\"title\":\"MortgageFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adjustDeposit()\":{\"notice\":\"adjust deposit for msg sender and update account info         Ensure you have a valid start and end set for msg.sender         to prevent infinite loop\"},\"getAccountInfo(address)\":{\"notice\":\"get account info\"},\"payoff(uint256)\":{\"notice\":\"payoff debt from start to end. Ensure you have a         valid start set to prevent infinite loop\"},\"redeem(uint256[],uint256[])\":{\"notice\":\"Pay token cost and liquidize tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"}},\"notice\":\"Facet contract holding functions for miners to manage mortgage.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agent/facets/MortgageFacet.sol\":\"MortgageFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x31fcdbc3c885a95d0449d9b5f20a7ef0cae2fa63bd82195995d05a7eecaa5f74\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"contracts/agent/facets/MortgageFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/introspection/ERC165.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol';\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport '../../shared/lib/Util.sol';\\nimport '../../shared/lib/LibPausable.sol';\\nimport '../lib/AppStorage.sol';\\nimport '../lib/BillingStorage.sol';\\nimport '../../shared/lib/LibInitializable.sol';\\n\\n/**\\n * @title MortgageFacet\\n * @author Shu Dong\\n * @notice Facet contract holding functions for miners to manage mortgage.\\n * @dev the contract also implements IERC1155Receiver to receive and lock demine nft\\n */\\ncontract MortgageFacet is\\n    Initializable,\\n    PausableModifier,\\n    IERC1155Receiver,\\n    ERC165\\n{\\n    AppStorage internal s;\\n\\n    using SafeERC20 for IERC20;\\n\\n    event Redeem(address indexed, uint[], uint[]);\\n\\n    function init(\\n        address nft,\\n        address payment,\\n        address payee,\\n        uint tokenCost\\n    ) external onlyInitializing {\\n        IERC1155Rewardable nftContract = IERC1155Rewardable(nft);\\n        s.nft = nftContract;\\n        s.income = IERC20(nftContract.earningToken());\\n        s.payment = IERC20(payment);\\n        s.payee = payee;\\n        s.tokenCost = tokenCost;\\n    }\\n\\n    /**\\n     * @notice Pay token cost and liquidize tokens\\n     * @param ids DeMine nft token ids to redeem\\n     * @param amounts Amount of each demine nft token\\n     */\\n    function redeem(\\n        uint[] calldata ids,\\n        uint[] calldata amounts\\n    ) external whenNotPaused {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"DeMineAgent: array length mismatch\\\"\\n        );\\n        uint tokenCost = s.tokenCost;\\n        uint billing = s.billing;\\n        uint totalCost;\\n        for (uint i = 0; i < ids.length; i++) {\\n            require(ids[i] >= billing, 'DeMineAgent: token not redeemable');\\n            totalCost += tokenCost * amounts[i];\\n            uint balance = s.balances[ids[i]][msg.sender];\\n            require(balance > amounts[i], 'DeMineAgent: no sufficient balance');\\n            s.balances[ids[i]][msg.sender] = balance - amounts[i];\\n        }\\n        s.payment.safeTransferFrom(msg.sender, s.payee, totalCost);\\n        emit Redeem(msg.sender, ids, amounts);\\n        s.nft.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice adjust deposit for msg sender and update account info\\n     *         Ensure you have a valid start and end set for msg.sender\\n     *         to prevent infinite loop\\n     */\\n    function adjustDeposit() external whenNotPaused {\\n        Account memory account = readAccount(msg.sender);\\n        require(account.start >= s.billing, 'DeMineAgent: payoff debt first');\\n        require(account.maxBalance > 0, 'DeMineAgent: no need to adjust');\\n\\n        Account memory update = Account(account.start, account.end, 0);\\n        while (s.balances[update.start][msg.sender] == 0 && update.start <= update.end) {\\n            update.start += 1;\\n        }\\n        while (s.balances[update.end][msg.sender] == 0 && update.end >= update.start) {\\n            update.end -= 1;\\n        }\\n        if (update.start > update.end) {\\n            updateAccount(msg.sender, account, Account(type(uint).max, 0, 0));\\n        } else {\\n            for (uint id = update.start; id <= update.end; id++) {\\n                update.maxBalance = Util.max2(update.maxBalance, s.balances[id][msg.sender]);\\n            }\\n            updateAccount(msg.sender, account, update);\\n        }\\n    }\\n\\n    /**\\n     * @notice get account info\\n     * @param account Address of account to query\\n     */\\n    function getAccountInfo(address account) external view returns(Account memory) {\\n        return s.accounts[account];\\n    }\\n\\n    function balanceOfBatch(\\n        address account,\\n        uint[] calldata ids\\n    ) external view returns(uint[] memory) {\\n        uint[] memory balances = new uint[](ids.length);\\n        for (uint i = 0; i < ids.length; i++) {\\n            balances[i] = s.balances[ids[i]][account];\\n        }\\n        return balances;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0; // reject\\n    }\\n\\n    // @dev the function should only be called by mint function of DeMineNFT\\n    // @param from Must be address(0)\\n    // @param data Must be encoded address of mortagager\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(\\n            msg.sender == address(s.nft) && from == address(0),\\n            'DeMineAgent: only minted tokens from DeMineNFT allowed'\\n        );\\n        (address mortgager) = abi.decode(data, (address));\\n        Account memory account = readAccount(mortgager);\\n        Account memory update = Account(type(uint).max, 0, 0);\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint balance = s.balances[ids[i]][mortgager] + amounts[i];\\n            s.balances[ids[i]][mortgager] = balance;\\n            update.maxBalance = Util.max2(balance, update.maxBalance);\\n            update.start = Util.min2(ids[i], update.start);\\n            update.end = Util.max2(ids[i], update.end);\\n        }\\n        mergeAccount(mortgager, account, update);\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @notice payoff debt from start to end. Ensure you have a\\n     *         valid start set to prevent infinite loop\\n     */\\n    function payoff(uint end) external whenNotPaused {\\n        uint income;\\n        uint debt;\\n        Account memory account = readAccount(msg.sender);\\n        require(end < s.billing, 'DeMineAgent: end larger than billing');\\n        for (uint id = account.start; id <= end; id++) {\\n            uint balance = s.balances[id][msg.sender];\\n            if (balance > 0) {\\n                Statement memory st = s.statements[id];\\n                income += st.income * balance / st.balance;\\n                debt += Util.ceil(st.debt * balance, st.balance);\\n                s.balances[id][msg.sender] = 0;\\n            }\\n        }\\n        s.accounts[msg.sender].start = end + 1;\\n        s.payment.safeTransferFrom(s.payee, msg.sender, debt);\\n        s.deposit += debt;\\n        s.income.safeTransfer(msg.sender, income);\\n    }\\n\\n    function readAccount(\\n        address account\\n    ) private view returns(Account memory acc) {\\n        acc = s.accounts[account];\\n        acc.start = type(uint).max - acc.start;\\n        return acc;\\n    }\\n\\n    function updateAccount(\\n        address account,\\n        Account memory current,\\n        Account memory update\\n    ) private {\\n        if (update.start > current.start) {\\n            s.accounts[account].start = type(uint).max - update.start;\\n        }\\n        if (update.end < current.end) {\\n            s.accounts[account].end = update.end;\\n        }\\n        if (update.maxBalance < current.maxBalance) {\\n            s.accounts[account].maxBalance = update.maxBalance;\\n            uint delta = (current.maxBalance - update.maxBalance) * depositBase();\\n            s.payment.safeTransfer(account, delta);\\n            s.deposit -= delta;\\n        }\\n    }\\n\\n    function mergeAccount(\\n        address account,\\n        Account memory current,\\n        Account memory update\\n    ) private {\\n        if (update.start < current.start) {\\n            s.accounts[account].start = type(uint).max - update.start;\\n            current.start = update.start;\\n        }\\n        if (update.end > current.end) {\\n            s.accounts[account].start = update.start;\\n            current.end = update.end;\\n        }\\n        if (update.maxBalance > current.maxBalance) {\\n            s.accounts[account].maxBalance = update.maxBalance;\\n            current.maxBalance = update.maxBalance;\\n            uint delta = (update.maxBalance - current.maxBalance) * depositBase();\\n            s.payment.safeTransferFrom(msg.sender, s.payee, delta);\\n            s.deposit += delta;\\n        }\\n    }\\n\\n    function depositBase() private view returns(uint) {\\n        return s.tokenCost * s.depositMultiplier;\\n    }\\n}\\n\",\"keccak256\":\"0x213bd9a7ab064e22f3ea82e2540a1c316c0a82aa1588c189d5b1c70c117a792e\",\"license\":\"MIT\"},\"contracts/agent/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport '../../nft/interfaces/IERC1155Rewardable.sol';\\n\\nstruct Account {\\n    uint start; // starting from 2**256 - 1 - start\\n    uint end;\\n    uint maxBalance;\\n}\\n\\nstruct Statement {\\n    uint balance;\\n    uint income;\\n    uint debt;\\n}\\n\\nstruct AppStorage {\\n    uint tokenCost; // cost per nft in cost token\\n\\n    IERC20 income;\\n    IERC20 payment;\\n    IERC1155Rewardable nft; // DeMineNFT contract address\\n    address payee; // payee account address, could be contract\\n\\n    bool initialized;\\n    uint8 depositMultiplier; // deposit = maxBalance * tokenCost * depositMultiplier\\n    uint deposit; // total deposit in cost token\\n    uint billing; // current billing token\\n    // billing statement\\n    mapping(uint => Statement) statements;\\n    // account info\\n    mapping(address => Account) accounts;\\n    // tokenId => account => price\\n    mapping(uint => mapping(address => uint)) balances;\\n    // owner => buyer => allowance\\n    mapping(address => mapping(address => mapping(uint => uint))) allowances;\\n}\\n\",\"keccak256\":\"0x52ac51c1285a6907db0cd3092c3ddd11382e9be64dc4b354bc0b3e9d6439efa9\",\"license\":\"MIT\"},\"contracts/agent/lib/BillingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary BillingStorage {\\n    enum Stage{ NOT_STARTED, SALE_ONGOING }\\n\\n    struct LockedPrice {\\n        uint unitSize;\\n        uint unitPrice;\\n        uint expireAt;\\n    }\\n\\n    struct Layout {\\n        AggregatorV3Interface chainlink;\\n        address swapRouter;\\n        Stage stage;\\n        uint8 shrinkSize; // num of tokens we shrink starting from mining\\n        uint16 discount; // 10000 based\\n        uint16 saleDuration; // as second\\n        uint16 priceLockDuration; // as second\\n        uint shrinked; // latest token shrinked\\n        uint saleExpireAt; // timestamp\\n        mapping(address => LockedPrice) lockedPrices;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.agent.contracts.storage.Billing');\\n\\n    function layout() internal pure returns(Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd138423784dc40e8d6b0cd79482edd6c3a424541d7fe4d77cd80ccfcd4fd1ef\",\"license\":\"MIT\"},\"contracts/nft/interfaces/IERC1155Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IERC1155Rewardable is IERC1155 {\\n    function custodian() external view returns(address);\\n\\n    function earningToken() external view returns(address);\\n}\\n\",\"keccak256\":\"0xac6ed88e2b851fcbc70ca389bbe6c6db551b619fe70375995fe7f11d69d69b47\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xb33768d5a13e8aa6c9c15a2988d677ec850db777536db6ab0c38f0f768f71569\",\"license\":\"MIT\"},\"contracts/shared/lib/LibInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/utils/AddressUtils.sol';\\n\\n/**\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary InitializableStorage {\\n    struct Layout {\\n        bool initialized;\\n        bool initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.contracts.storage.Initializable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    modifier initializer() {\\n        InitializableStorage.Layout storage l = InitializableStorage.layout();\\n        require(\\n            l.initializing ? isConstructor() : !l.initialized,\\n            'Initializable: contract is already initialized'\\n        );\\n        bool isTopLevelCall = !l.initializing;\\n        if (isTopLevelCall) {\\n            l.initializing = true;\\n            l.initialized = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            l.initializing = false;\\n        }\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(\\n            InitializableStorage.layout().initializing,\\n            'Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    function isConstructor() private view returns (bool) {\\n        return !AddressUtils.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9fad7cc55f61de87ce9768325bf94406261eaf42f198e1a69f3ead0dc56b656d\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x86af35526539727370e6cfcd7132918c2b8923052391f7a1816458066006979a\",\"license\":\"MIT\"},\"contracts/shared/lib/Util.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nlibrary Util {\\n    function ceil(uint a, uint m) internal pure returns(uint) {\\n        return ((a + m - 1) / m) * m;\\n    }\\n\\n    function max3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a > b ? max2(a, c) : max2(b, c);\\n    }\\n\\n    function max2(uint a, uint b) internal pure returns(uint) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min2(uint a, uint b) internal pure returns(uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function min3(uint a, uint b, uint c) internal pure returns(uint) {\\n        return a < b ? min2(a, c) : min2(b, c);\\n    }\\n}\\n\",\"keccak256\":\"0x23354d81fbf0ef13ca8192060aa9bb6aad6e138fc77d924ea81fc95c1f9fbd5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061305c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637fa084a2116100665780637fa084a214610130578063afd690861461014c578063bc197c811461017c578063c7b7f88a146101ac578063f23a6e61146101b657610093565b806301ffc9a7146100985780632ca51e22146100c857806346639dba146100e45780637b510fe814610100575b600080fd5b6100b260048036038101906100ad9190611db2565b6101e6565b6040516100bf9190611dfa565b60405180910390f35b6100e260048036038101906100dd9190611e7a565b610209565b005b6100fe60048036038101906100f99190611f8f565b610640565b005b61011a60048036038101906101159190611ff6565b61082b565b6040516101279190612074565b60405180910390f35b61014a6004803603810190610145919061208f565b6108a5565b005b610166600480360381019061016191906120bc565b610c0c565b60405161017391906121cb565b60405180910390f35b61019660048036038101906101919190612243565b610d17565b6040516101a3919061232e565b60405180910390f35b6101b4611008565b005b6101d060048036038101906101cb9190612349565b61134e565b6040516101dd919061232e565b60405180910390f35b6000610202826101f4611360565b61138d90919063ffffffff16565b9050919050565b6102116113f8565b60000160009054906101000a900460ff1615610262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025990612440565b60405180910390fd5b8181905084849050146102aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a1906124d2565b60405180910390fd5b600080600001549050600080600601549050600080600090505b878790508110156104d157828888838181106102e3576102e26124f2565b5b90506020020135101561032b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032290612593565b60405180910390fd5b85858281811061033e5761033d6124f2565b5b905060200201358461035091906125e2565b8261035b919061263c565b915060008060090160008a8a85818110610378576103776124f2565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508686838181106103e0576103df6124f2565b5b905060200201358111610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041f90612704565b60405180910390fd5b86868381811061043b5761043a6124f2565b5b905060200201358161044d9190612724565b600060090160008b8b86818110610467576104666124f2565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104c990612758565b9150506102c4565b5061054933600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611425909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fd63285f33fab7fc260b1b9e7ce1abbf3fc8906df5a271e6ebd3062bdca7bb29e888888886040516105959493929190612811565b60405180910390a2600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632eb2c2d630338a8a8a8a6040518763ffffffff1660e01b815260040161060596959493929190612892565b600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b5050505050505050505050565b6106486114ae565b60000160019054906101000a900460ff16610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f9061296e565b60405180910390fd5b600084905080600060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16637fe205c76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075091906129a3565b600060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160008001819055505050505050565b610833611d2f565b600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b6108ad6113f8565b60000160009054906101000a900460ff16156108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590612440565b60405180910390fd5b600080600061090c336114db565b90506000600601548410610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90612a42565b60405180910390fd5b6000816000015190505b848111610acc57600080600901600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610ab8576000806007016000848152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060000151828260200151610a1d91906125e2565b610a279190612a91565b86610a32919061263c565b9550610a51828260400151610a4791906125e2565b826000015161158e565b85610a5c919061263c565b9450600080600901600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b508080610ac490612758565b91505061095f565b50600184610ada919061263c565b600060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550610b9a600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611425909392919063ffffffff16565b8160006005016000828254610baf919061263c565b92505081905550610c063384600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115c69092919063ffffffff16565b50505050565b606060008383905067ffffffffffffffff811115610c2d57610c2c612ac2565b5b604051908082528060200260200182016040528015610c5b5781602001602082028036833780820191505090505b50905060005b84849050811015610d0b5760006009016000868684818110610c8657610c856124f2565b5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610cec57610ceb6124f2565b5b6020026020010181815250508080610d0390612758565b915050610c61565b50809150509392505050565b60008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610da45750600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b610de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dda90612b63565b60405180910390fd5b60008383810190610df49190612bc1565b90506000610e01826114db565b9050600060405180606001604052807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152602001600081526020016000815250905060005b8a8a9050811015610fe3576000898983818110610e6757610e666124f2565b5b90506020020135600060090160008e8e86818110610e8857610e876124f2565b5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ee5919061263c565b905080600060090160008e8e86818110610f0257610f016124f2565b5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f6681846040015161164c565b836040018181525050610f968c8c84818110610f8557610f846124f2565b5b905060200201358460000151611665565b836000018181525050610fc68c8c84818110610fb557610fb46124f2565b5b90506020020135846020015161164c565b836020018181525050508080610fdb90612758565b915050610e47565b50610fef83838361167e565b63bc197c8160e01b935050505098975050505050505050565b6110106113f8565b60000160009054906101000a900460ff1615611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105890612440565b60405180910390fd5b600061106c336114db565b9050600060060154816000015110156110ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b190612c3a565b60405180910390fd5b6000816040015111611101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f890612ca6565b60405180910390fd5b600060405180606001604052808360000151815260200183602001518152602001600081525090505b60008060090160008360000151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561119857508060200151816000015111155b156111bc576001816000018181516111b0919061263c565b9150818152505061112a565b5b60008060090160008360200151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561122b57508060000151816020015110155b1561124f576001816020018181516112439190612724565b915081815250506111bd565b8060200151816000015111156112ab576112a6338360405180606001604052807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81526020016000815260200160008152506118b3565b61134a565b6000816000015190505b8160200151811161133d5761132182604001516000600901600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461164c565b826040018181525050808061133590612758565b9150506112b5565b506113493383836118b3565b5b5050565b60008060e01b90509695505050505050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6114a8846323b872dd60e01b85858560405160240161144693929190612cd5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a97565b50505050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b6114e3611d2f565b600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905080600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6115809190612724565b816000018181525050919050565b60008182600184866115a0919061263c565b6115aa9190612724565b6115b49190612a91565b6115be91906125e2565b905092915050565b6116478363a9059cbb60e01b84846040516024016115e5929190612d0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a97565b505050565b600081831161165b578161165d565b825b905092915050565b60008183106116745781611676565b825b905092915050565b8160000151816000015110156117165780600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6116be9190612724565b600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600001518260000181815250505b816020015181602001511115611783578060000151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080602001518260200181815250505b8160400151816040015111156118ae578060400151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550806040015182604001818152505060006117f9611b5e565b8360400151836040015161180d9190612724565b61181791906125e2565b905061189033600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611425909392919063ffffffff16565b80600060050160008282546118a5919061263c565b92505081905550505b505050565b81600001518160000151111561193d5780600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6118f39190612724565b600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b81602001518160200151101561199c578060200151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b816040015181604001511015611a92578060400151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000611a04611b5e565b82604001518460400151611a189190612724565b611a2291906125e2565b9050611a748482600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115c69092919063ffffffff16565b8060006005016000828254611a899190612724565b92505081905550505b505050565b6000611af9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b899092919063ffffffff16565b9050600081511115611b595780806020019051810190611b199190612d61565b611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f90612e00565b60405180910390fd5b5b505050565b60008060040160159054906101000a900460ff1660ff166000800154611b8491906125e2565b905090565b6060611b988484600085611ba1565b90509392505050565b606082471015611be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdd90612e92565b60405180910390fd5b611bef85611cb5565b611c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2590612efe565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c579190612f98565b60006040518083038185875af1925050503d8060008114611c94576040519150601f19603f3d011682016040523d82523d6000602084013e611c99565b606091505b5091509150611ca9828286611cc8565b92505050949350505050565b600080823b905060008111915050919050565b60608315611cd857829050611d28565b600083511115611ceb5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1f9190613004565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611d8f81611d5a565b8114611d9a57600080fd5b50565b600081359050611dac81611d86565b92915050565b600060208284031215611dc857611dc7611d50565b5b6000611dd684828501611d9d565b91505092915050565b60008115159050919050565b611df481611ddf565b82525050565b6000602082019050611e0f6000830184611deb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e3a57611e39611e15565b5b8235905067ffffffffffffffff811115611e5757611e56611e1a565b5b602083019150836020820283011115611e7357611e72611e1f565b5b9250929050565b60008060008060408587031215611e9457611e93611d50565b5b600085013567ffffffffffffffff811115611eb257611eb1611d55565b5b611ebe87828801611e24565b9450945050602085013567ffffffffffffffff811115611ee157611ee0611d55565b5b611eed87828801611e24565b925092505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f2682611efb565b9050919050565b611f3681611f1b565b8114611f4157600080fd5b50565b600081359050611f5381611f2d565b92915050565b6000819050919050565b611f6c81611f59565b8114611f7757600080fd5b50565b600081359050611f8981611f63565b92915050565b60008060008060808587031215611fa957611fa8611d50565b5b6000611fb787828801611f44565b9450506020611fc887828801611f44565b9350506040611fd987828801611f44565b9250506060611fea87828801611f7a565b91505092959194509250565b60006020828403121561200c5761200b611d50565b5b600061201a84828501611f44565b91505092915050565b61202c81611f59565b82525050565b6060820160008201516120486000850182612023565b50602082015161205b6020850182612023565b50604082015161206e6040850182612023565b50505050565b60006060820190506120896000830184612032565b92915050565b6000602082840312156120a5576120a4611d50565b5b60006120b384828501611f7a565b91505092915050565b6000806000604084860312156120d5576120d4611d50565b5b60006120e386828701611f44565b935050602084013567ffffffffffffffff81111561210457612103611d55565b5b61211086828701611e24565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006121548383612023565b60208301905092915050565b6000602082019050919050565b60006121788261211c565b6121828185612127565b935061218d83612138565b8060005b838110156121be5781516121a58882612148565b97506121b083612160565b925050600181019050612191565b5085935050505092915050565b600060208201905081810360008301526121e5818461216d565b905092915050565b60008083601f84011261220357612202611e15565b5b8235905067ffffffffffffffff8111156122205761221f611e1a565b5b60208301915083600182028301111561223c5761223b611e1f565b5b9250929050565b60008060008060008060008060a0898b03121561226357612262611d50565b5b60006122718b828c01611f44565b98505060206122828b828c01611f44565b975050604089013567ffffffffffffffff8111156122a3576122a2611d55565b5b6122af8b828c01611e24565b9650965050606089013567ffffffffffffffff8111156122d2576122d1611d55565b5b6122de8b828c01611e24565b9450945050608089013567ffffffffffffffff81111561230157612300611d55565b5b61230d8b828c016121ed565b92509250509295985092959890939650565b61232881611d5a565b82525050565b6000602082019050612343600083018461231f565b92915050565b60008060008060008060a0878903121561236657612365611d50565b5b600061237489828a01611f44565b965050602061238589828a01611f44565b955050604061239689828a01611f7a565b94505060606123a789828a01611f7a565b935050608087013567ffffffffffffffff8111156123c8576123c7611d55565b5b6123d489828a016121ed565b92509250509295509295509295565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061242a6010836123e3565b9150612435826123f4565b602082019050919050565b600060208201905081810360008301526124598161241d565b9050919050565b7f44654d696e654167656e743a206172726179206c656e677468206d69736d617460008201527f6368000000000000000000000000000000000000000000000000000000000000602082015250565b60006124bc6022836123e3565b91506124c782612460565b604082019050919050565b600060208201905081810360008301526124eb816124af565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f44654d696e654167656e743a20746f6b656e206e6f742072656465656d61626c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b600061257d6021836123e3565b915061258882612521565b604082019050919050565b600060208201905081810360008301526125ac81612570565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125ed82611f59565b91506125f883611f59565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612631576126306125b3565b5b828202905092915050565b600061264782611f59565b915061265283611f59565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612687576126866125b3565b5b828201905092915050565b7f44654d696e654167656e743a206e6f2073756666696369656e742062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006126ee6022836123e3565b91506126f982612692565b604082019050919050565b6000602082019050818103600083015261271d816126e1565b9050919050565b600061272f82611f59565b915061273a83611f59565b92508282101561274d5761274c6125b3565b5b828203905092915050565b600061276382611f59565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612796576127956125b3565b5b600182019050919050565b600080fd5b82818337600083830152505050565b60006127c18385612127565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156127f4576127f36127a1565b5b6020830292506128058385846127a6565b82840190509392505050565b6000604082019050818103600083015261282c8186886127b5565b905081810360208301526128418184866127b5565b905095945050505050565b61285581611f1b565b82525050565b600082825260208201905092915050565b50565b600061287c60008361285b565b91506128878261286c565b600082019050919050565b600060a0820190506128a7600083018961284c565b6128b4602083018861284c565b81810360408301526128c78186886127b5565b905081810360608301526128dc8184866127b5565b905081810360808301526128ef8161286f565b9050979650505050505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612958602b836123e3565b9150612963826128fc565b604082019050919050565b600060208201905081810360008301526129878161294b565b9050919050565b60008151905061299d81611f2d565b92915050565b6000602082840312156129b9576129b8611d50565b5b60006129c78482850161298e565b91505092915050565b7f44654d696e654167656e743a20656e64206c6172676572207468616e2062696c60008201527f6c696e6700000000000000000000000000000000000000000000000000000000602082015250565b6000612a2c6024836123e3565b9150612a37826129d0565b604082019050919050565b60006020820190508181036000830152612a5b81612a1f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a9c82611f59565b9150612aa783611f59565b925082612ab757612ab6612a62565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f44654d696e654167656e743a206f6e6c79206d696e74656420746f6b656e732060008201527f66726f6d2044654d696e654e465420616c6c6f77656400000000000000000000602082015250565b6000612b4d6036836123e3565b9150612b5882612af1565b604082019050919050565b60006020820190508181036000830152612b7c81612b40565b9050919050565b6000612b8e82611efb565b9050919050565b612b9e81612b83565b8114612ba957600080fd5b50565b600081359050612bbb81612b95565b92915050565b600060208284031215612bd757612bd6611d50565b5b6000612be584828501612bac565b91505092915050565b7f44654d696e654167656e743a207061796f666620646562742066697273740000600082015250565b6000612c24601e836123e3565b9150612c2f82612bee565b602082019050919050565b60006020820190508181036000830152612c5381612c17565b9050919050565b7f44654d696e654167656e743a206e6f206e65656420746f2061646a7573740000600082015250565b6000612c90601e836123e3565b9150612c9b82612c5a565b602082019050919050565b60006020820190508181036000830152612cbf81612c83565b9050919050565b612ccf81611f59565b82525050565b6000606082019050612cea600083018661284c565b612cf7602083018561284c565b612d046040830184612cc6565b949350505050565b6000604082019050612d21600083018561284c565b612d2e6020830184612cc6565b9392505050565b612d3e81611ddf565b8114612d4957600080fd5b50565b600081519050612d5b81612d35565b92915050565b600060208284031215612d7757612d76611d50565b5b6000612d8584828501612d4c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612dea602a836123e3565b9150612df582612d8e565b604082019050919050565b60006020820190508181036000830152612e1981612ddd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612e7c6026836123e3565b9150612e8782612e20565b604082019050919050565b60006020820190508181036000830152612eab81612e6f565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612ee8601d836123e3565b9150612ef382612eb2565b602082019050919050565b60006020820190508181036000830152612f1781612edb565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612f52578082015181840152602081019050612f37565b83811115612f61576000848401525b50505050565b6000612f7282612f1e565b612f7c8185612f29565b9350612f8c818560208601612f34565b80840191505092915050565b6000612fa48284612f67565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000612fd682612faf565b612fe081856123e3565b9350612ff0818560208601612f34565b612ff981612fba565b840191505092915050565b6000602082019050818103600083015261301e8184612fcb565b90509291505056fea2646970667358221220cd5673b9004bccf366c1f65137726240e66e247019d19eb46ff393d5cc34d4f964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80637fa084a2116100665780637fa084a214610130578063afd690861461014c578063bc197c811461017c578063c7b7f88a146101ac578063f23a6e61146101b657610093565b806301ffc9a7146100985780632ca51e22146100c857806346639dba146100e45780637b510fe814610100575b600080fd5b6100b260048036038101906100ad9190611db2565b6101e6565b6040516100bf9190611dfa565b60405180910390f35b6100e260048036038101906100dd9190611e7a565b610209565b005b6100fe60048036038101906100f99190611f8f565b610640565b005b61011a60048036038101906101159190611ff6565b61082b565b6040516101279190612074565b60405180910390f35b61014a6004803603810190610145919061208f565b6108a5565b005b610166600480360381019061016191906120bc565b610c0c565b60405161017391906121cb565b60405180910390f35b61019660048036038101906101919190612243565b610d17565b6040516101a3919061232e565b60405180910390f35b6101b4611008565b005b6101d060048036038101906101cb9190612349565b61134e565b6040516101dd919061232e565b60405180910390f35b6000610202826101f4611360565b61138d90919063ffffffff16565b9050919050565b6102116113f8565b60000160009054906101000a900460ff1615610262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025990612440565b60405180910390fd5b8181905084849050146102aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a1906124d2565b60405180910390fd5b600080600001549050600080600601549050600080600090505b878790508110156104d157828888838181106102e3576102e26124f2565b5b90506020020135101561032b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032290612593565b60405180910390fd5b85858281811061033e5761033d6124f2565b5b905060200201358461035091906125e2565b8261035b919061263c565b915060008060090160008a8a85818110610378576103776124f2565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508686838181106103e0576103df6124f2565b5b905060200201358111610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041f90612704565b60405180910390fd5b86868381811061043b5761043a6124f2565b5b905060200201358161044d9190612724565b600060090160008b8b86818110610467576104666124f2565b5b90506020020135815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104c990612758565b9150506102c4565b5061054933600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611425909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fd63285f33fab7fc260b1b9e7ce1abbf3fc8906df5a271e6ebd3062bdca7bb29e888888886040516105959493929190612811565b60405180910390a2600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632eb2c2d630338a8a8a8a6040518763ffffffff1660e01b815260040161060596959493929190612892565b600060405180830381600087803b15801561061f57600080fd5b505af1158015610633573d6000803e3d6000fd5b5050505050505050505050565b6106486114ae565b60000160019054906101000a900460ff16610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f9061296e565b60405180910390fd5b600084905080600060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16637fe205c76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075091906129a3565b600060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160008001819055505050505050565b610833611d2f565b600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b6108ad6113f8565b60000160009054906101000a900460ff16156108fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f590612440565b60405180910390fd5b600080600061090c336114db565b90506000600601548410610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90612a42565b60405180910390fd5b6000816000015190505b848111610acc57600080600901600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610ab8576000806007016000848152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090508060000151828260200151610a1d91906125e2565b610a279190612a91565b86610a32919061263c565b9550610a51828260400151610a4791906125e2565b826000015161158e565b85610a5c919061263c565b9450600080600901600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b508080610ac490612758565b91505061095f565b50600184610ada919061263c565b600060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550610b9a600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611425909392919063ffffffff16565b8160006005016000828254610baf919061263c565b92505081905550610c063384600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115c69092919063ffffffff16565b50505050565b606060008383905067ffffffffffffffff811115610c2d57610c2c612ac2565b5b604051908082528060200260200182016040528015610c5b5781602001602082028036833780820191505090505b50905060005b84849050811015610d0b5760006009016000868684818110610c8657610c856124f2565b5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610cec57610ceb6124f2565b5b6020026020010181815250508080610d0390612758565b915050610c61565b50809150509392505050565b60008060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610da45750600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b610de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dda90612b63565b60405180910390fd5b60008383810190610df49190612bc1565b90506000610e01826114db565b9050600060405180606001604052807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152602001600081526020016000815250905060005b8a8a9050811015610fe3576000898983818110610e6757610e666124f2565b5b90506020020135600060090160008e8e86818110610e8857610e876124f2565b5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ee5919061263c565b905080600060090160008e8e86818110610f0257610f016124f2565b5b90506020020135815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f6681846040015161164c565b836040018181525050610f968c8c84818110610f8557610f846124f2565b5b905060200201358460000151611665565b836000018181525050610fc68c8c84818110610fb557610fb46124f2565b5b90506020020135846020015161164c565b836020018181525050508080610fdb90612758565b915050610e47565b50610fef83838361167e565b63bc197c8160e01b935050505098975050505050505050565b6110106113f8565b60000160009054906101000a900460ff1615611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105890612440565b60405180910390fd5b600061106c336114db565b9050600060060154816000015110156110ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b190612c3a565b60405180910390fd5b6000816040015111611101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f890612ca6565b60405180910390fd5b600060405180606001604052808360000151815260200183602001518152602001600081525090505b60008060090160008360000151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561119857508060200151816000015111155b156111bc576001816000018181516111b0919061263c565b9150818152505061112a565b5b60008060090160008360200151815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561122b57508060000151816020015110155b1561124f576001816020018181516112439190612724565b915081815250506111bd565b8060200151816000015111156112ab576112a6338360405180606001604052807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81526020016000815260200160008152506118b3565b61134a565b6000816000015190505b8160200151811161133d5761132182604001516000600901600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461164c565b826040018181525050808061133590612758565b9150506112b5565b506113493383836118b3565b5b5050565b60008060e01b90509695505050505050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b6114a8846323b872dd60e01b85858560405160240161144693929190612cd5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a97565b50505050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b6114e3611d2f565b600060080160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905080600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6115809190612724565b816000018181525050919050565b60008182600184866115a0919061263c565b6115aa9190612724565b6115b49190612a91565b6115be91906125e2565b905092915050565b6116478363a9059cbb60e01b84846040516024016115e5929190612d0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a97565b505050565b600081831161165b578161165d565b825b905092915050565b60008183106116745781611676565b825b905092915050565b8160000151816000015110156117165780600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6116be9190612724565b600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600001518260000181815250505b816020015181602001511115611783578060000151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080602001518260200181815250505b8160400151816040015111156118ae578060400151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550806040015182604001818152505060006117f9611b5e565b8360400151836040015161180d9190612724565b61181791906125e2565b905061189033600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611425909392919063ffffffff16565b80600060050160008282546118a5919061263c565b92505081905550505b505050565b81600001518160000151111561193d5780600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6118f39190612724565b600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b81602001518160200151101561199c578060200151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b816040015181604001511015611a92578060400151600060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000611a04611b5e565b82604001518460400151611a189190612724565b611a2291906125e2565b9050611a748482600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115c69092919063ffffffff16565b8060006005016000828254611a899190612724565b92505081905550505b505050565b6000611af9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b899092919063ffffffff16565b9050600081511115611b595780806020019051810190611b199190612d61565b611b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4f90612e00565b60405180910390fd5b5b505050565b60008060040160159054906101000a900460ff1660ff166000800154611b8491906125e2565b905090565b6060611b988484600085611ba1565b90509392505050565b606082471015611be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdd90612e92565b60405180910390fd5b611bef85611cb5565b611c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2590612efe565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c579190612f98565b60006040518083038185875af1925050503d8060008114611c94576040519150601f19603f3d011682016040523d82523d6000602084013e611c99565b606091505b5091509150611ca9828286611cc8565b92505050949350505050565b600080823b905060008111915050919050565b60608315611cd857829050611d28565b600083511115611ceb5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1f9190613004565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611d8f81611d5a565b8114611d9a57600080fd5b50565b600081359050611dac81611d86565b92915050565b600060208284031215611dc857611dc7611d50565b5b6000611dd684828501611d9d565b91505092915050565b60008115159050919050565b611df481611ddf565b82525050565b6000602082019050611e0f6000830184611deb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e3a57611e39611e15565b5b8235905067ffffffffffffffff811115611e5757611e56611e1a565b5b602083019150836020820283011115611e7357611e72611e1f565b5b9250929050565b60008060008060408587031215611e9457611e93611d50565b5b600085013567ffffffffffffffff811115611eb257611eb1611d55565b5b611ebe87828801611e24565b9450945050602085013567ffffffffffffffff811115611ee157611ee0611d55565b5b611eed87828801611e24565b925092505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f2682611efb565b9050919050565b611f3681611f1b565b8114611f4157600080fd5b50565b600081359050611f5381611f2d565b92915050565b6000819050919050565b611f6c81611f59565b8114611f7757600080fd5b50565b600081359050611f8981611f63565b92915050565b60008060008060808587031215611fa957611fa8611d50565b5b6000611fb787828801611f44565b9450506020611fc887828801611f44565b9350506040611fd987828801611f44565b9250506060611fea87828801611f7a565b91505092959194509250565b60006020828403121561200c5761200b611d50565b5b600061201a84828501611f44565b91505092915050565b61202c81611f59565b82525050565b6060820160008201516120486000850182612023565b50602082015161205b6020850182612023565b50604082015161206e6040850182612023565b50505050565b60006060820190506120896000830184612032565b92915050565b6000602082840312156120a5576120a4611d50565b5b60006120b384828501611f7a565b91505092915050565b6000806000604084860312156120d5576120d4611d50565b5b60006120e386828701611f44565b935050602084013567ffffffffffffffff81111561210457612103611d55565b5b61211086828701611e24565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006121548383612023565b60208301905092915050565b6000602082019050919050565b60006121788261211c565b6121828185612127565b935061218d83612138565b8060005b838110156121be5781516121a58882612148565b97506121b083612160565b925050600181019050612191565b5085935050505092915050565b600060208201905081810360008301526121e5818461216d565b905092915050565b60008083601f84011261220357612202611e15565b5b8235905067ffffffffffffffff8111156122205761221f611e1a565b5b60208301915083600182028301111561223c5761223b611e1f565b5b9250929050565b60008060008060008060008060a0898b03121561226357612262611d50565b5b60006122718b828c01611f44565b98505060206122828b828c01611f44565b975050604089013567ffffffffffffffff8111156122a3576122a2611d55565b5b6122af8b828c01611e24565b9650965050606089013567ffffffffffffffff8111156122d2576122d1611d55565b5b6122de8b828c01611e24565b9450945050608089013567ffffffffffffffff81111561230157612300611d55565b5b61230d8b828c016121ed565b92509250509295985092959890939650565b61232881611d5a565b82525050565b6000602082019050612343600083018461231f565b92915050565b60008060008060008060a0878903121561236657612365611d50565b5b600061237489828a01611f44565b965050602061238589828a01611f44565b955050604061239689828a01611f7a565b94505060606123a789828a01611f7a565b935050608087013567ffffffffffffffff8111156123c8576123c7611d55565b5b6123d489828a016121ed565b92509250509295509295509295565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061242a6010836123e3565b9150612435826123f4565b602082019050919050565b600060208201905081810360008301526124598161241d565b9050919050565b7f44654d696e654167656e743a206172726179206c656e677468206d69736d617460008201527f6368000000000000000000000000000000000000000000000000000000000000602082015250565b60006124bc6022836123e3565b91506124c782612460565b604082019050919050565b600060208201905081810360008301526124eb816124af565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f44654d696e654167656e743a20746f6b656e206e6f742072656465656d61626c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b600061257d6021836123e3565b915061258882612521565b604082019050919050565b600060208201905081810360008301526125ac81612570565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125ed82611f59565b91506125f883611f59565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612631576126306125b3565b5b828202905092915050565b600061264782611f59565b915061265283611f59565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612687576126866125b3565b5b828201905092915050565b7f44654d696e654167656e743a206e6f2073756666696369656e742062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006126ee6022836123e3565b91506126f982612692565b604082019050919050565b6000602082019050818103600083015261271d816126e1565b9050919050565b600061272f82611f59565b915061273a83611f59565b92508282101561274d5761274c6125b3565b5b828203905092915050565b600061276382611f59565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612796576127956125b3565b5b600182019050919050565b600080fd5b82818337600083830152505050565b60006127c18385612127565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156127f4576127f36127a1565b5b6020830292506128058385846127a6565b82840190509392505050565b6000604082019050818103600083015261282c8186886127b5565b905081810360208301526128418184866127b5565b905095945050505050565b61285581611f1b565b82525050565b600082825260208201905092915050565b50565b600061287c60008361285b565b91506128878261286c565b600082019050919050565b600060a0820190506128a7600083018961284c565b6128b4602083018861284c565b81810360408301526128c78186886127b5565b905081810360608301526128dc8184866127b5565b905081810360808301526128ef8161286f565b9050979650505050505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612958602b836123e3565b9150612963826128fc565b604082019050919050565b600060208201905081810360008301526129878161294b565b9050919050565b60008151905061299d81611f2d565b92915050565b6000602082840312156129b9576129b8611d50565b5b60006129c78482850161298e565b91505092915050565b7f44654d696e654167656e743a20656e64206c6172676572207468616e2062696c60008201527f6c696e6700000000000000000000000000000000000000000000000000000000602082015250565b6000612a2c6024836123e3565b9150612a37826129d0565b604082019050919050565b60006020820190508181036000830152612a5b81612a1f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a9c82611f59565b9150612aa783611f59565b925082612ab757612ab6612a62565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f44654d696e654167656e743a206f6e6c79206d696e74656420746f6b656e732060008201527f66726f6d2044654d696e654e465420616c6c6f77656400000000000000000000602082015250565b6000612b4d6036836123e3565b9150612b5882612af1565b604082019050919050565b60006020820190508181036000830152612b7c81612b40565b9050919050565b6000612b8e82611efb565b9050919050565b612b9e81612b83565b8114612ba957600080fd5b50565b600081359050612bbb81612b95565b92915050565b600060208284031215612bd757612bd6611d50565b5b6000612be584828501612bac565b91505092915050565b7f44654d696e654167656e743a207061796f666620646562742066697273740000600082015250565b6000612c24601e836123e3565b9150612c2f82612bee565b602082019050919050565b60006020820190508181036000830152612c5381612c17565b9050919050565b7f44654d696e654167656e743a206e6f206e65656420746f2061646a7573740000600082015250565b6000612c90601e836123e3565b9150612c9b82612c5a565b602082019050919050565b60006020820190508181036000830152612cbf81612c83565b9050919050565b612ccf81611f59565b82525050565b6000606082019050612cea600083018661284c565b612cf7602083018561284c565b612d046040830184612cc6565b949350505050565b6000604082019050612d21600083018561284c565b612d2e6020830184612cc6565b9392505050565b612d3e81611ddf565b8114612d4957600080fd5b50565b600081519050612d5b81612d35565b92915050565b600060208284031215612d7757612d76611d50565b5b6000612d8584828501612d4c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612dea602a836123e3565b9150612df582612d8e565b604082019050919050565b60006020820190508181036000830152612e1981612ddd565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612e7c6026836123e3565b9150612e8782612e20565b604082019050919050565b60006020820190508181036000830152612eab81612e6f565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612ee8601d836123e3565b9150612ef382612eb2565b602082019050919050565b60006020820190508181036000830152612f1781612edb565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612f52578082015181840152602081019050612f37565b83811115612f61576000848401525b50505050565b6000612f7282612f1e565b612f7c8185612f29565b9350612f8c818560208601612f34565b80840191505092915050565b6000612fa48284612f67565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000612fd682612faf565b612fe081856123e3565b9350612ff0818560208601612f34565b612ff981612fba565b840191505092915050565b6000602082019050818103600083015261301e8184612fcb565b90509291505056fea2646970667358221220cd5673b9004bccf366c1f65137726240e66e247019d19eb46ff393d5cc34d4f964736f6c634300080b0033",
  "devdoc": {
    "author": "Shu Dong",
    "details": "the contract also implements IERC1155Receiver to receive and lock demine nft",
    "kind": "dev",
    "methods": {
      "getAccountInfo(address)": {
        "params": {
          "account": "Address of account to query"
        }
      },
      "redeem(uint256[],uint256[])": {
        "params": {
          "amounts": "Amount of each demine nft token",
          "ids": "DeMine nft token ids to redeem"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      }
    },
    "title": "MortgageFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adjustDeposit()": {
        "notice": "adjust deposit for msg sender and update account info         Ensure you have a valid start and end set for msg.sender         to prevent infinite loop"
      },
      "getAccountInfo(address)": {
        "notice": "get account info"
      },
      "payoff(uint256)": {
        "notice": "payoff debt from start to end. Ensure you have a         valid start set to prevent infinite loop"
      },
      "redeem(uint256[],uint256[])": {
        "notice": "Pay token cost and liquidize tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      }
    },
    "notice": "Facet contract holding functions for miners to manage mortgage.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7751,
        "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)9671_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC1155Rewardable)10912": {
        "encoding": "inplace",
        "label": "contract IERC1155Rewardable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)483": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Account)9618_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)9618_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Statement)9625_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Statement)",
        "numberOfBytes": "32",
        "value": "t_struct(Statement)9625_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Account)9618_storage": {
        "encoding": "inplace",
        "label": "struct Account",
        "members": [
          {
            "astId": 9613,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9615,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9617,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "maxBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AppStorage)9671_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 9627,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "tokenCost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9630,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "income",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)483"
          },
          {
            "astId": 9633,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "payment",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)483"
          },
          {
            "astId": 9636,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "nft",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC1155Rewardable)10912"
          },
          {
            "astId": 9638,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "payee",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9640,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "initialized",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 9642,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "depositMultiplier",
            "offset": 21,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 9644,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "deposit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9646,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "billing",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9651,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "statements",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Statement)9625_storage)"
          },
          {
            "astId": 9656,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "accounts",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_struct(Account)9618_storage)"
          },
          {
            "astId": 9662,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "balances",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 9670,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "allowances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Statement)9625_storage": {
        "encoding": "inplace",
        "label": "struct Statement",
        "members": [
          {
            "astId": 9620,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9622,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "income",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9624,
            "contract": "contracts/agent/facets/MortgageFacet.sol:MortgageFacet",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}