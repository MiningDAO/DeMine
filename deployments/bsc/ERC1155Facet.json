{
  "address": "0xA3CbEDda9975530110f5283369B0F58e8124B9CE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "custodian",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalEarning",
          "type": "uint256"
        }
      ],
      "name": "Alchemy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Finalize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "TokenRoyaltyBpsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "custodian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "earning",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earningToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "endOfDay",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "earningPerTPerDay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "custodian",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalEarning",
          "type": "uint256"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_earningToken",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "supplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "supplyOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7aadf3af4c2a192c671e943ad9fcb90684b3ccc549650305c981a7df666a824d",
  "receipt": {
    "to": null,
    "from": "0x633Da015e60F63b7de56817e9680D532aAa20016",
    "contractAddress": "0xA3CbEDda9975530110f5283369B0F58e8124B9CE",
    "transactionIndex": 113,
    "gasUsed": "4351010",
    "logsBloom": "0x
    "blockHash": "0x8942ae18288ff80bc895c38d402c71da83a5a09e2dd3d9b22d50145dbe7b261d",
    "transactionHash": "0x7aadf3af4c2a192c671e943ad9fcb90684b3ccc549650305c981a7df666a824d",
    "logs": [],
    "blockNumber": 15098742,
    "cumulativeGasUsed": "22828307",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x38d38f83A45cc6FC916cA8badd77d61006aeB89F"
  ],
  "numDeployments": 2,
  "solcInputHash": "025e39e0d63240003af6e7ed5db9df38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEarning\",\"type\":\"uint256\"}],\"name\":\"Alchemy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Finalize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"TokenRoyaltyBpsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"earning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earningToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"endOfDay\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"earningPerTPerDay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalEarning\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earningToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"supplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"supplyOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"uri(uint256)\":{\"notice\":\"inheritdoc IERC1155Metadata\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/facets/ERC1155Facet.sol\":\"ERC1155Facet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x424c81402a2f7e851f916cf037c59f41c867927b4fdb93434200a9873cfc0f52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x67a1fe72acad2d6960c8ac2a0ec981a5461e3cb52723709b32120de88eb76abf\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x31fcdbc3c885a95d0449d9b5f20a7ef0cae2fa63bd82195995d05a7eecaa5f74\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155 } from '../IERC1155.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            'ERC1155: accounts and ids length mismatch'\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(\\n                    accounts[i] != address(0),\\n                    'ERC1155: batch balance query for the zero address'\\n                );\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            msg.sender != operator,\\n            'ERC1155: setting approval status for self'\\n        );\\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xe2e044ac6fc81e938ae06bea0350352472c8a77ff29ac09263d268c6610f9b00\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155Internal } from '../IERC1155Internal.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155Internal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            'ERC1155: balance query for the zero address'\\n        );\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n        balances[account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            balances[ids[i]][account] += amounts[i];\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            require(\\n                balances[account] >= amount,\\n                'ERC1155: burn amount exceeds balances'\\n            );\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(\\n                    balances[id][account] >= amounts[i],\\n                    'ERC1155: burn amount exceeds balance'\\n                );\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(\\n                senderBalance >= amount,\\n                'ERC1155: insufficient balances for transfer'\\n            );\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n                require(\\n                    senderBalance >= amount,\\n                    'ERC1155: insufficient balances for transfer'\\n                );\\n                balances[token][sender] = senderBalance - amount;\\n            }\\n\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response ==\\n                        IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x16e4fd77dcb8f4cd933b209137560afb59b4e7bec7b64ee39cc24f1594b356a9\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8db92a910e779b41952ea8c28ee143ccdf6d4bc43b0ca984ceda9ef67956493d\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { IERC1155Metadata } from './IERC1155Metadata.sol';\\nimport { ERC1155MetadataInternal } from './ERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nabstract contract ERC1155Metadata is IERC1155Metadata, ERC1155MetadataInternal {\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6322c9474aa916850b855eb9bce0e56e85705740e78b9e9028fccca907d235bb\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155Metadata internal functions\\n */\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataInternal {\\n    /**\\n     * @notice set base metadata URI\\n     * @dev base URI is a non-standard feature adapted from the ERC721 specification\\n     * @param baseURI base URI\\n     */\\n    function _setBaseURI(string memory baseURI) internal {\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @notice set per-token metadata URI\\n     * @param tokenId token whose metadata URI to set\\n     * @param tokenURI per-token URI\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x922b91abc8972541855e56fd93468ee9f0178a68551c6b4ece6df639accf6d68\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Metadata');\\n\\n    struct Layout {\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb01fdd26dbaf6423ff6b208fd58cfefd84dbaf9a0bebcd64f3ff7467e691c6a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf0fcc6093a6eb3c0254814f365cc11cb5ec8e7b66493d52a02d9892de2fc198c\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0xe379314dbf1cfb48fc693a904e845a56d88056376b571a52f5a54a14a390c475\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UintUtils {\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x58c2a621bfa49d032bee277f6f1803b95567cb42178e33d3c0e0a04066991b62\",\"license\":\"MIT\"},\"contracts/nft/facets/ERC1155Config.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol';\\n\\nimport '../interfaces/IERC2981.sol';\\nimport '../interfaces/IERC1155Rewardable.sol';\\nimport '../lib/AppStorage.sol';\\n\\nabstract contract ERC1155Config is\\n    OwnableInternal,\\n    IERC2981,\\n    IERC1155Rewardable,\\n    ERC1155Metadata\\n{\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n    address immutable _custodian;\\n    AppStorage internal s;\\n\\n    constructor(address c) {\\n        _custodian = c;\\n        s.status = _NOT_ENTERED;\\n    }\\n\\n    event TokenRoyaltyBpsSet(uint16);\\n\\n    modifier nonReentrant() {\\n        require(s.status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        s.status = _ENTERED;\\n        _;\\n        s.status = _NOT_ENTERED;\\n    }\\n\\n    function setURI(string memory baseURI) external onlyOwner {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    function setRoyaltyInfo(address recipient, uint16 bps) external onlyOwner {\\n        s.royalty = RoyaltyInfo(recipient, bps);\\n        emit TokenRoyaltyBpsSet(bps);\\n    }\\n\\n    function royaltyInfo(uint256, uint256 value)\\n        external\\n        view\\n        override\\n        returns (address, uint256)\\n    {\\n        RoyaltyInfo memory r = s.royalty;\\n        return (r.recipient, (value * r.bps) / 10000);\\n    }\\n\\n    function earningToken() external override view returns(address) {\\n        return s.earningToken;\\n    }\\n\\n    function custodian() external override view returns(address) {\\n        return _custodian;\\n    }\\n\\n    function finalized() external view returns(uint128) {\\n        return s.finalized;\\n    }\\n\\n    function supplyOf(uint id) external view returns(uint) {\\n        return s.supply[id];\\n    }\\n\\n    function supplyOfBatch(\\n        uint[] calldata ids\\n    ) external view returns(uint[] memory) {\\n        uint[] memory res = new uint[](ids.length);\\n        for (uint i = 0; i < ids.length; i++) {\\n            res[i] = s.supply[ids[i]];\\n        }\\n        return res;\\n    }\\n\\n    function earning(uint tokenId) external view returns(uint) {\\n        uint128 start = uint128(tokenId >> 128);\\n        uint128 end = uint128(tokenId);\\n        return _earning(start, end);\\n    }\\n\\n    function _earning(uint128 start, uint128 end)\\n        internal\\n        view\\n        returns(uint value)\\n    {\\n        // daily token\\n        if (end - start == 86400) {\\n            value = s.daily[end];\\n        // weekly token\\n        } else if (end - start == 604800) {\\n            value = s.weekly[end];\\n        // biweekly token\\n        } else if (end - start == 1209600) {\\n            value = s.weekly[end] + s.weekly[end - 604800];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8747aa168561e5320f66ac8ede1f25039f16ee3e225bf9fa3900645d6ffba05\",\"license\":\"MIT\"},\"contracts/nft/facets/ERC1155Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma experimental ABIEncoderV2;\\n\\nimport '@solidstate/contracts/access/OwnableStorage.sol';\\nimport '@solidstate/contracts/introspection/ERC165.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\nimport '@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol';\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport '../../shared/lib/LibPausable.sol';\\nimport '../../shared/lib/LibInitializable.sol';\\nimport './ERC1155Config.sol';\\n\\ncontract ERC1155Facet is\\n    Initializable,\\n    ERC1155Base,\\n    ERC1155Config,\\n    ERC165\\n{\\n    using SafeERC20 for IERC20;\\n\\n    event Finalize(uint128 indexed, uint indexed);\\n    event Alchemy(address indexed account, uint totalEarning);\\n\\n    function init(address _earningToken) external onlyInitializing {\\n        s.earningToken = _earningToken;\\n        s.royalty = RoyaltyInfo(\\n            OwnableStorage.layout().owner, 100\\n        );\\n    }\\n\\n    constructor(address custodian) ERC1155Config(custodian) {}\\n\\n    function mint(\\n        uint[] calldata ids,\\n        uint[] calldata amounts,\\n        bytes memory data\\n    ) external onlyOwner {\\n        _safeMintBatch(_custodian, ids, amounts, data);\\n    }\\n\\n    function finalize(\\n        uint128 endOfDay,\\n        uint earningPerTPerDay,\\n        address custodian,\\n        uint totalEarning\\n    ) external onlyOwner {\\n        require(\\n            endOfDay > s.finalized && endOfDay % 86400 == 0,\\n            'DeMineNFT: invalid timestamp'\\n        );\\n        s.finalized = endOfDay;\\n        s.daily[endOfDay] = earningPerTPerDay;\\n        for(uint128 i = 0; i < 7; i++) {\\n            s.weekly[endOfDay + i * 86400] += earningPerTPerDay;\\n        }\\n        IERC20(s.earningToken).safeTransferFrom(\\n            custodian,\\n            address(this),\\n            totalEarning\\n        );\\n        emit Finalize(endOfDay, earningPerTPerDay);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint[] memory ids,\\n        uint[] memory amounts,\\n        bytes memory data\\n    ) internal nonReentrant virtual override(ERC1155BaseInternal) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        // mint\\n        if (from == address(0)) {\\n            for (uint i = 0; i < ids.length; i++) {\\n                s.supply[ids[i]] += amounts[i];\\n            }\\n        // alchemize or burn\\n        } else if (to == _custodian) {\\n            require(!LibPausable.layout().paused, 'Pausable: paused');\\n            uint totalEarning;\\n            uint lastFinalized = s.finalized;\\n            for (uint i; i < ids.length; i++) {\\n                uint128 end = uint128(ids[i]);\\n                if (end <= lastFinalized) { // already finalized\\n                    uint128 start = uint128(ids[i] >> 128);\\n                    totalEarning += amounts[i] * _earning(start, end);\\n                }\\n            }\\n            if (totalEarning > 0) {\\n                IERC20(s.earningToken).safeTransfer(from, totalEarning);\\n                emit Alchemy(from, totalEarning);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa9e7382e2e2ac241f2891c64f288c4ff85a9615580fc20e3bf406aae1763a0f\",\"license\":\"MIT\"},\"contracts/nft/interfaces/IERC1155Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IERC1155Rewardable is IERC1155 {\\n    function custodian() external view returns(address);\\n\\n    function earningToken() external view returns(address);\\n}\\n\",\"keccak256\":\"0xac6ed88e2b851fcbc70ca389bbe6c6db551b619fe70375995fe7f11d69d69b47\",\"license\":\"MIT\"},\"contracts/nft/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/introspection/IERC165.sol';\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0d704034afe6becd01db4f04a85b6fd59bab51ae2693ef278a16e15111fd48ab\",\"license\":\"MIT\"},\"contracts/nft/lib/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nstruct RoyaltyInfo {\\n    address recipient;\\n    uint16 bps;\\n}\\n\\nstruct AppStorage {\\n    RoyaltyInfo royalty;\\n    address earningToken;\\n    uint256 status;\\n\\n    // Oracle\\n    uint128 finalized;\\n    mapping(uint128 => uint) daily;\\n    mapping(uint128 => uint) weekly;\\n\\n    // supply\\n    mapping(uint => uint) supply;\\n}\\n\",\"keccak256\":\"0x4fa4bffd0f1166a9e3a44dc7b34bbbed582ca8087537357b3fba1724008dd4c9\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Emitted when paused by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when unpaused by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Should return if the contract is paused\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     * @dev pause the contract\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev unpause the contract\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xb33768d5a13e8aa6c9c15a2988d677ec850db777536db6ab0c38f0f768f71569\",\"license\":\"MIT\"},\"contracts/shared/lib/LibInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/utils/AddressUtils.sol';\\n\\n/**\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary InitializableStorage {\\n    struct Layout {\\n        bool initialized;\\n        bool initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('demine.contracts.storage.Initializable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    modifier initializer() {\\n        InitializableStorage.Layout storage l = InitializableStorage.layout();\\n        require(\\n            l.initializing ? isConstructor() : !l.initialized,\\n            'Initializable: contract is already initialized'\\n        );\\n        bool isTopLevelCall = !l.initializing;\\n        if (isTopLevelCall) {\\n            l.initializing = true;\\n            l.initialized = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            l.initializing = false;\\n        }\\n    }\\n\\n    modifier onlyInitializing() {\\n        require(\\n            InitializableStorage.layout().initializing,\\n            'Initializable: contract is not initializing'\\n        );\\n        _;\\n    }\\n\\n    function isConstructor() private view returns (bool) {\\n        return !AddressUtils.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9fad7cc55f61de87ce9768325bf94406261eaf42f198e1a69f3ead0dc56b656d\",\"license\":\"MIT\"},\"contracts/shared/lib/LibPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@solidstate/contracts/access/OwnableInternal.sol';\\nimport '../interfaces/IPausable.sol';\\n\\nlibrary LibPausable {\\n    struct Layout {\\n        bool paused;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Pausable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\nabstract contract PausableModifier {\\n    modifier whenPaused() {\\n        require(LibPausable.layout().paused, 'Pausable: not paused');\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibPausable.layout().paused, 'Pausable: paused');\\n        _;\\n    }\\n}\\n\\nabstract contract Pausable is IPausable, OwnableInternal {\\n    function paused() external override view returns (bool) {\\n        return LibPausable.layout().paused;\\n    }\\n\\n    function pause() external onlyOwner override {\\n        LibPausable.layout().paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner override {\\n        LibPausable.layout().paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x86af35526539727370e6cfcd7132918c2b8923052391f7a1816458066006979a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004ee438038062004ee48339818101604052810190620000379190620000e9565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050600160006002018190555050506200011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b620000c381620000a4565b8114620000cf57600080fd5b50565b600081519050620000e381620000b8565b92915050565b6000602082840312156200010257620001016200007f565b5b60006200011284828501620000d2565b91505092915050565b608051614d9f6200014560003960008181610a68015281816111d901526128af0152614d9f6000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c80634e1273f4116100ad5780638ff45d93116100715780638ff45d9314610379578063a22cb46514610395578063b3f05b97146103b1578063e985e9c5146103cf578063f242432a146103ff5761012b565b80634e1273f4146102c35780635840799f146102f357806372504a241461030f5780637fe205c71461032b5780638806792f146103495761012b565b806319ab453c116100f457806319ab453c1461020c5780632a55205a146102285780632ac3fad9146102595780632eb2c2d614610289578063375b74c3146102a55761012b565b8062fdd58e1461013057806301ffc9a71461016057806302fe5305146101905780630d071e63146101ac5780630e89341c146101dc575b600080fd5b61014a60048036038101906101459190612f45565b61041b565b6040516101579190612f94565b60405180910390f35b61017a60048036038101906101759190613007565b61042f565b604051610187919061304f565b60405180910390f35b6101aa60048036038101906101a591906131b0565b610452565b005b6101c660048036038101906101c19190613259565b6104f7565b6040516101d39190613364565b60405180910390f35b6101f660048036038101906101f19190613386565b6105c4565b604051610203919061343b565b60405180910390f35b6102266004803603810190610221919061345d565b610785565b005b610242600480360381019061023d919061348a565b6108f0565b6040516102509291906134d9565b60405180910390f35b610273600480360381019061026e9190613386565b6109ae565b6040516102809190612f94565b60405180910390f35b6102a3600480360381019061029e9190613666565b6109d0565b005b6102ad610a64565b6040516102ba9190613735565b60405180910390f35b6102dd60048036038101906102d89190613813565b610a8c565b6040516102ea9190613364565b60405180910390f35b61030d600480360381019061030891906138d3565b610c81565b005b61032960048036038101906103249190613974565b610f7c565b005b6103336110f0565b6040516103409190613735565b60405180910390f35b610363600480360381019061035e9190613386565b61111c565b6040516103709190612f94565b60405180910390f35b610393600480360381019061038e91906139b4565b61113b565b005b6103af60048036038101906103aa9190613a91565b611289565b005b6103b96113fe565b6040516103c69190613ae0565b60405180910390f35b6103e960048036038101906103e49190613afb565b611426565b6040516103f6919061304f565b60405180910390f35b61041960048036038101906104149190613b3b565b6114c3565b005b60006104278383611557565b905092915050565b600061044b8261043d61162a565b61165790919063ffffffff16565b9050919050565b61045a6116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e290613c1e565b60405180910390fd5b6104f4816116ef565b50565b606060008383905067ffffffffffffffff81111561051857610517613085565b5b6040519080825280602002602001820160405280156105465781602001602082028036833780820191505090505b50905060005b848490508110156105b9576000600601600086868481811061057157610570613c3e565b5b9050602002013581526020019081526020016000205482828151811061059a57610599613c3e565b5b60200260200101818152505080806105b190613c9c565b91505061054c565b508091505092915050565b606060006105d0611712565b9050600081600101600085815260200190815260200160002080546105f490613d14565b80601f016020809104026020016040519081016040528092919081815260200182805461062090613d14565b801561066d5780601f106106425761010080835404028352916020019161066d565b820191906000526020600020905b81548152906001019060200180831161065057829003601f168201915b50505050509050600082600001805461068590613d14565b80601f01602080910402602001604051908101604052809291908181526020018280546106b190613d14565b80156106fe5780601f106106d3576101008083540402835291602001916106fe565b820191906000526020600020905b8154815290600101906020018083116106e157829003601f168201915b5050505050905060008151141561071a57819350505050610780565b600082511115610750578082604051602001610737929190613d82565b6040516020818303038152906040529350505050610780565b8061075a8661173f565b60405160200161076b929190613d82565b60405160208183030381529060405293505050505b919050565b61078d6118a0565b60000160019054906101000a900460ff166107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d490613e18565b60405180910390fd5b80600060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180604001604052806108346116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001606461ffff168152506000800160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548161ffff021916908361ffff16021790555090505050565b6000806000806000016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900461ffff1661ffff1661ffff168152505090508060000151612710826020015161ffff16866109989190613e38565b6109a29190613ec1565b92509250509250929050565b600080608083901c905060008390506109c782826118cd565b92505050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610a105750610a0f8533611426565b5b610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4690613f64565b60405180910390fd5b610a5d338686868686611a64565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60608151835114610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac990613ff6565b60405180910390fd5b6000610adc611a88565b60000190506000845167ffffffffffffffff811115610afe57610afd613085565b5b604051908082528060200260200182016040528015610b2c5781602001602082028036833780820191505090505b50905060005b8551811015610c7557600073ffffffffffffffffffffffffffffffffffffffff16868281518110610b6657610b65613c3e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbc90614088565b60405180910390fd5b826000868381518110610bdb57610bda613c3e565b5b602002602001015181526020019081526020016000206000878381518110610c0657610c05613c3e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610c5c57610c5b613c3e565b5b6020026020010181815250508080600101915050610b32565b50809250505092915050565b610c896116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1190613c1e565b60405180910390fd5b600060030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16118015610d8e575060006201518085610d7a91906140a8565b6fffffffffffffffffffffffffffffffff16145b610dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc490614125565b60405180910390fd5b83600060030160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508260006004016000866fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060005b6007816fffffffffffffffffffffffffffffffff161015610ee35783600060050160006201518084610e7d9190614145565b88610e88919061418f565b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ec991906141d5565b925050819055508080610edb9061422b565b915050610e4b565b50610f36823083600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611ab5909392919063ffffffff16565b82846fffffffffffffffffffffffffffffffff167ff9007d0dcd21bf7a26f5ec3bd5cf96e721c6e0faf320db4629dcd0895dcbeefb60405160405180910390a350505050565b610f846116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611015576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100c90613c1e565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff168152506000800160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548161ffff021916908361ffff1602179055509050507f577133166751d165db2e7f4c7b9f50ef67bf80781894fc7f4d53df1067a39df1816040516110e49190614273565b60405180910390a15050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806006016000838152602001908152602001600020549050919050565b6111436116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cb90613c1e565b60405180910390fd5b6112827f0000000000000000000000000000000000000000000000000000000000000000868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505084611b3e565b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90614300565b60405180910390fd5b80611301611a88565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113f2919061304f565b60405180910390a35050565b60008060030160009054906101000a90046fffffffffffffffffffffffffffffffff16905090565b6000611430611a88565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061150357506115028533611426565b5b611542576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153990613f64565b60405180910390fd5b611550338686868686611b5f565b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bf90614392565b60405180910390fd5b6115d0611a88565b600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b806116f8611712565b600001908051906020019061170e929190612dfa565b5050565b6000807f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f490508091505090565b60606000821415611787576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061189b565b600082905060005b600082146117b95780806117a290613c9c565b915050600a826117b29190613ec1565b915061178f565b60008167ffffffffffffffff8111156117d5576117d4613085565b5b6040519080825280601f01601f1916602001820160405280156118075781602001600182028036833780820191505090505b5090505b600085146118945760018261182091906143b2565b9150600a8561182f91906143e6565b603061183b91906141d5565b60f81b81838151811061185157611850613c3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561188d9190613ec1565b945061180b565b8093505050505b919050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b60006201518083836118df9190614417565b6fffffffffffffffffffffffffffffffff1614156119395760006004016000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020549050611a5e565b62093a8083836119499190614417565b6fffffffffffffffffffffffffffffffff1614156119a35760006005016000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020549050611a5d565b6212750083836119b39190614417565b6fffffffffffffffffffffffffffffffff161415611a5c576000600501600062093a80846119e19190614417565b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000205460006005016000846fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200190815260200160002054611a5991906141d5565b90505b5b5b92915050565b611a72868686868686611b83565b611a80868686868686611e8f565b505050505050565b6000807f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b90508091505090565b611b38846323b872dd60e01b858585604051602401611ad69392919061444b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612067565b50505050565b611b4a8484848461212e565b611b5933600086868686611e8f565b50505050565b611b6d868686868686612340565b611b7b8686868686866125b8565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bea906144f4565b60405180910390fd5b8151835114611c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2e90614586565b60405180910390fd5b611c45868686868686612790565b6000611c4f611a88565b600001905060005b8451811015611e07576000858281518110611c7557611c74613c3e565b5b602002602001015190506000858381518110611c9457611c93613c3e565b5b60200260200101519050600084600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2c90614618565b60405180910390fd5b81810385600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508084600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611deb91906141d5565b9250508190555050508080611dff90613c9c565b915050611c57565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e7e929190614638565b60405180910390a450505050505050565b611eae8473ffffffffffffffffffffffffffffffffffffffff16612b0c565b1561205f578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611ef49594939291906146c4565b6020604051808303816000875af1925050508015611f3057506040513d601f19601f82011682018060405250810190611f2d9190614741565b60015b611fd657611f3c61477b565b806308c379a01415611f995750611f5161479d565b80611f5c5750611f9b565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f90919061343b565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcd906148a5565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461205d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205490614937565b60405180910390fd5b505b505050505050565b60006120c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612b1f9092919063ffffffff16565b905060008151111561212957808060200190518101906120e9919061496c565b612128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211f90614a0b565b60405180910390fd5b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561219e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219590614a9d565b60405180910390fd5b81518351146121e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d990614586565b60405180910390fd5b6121f133600086868686612790565b60006121fb611a88565b600001905060005b84518110156122b95783818151811061221f5761221e613c3e565b5b602002602001015182600087848151811061223d5761223c613c3e565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461229f91906141d5565b9250508190555080806122b190613c9c565b915050612203565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612331929190614638565b60405180910390a45050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156123b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a7906144f4565b60405180910390fd5b6123ce8686866123bf87612b37565b6123c887612b37565b86612790565b60006123d8611a88565b6000019050600081600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246b90614618565b60405180910390fd5b83810382600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508281600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461252a91906141d5565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516125a7929190614abd565b60405180910390a450505050505050565b6125d78473ffffffffffffffffffffffffffffffffffffffff16612b0c565b15612788578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161261d959493929190614ae6565b6020604051808303816000875af192505050801561265957506040513d601f19601f820116820180604052508101906126569190614741565b60015b6126ff5761266561477b565b806308c379a014156126c2575061267a61479d565b8061268557506126c4565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b9919061343b565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f6906148a5565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277d90614937565b60405180910390fd5b505b505050505050565b600260006002015414156127d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d090614b8c565b60405180910390fd5b60026000600201819055506127f2868686868686612bb1565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156128ad5760005b83518110156128a75782818151811061284657612845613c3e565b5b60200260200101516000600601600086848151811061286857612867613c3e565b5b60200260200101518152602001908152602001600020600082825461288d91906141d5565b92505081905550808061289f90613c9c565b91505061282a565b50612af9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612af857612909612bb9565b60000160009054906101000a900460ff161561295a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295190614bf8565b60405180910390fd5b600080600060030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060005b8551811015612a4c5760008682815181106129b4576129b3613c3e565b5b6020026020010151905082816fffffffffffffffffffffffffffffffff1611612a3857600060808884815181106129ee576129ed613c3e565b5b6020026020010151901c9050612a0481836118cd565b878481518110612a1757612a16613c3e565b5b6020026020010151612a299190613e38565b85612a3491906141d5565b9450505b508080612a4490613c9c565b915050612996565b506000821115612af557612aa68783600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612be69092919063ffffffff16565b8673ffffffffffffffffffffffffffffffffffffffff167fe9df6fe73a4a0b4ca42668b18744091a48a640da4eccde958e65747c9b85606b83604051612aec9190612f94565b60405180910390a25b50505b5b6001600060020181905550505050505050565b600080823b905060008111915050919050565b6060612b2e8484600085612c6c565b90509392505050565b60606000600167ffffffffffffffff811115612b5657612b55613085565b5b604051908082528060200260200182016040528015612b845781602001602082028036833780820191505090505b5090508281600081518110612b9c57612b9b613c3e565b5b60200260200101818152505080915050919050565b505050505050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b612c678363a9059cbb60e01b8484604051602401612c059291906134d9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612067565b505050565b606082471015612cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ca890614c8a565b60405180910390fd5b612cba85612d80565b612cf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf090614cf6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612d229190614d52565b60006040518083038185875af1925050503d8060008114612d5f576040519150601f19603f3d011682016040523d82523d6000602084013e612d64565b606091505b5091509150612d74828286612d93565b92505050949350505050565b600080823b905060008111915050919050565b60608315612da357829050612df3565b600083511115612db65782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dea919061343b565b60405180910390fd5b9392505050565b828054612e0690613d14565b90600052602060002090601f016020900481019282612e285760008555612e6f565b82601f10612e4157805160ff1916838001178555612e6f565b82800160010185558215612e6f579182015b82811115612e6e578251825591602001919060010190612e53565b5b509050612e7c9190612e80565b5090565b5b80821115612e99576000816000905550600101612e81565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612edc82612eb1565b9050919050565b612eec81612ed1565b8114612ef757600080fd5b50565b600081359050612f0981612ee3565b92915050565b6000819050919050565b612f2281612f0f565b8114612f2d57600080fd5b50565b600081359050612f3f81612f19565b92915050565b60008060408385031215612f5c57612f5b612ea7565b5b6000612f6a85828601612efa565b9250506020612f7b85828601612f30565b9150509250929050565b612f8e81612f0f565b82525050565b6000602082019050612fa96000830184612f85565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612fe481612faf565b8114612fef57600080fd5b50565b60008135905061300181612fdb565b92915050565b60006020828403121561301d5761301c612ea7565b5b600061302b84828501612ff2565b91505092915050565b60008115159050919050565b61304981613034565b82525050565b60006020820190506130646000830184613040565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6130bd82613074565b810181811067ffffffffffffffff821117156130dc576130db613085565b5b80604052505050565b60006130ef612e9d565b90506130fb82826130b4565b919050565b600067ffffffffffffffff82111561311b5761311a613085565b5b61312482613074565b9050602081019050919050565b82818337600083830152505050565b600061315361314e84613100565b6130e5565b90508281526020810184848401111561316f5761316e61306f565b5b61317a848285613131565b509392505050565b600082601f8301126131975761319661306a565b5b81356131a7848260208601613140565b91505092915050565b6000602082840312156131c6576131c5612ea7565b5b600082013567ffffffffffffffff8111156131e4576131e3612eac565b5b6131f084828501613182565b91505092915050565b600080fd5b600080fd5b60008083601f8401126132195761321861306a565b5b8235905067ffffffffffffffff811115613236576132356131f9565b5b602083019150836020820283011115613252576132516131fe565b5b9250929050565b600080602083850312156132705761326f612ea7565b5b600083013567ffffffffffffffff81111561328e5761328d612eac565b5b61329a85828601613203565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6132db81612f0f565b82525050565b60006132ed83836132d2565b60208301905092915050565b6000602082019050919050565b6000613311826132a6565b61331b81856132b1565b9350613326836132c2565b8060005b8381101561335757815161333e88826132e1565b9750613349836132f9565b92505060018101905061332a565b5085935050505092915050565b6000602082019050818103600083015261337e8184613306565b905092915050565b60006020828403121561339c5761339b612ea7565b5b60006133aa84828501612f30565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156133ed5780820151818401526020810190506133d2565b838111156133fc576000848401525b50505050565b600061340d826133b3565b61341781856133be565b93506134278185602086016133cf565b61343081613074565b840191505092915050565b600060208201905081810360008301526134558184613402565b905092915050565b60006020828403121561347357613472612ea7565b5b600061348184828501612efa565b91505092915050565b600080604083850312156134a1576134a0612ea7565b5b60006134af85828601612f30565b92505060206134c085828601612f30565b9150509250929050565b6134d381612ed1565b82525050565b60006040820190506134ee60008301856134ca565b6134fb6020830184612f85565b9392505050565b600067ffffffffffffffff82111561351d5761351c613085565b5b602082029050602081019050919050565b600061354161353c84613502565b6130e5565b90508083825260208201905060208402830185811115613564576135636131fe565b5b835b8181101561358d57806135798882612f30565b845260208401935050602081019050613566565b5050509392505050565b600082601f8301126135ac576135ab61306a565b5b81356135bc84826020860161352e565b91505092915050565b600067ffffffffffffffff8211156135e0576135df613085565b5b6135e982613074565b9050602081019050919050565b6000613609613604846135c5565b6130e5565b9050828152602081018484840111156136255761362461306f565b5b613630848285613131565b509392505050565b600082601f83011261364d5761364c61306a565b5b813561365d8482602086016135f6565b91505092915050565b600080600080600060a0868803121561368257613681612ea7565b5b600061369088828901612efa565b95505060206136a188828901612efa565b945050604086013567ffffffffffffffff8111156136c2576136c1612eac565b5b6136ce88828901613597565b935050606086013567ffffffffffffffff8111156136ef576136ee612eac565b5b6136fb88828901613597565b925050608086013567ffffffffffffffff81111561371c5761371b612eac565b5b61372888828901613638565b9150509295509295909350565b600060208201905061374a60008301846134ca565b92915050565b600067ffffffffffffffff82111561376b5761376a613085565b5b602082029050602081019050919050565b600061378f61378a84613750565b6130e5565b905080838252602082019050602084028301858111156137b2576137b16131fe565b5b835b818110156137db57806137c78882612efa565b8452602084019350506020810190506137b4565b5050509392505050565b600082601f8301126137fa576137f961306a565b5b813561380a84826020860161377c565b91505092915050565b6000806040838503121561382a57613829612ea7565b5b600083013567ffffffffffffffff81111561384857613847612eac565b5b613854858286016137e5565b925050602083013567ffffffffffffffff81111561387557613874612eac565b5b61388185828601613597565b9150509250929050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6138b08161388b565b81146138bb57600080fd5b50565b6000813590506138cd816138a7565b92915050565b600080600080608085870312156138ed576138ec612ea7565b5b60006138fb878288016138be565b945050602061390c87828801612f30565b935050604061391d87828801612efa565b925050606061392e87828801612f30565b91505092959194509250565b600061ffff82169050919050565b6139518161393a565b811461395c57600080fd5b50565b60008135905061396e81613948565b92915050565b6000806040838503121561398b5761398a612ea7565b5b600061399985828601612efa565b92505060206139aa8582860161395f565b9150509250929050565b6000806000806000606086880312156139d0576139cf612ea7565b5b600086013567ffffffffffffffff8111156139ee576139ed612eac565b5b6139fa88828901613203565b9550955050602086013567ffffffffffffffff811115613a1d57613a1c612eac565b5b613a2988828901613203565b9350935050604086013567ffffffffffffffff811115613a4c57613a4b612eac565b5b613a5888828901613638565b9150509295509295909350565b613a6e81613034565b8114613a7957600080fd5b50565b600081359050613a8b81613a65565b92915050565b60008060408385031215613aa857613aa7612ea7565b5b6000613ab685828601612efa565b9250506020613ac785828601613a7c565b9150509250929050565b613ada8161388b565b82525050565b6000602082019050613af56000830184613ad1565b92915050565b60008060408385031215613b1257613b11612ea7565b5b6000613b2085828601612efa565b9250506020613b3185828601612efa565b9150509250929050565b600080600080600060a08688031215613b5757613b56612ea7565b5b6000613b6588828901612efa565b9550506020613b7688828901612efa565b9450506040613b8788828901612f30565b9350506060613b9888828901612f30565b925050608086013567ffffffffffffffff811115613bb957613bb8612eac565b5b613bc588828901613638565b9150509295509295909350565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b6000613c08601d836133be565b9150613c1382613bd2565b602082019050919050565b60006020820190508181036000830152613c3781613bfb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ca782612f0f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613cda57613cd9613c6d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613d2c57607f821691505b60208210811415613d4057613d3f613ce5565b5b50919050565b600081905092915050565b6000613d5c826133b3565b613d668185613d46565b9350613d768185602086016133cf565b80840191505092915050565b6000613d8e8285613d51565b9150613d9a8284613d51565b91508190509392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613e02602b836133be565b9150613e0d82613da6565b604082019050919050565b60006020820190508181036000830152613e3181613df5565b9050919050565b6000613e4382612f0f565b9150613e4e83612f0f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e8757613e86613c6d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ecc82612f0f565b9150613ed783612f0f565b925082613ee757613ee6613e92565b5b828204905092915050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000613f4e6029836133be565b9150613f5982613ef2565b604082019050919050565b60006020820190508181036000830152613f7d81613f41565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613fe06029836133be565b9150613feb82613f84565b604082019050919050565b6000602082019050818103600083015261400f81613fd3565b9050919050565b7f455243313135353a2062617463682062616c616e636520717565727920666f7260008201527f20746865207a65726f2061646472657373000000000000000000000000000000602082015250565b60006140726031836133be565b915061407d82614016565b604082019050919050565b600060208201905081810360008301526140a181614065565b9050919050565b60006140b38261388b565b91506140be8361388b565b9250826140ce576140cd613e92565b5b828206905092915050565b7f44654d696e654e46543a20696e76616c69642074696d657374616d7000000000600082015250565b600061410f601c836133be565b915061411a826140d9565b602082019050919050565b6000602082019050818103600083015261413e81614102565b9050919050565b60006141508261388b565b915061415b8361388b565b9250816fffffffffffffffffffffffffffffffff048311821515161561418457614183613c6d565b5b828202905092915050565b600061419a8261388b565b91506141a58361388b565b9250826fffffffffffffffffffffffffffffffff038211156141ca576141c9613c6d565b5b828201905092915050565b60006141e082612f0f565b91506141eb83612f0f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142205761421f613c6d565b5b828201905092915050565b60006142368261388b565b91506fffffffffffffffffffffffffffffffff82141561425957614258613c6d565b5b600182019050919050565b61426d8161393a565b82525050565b60006020820190506142886000830184614264565b92915050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006142ea6029836133be565b91506142f58261428e565b604082019050919050565b60006020820190508181036000830152614319816142dd565b9050919050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b600061437c602b836133be565b915061438782614320565b604082019050919050565b600060208201905081810360008301526143ab8161436f565b9050919050565b60006143bd82612f0f565b91506143c883612f0f565b9250828210156143db576143da613c6d565b5b828203905092915050565b60006143f182612f0f565b91506143fc83612f0f565b92508261440c5761440b613e92565b5b828206905092915050565b60006144228261388b565b915061442d8361388b565b9250828210156144405761443f613c6d565b5b828203905092915050565b600060608201905061446060008301866134ca565b61446d60208301856134ca565b61447a6040830184612f85565b949350505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006144de6025836133be565b91506144e982614482565b604082019050919050565b6000602082019050818103600083015261450d816144d1565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006145706028836133be565b915061457b82614514565b604082019050919050565b6000602082019050818103600083015261459f81614563565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636573206660008201527f6f72207472616e73666572000000000000000000000000000000000000000000602082015250565b6000614602602b836133be565b915061460d826145a6565b604082019050919050565b60006020820190508181036000830152614631816145f5565b9050919050565b600060408201905081810360008301526146528185613306565b905081810360208301526146668184613306565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60006146968261466f565b6146a0818561467a565b93506146b08185602086016133cf565b6146b981613074565b840191505092915050565b600060a0820190506146d960008301886134ca565b6146e660208301876134ca565b81810360408301526146f88186613306565b9050818103606083015261470c8185613306565b90508181036080830152614720818461468b565b90509695505050505050565b60008151905061473b81612fdb565b92915050565b60006020828403121561475757614756612ea7565b5b60006147658482850161472c565b91505092915050565b60008160e01c9050919050565b600060033d111561479a5760046000803e61479760005161476e565b90505b90565b600060443d10156147ad57614830565b6147b5612e9d565b60043d036004823e80513d602482011167ffffffffffffffff821117156147dd575050614830565b808201805167ffffffffffffffff8111156147fb5750505050614830565b80602083010160043d038501811115614818575050505050614830565b614827826020018501866130b4565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061488f6034836133be565b915061489a82614833565b604082019050919050565b600060208201905081810360008301526148be81614882565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006149216028836133be565b915061492c826148c5565b604082019050919050565b6000602082019050818103600083015261495081614914565b9050919050565b60008151905061496681613a65565b92915050565b60006020828403121561498257614981612ea7565b5b600061499084828501614957565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006149f5602a836133be565b9150614a0082614999565b604082019050919050565b60006020820190508181036000830152614a24816149e8565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614a876021836133be565b9150614a9282614a2b565b604082019050919050565b60006020820190508181036000830152614ab681614a7a565b9050919050565b6000604082019050614ad26000830185612f85565b614adf6020830184612f85565b9392505050565b600060a082019050614afb60008301886134ca565b614b0860208301876134ca565b614b156040830186612f85565b614b226060830185612f85565b8181036080830152614b34818461468b565b90509695505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614b76601f836133be565b9150614b8182614b40565b602082019050919050565b60006020820190508181036000830152614ba581614b69565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614be26010836133be565b9150614bed82614bac565b602082019050919050565b60006020820190508181036000830152614c1181614bd5565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614c746026836133be565b9150614c7f82614c18565b604082019050919050565b60006020820190508181036000830152614ca381614c67565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614ce0601d836133be565b9150614ceb82614caa565b602082019050919050565b60006020820190508181036000830152614d0f81614cd3565b9050919050565b600081905092915050565b6000614d2c8261466f565b614d368185614d16565b9350614d468185602086016133cf565b80840191505092915050565b6000614d5e8284614d21565b91508190509291505056fea2646970667358221220080f6e97ef1742b38fa004567b4d485d95cff0f9268e852736887406e4c5479064736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012b5760003560e01c80634e1273f4116100ad5780638ff45d93116100715780638ff45d9314610379578063a22cb46514610395578063b3f05b97146103b1578063e985e9c5146103cf578063f242432a146103ff5761012b565b80634e1273f4146102c35780635840799f146102f357806372504a241461030f5780637fe205c71461032b5780638806792f146103495761012b565b806319ab453c116100f457806319ab453c1461020c5780632a55205a146102285780632ac3fad9146102595780632eb2c2d614610289578063375b74c3146102a55761012b565b8062fdd58e1461013057806301ffc9a71461016057806302fe5305146101905780630d071e63146101ac5780630e89341c146101dc575b600080fd5b61014a60048036038101906101459190612f45565b61041b565b6040516101579190612f94565b60405180910390f35b61017a60048036038101906101759190613007565b61042f565b604051610187919061304f565b60405180910390f35b6101aa60048036038101906101a591906131b0565b610452565b005b6101c660048036038101906101c19190613259565b6104f7565b6040516101d39190613364565b60405180910390f35b6101f660048036038101906101f19190613386565b6105c4565b604051610203919061343b565b60405180910390f35b6102266004803603810190610221919061345d565b610785565b005b610242600480360381019061023d919061348a565b6108f0565b6040516102509291906134d9565b60405180910390f35b610273600480360381019061026e9190613386565b6109ae565b6040516102809190612f94565b60405180910390f35b6102a3600480360381019061029e9190613666565b6109d0565b005b6102ad610a64565b6040516102ba9190613735565b60405180910390f35b6102dd60048036038101906102d89190613813565b610a8c565b6040516102ea9190613364565b60405180910390f35b61030d600480360381019061030891906138d3565b610c81565b005b61032960048036038101906103249190613974565b610f7c565b005b6103336110f0565b6040516103409190613735565b60405180910390f35b610363600480360381019061035e9190613386565b61111c565b6040516103709190612f94565b60405180910390f35b610393600480360381019061038e91906139b4565b61113b565b005b6103af60048036038101906103aa9190613a91565b611289565b005b6103b96113fe565b6040516103c69190613ae0565b60405180910390f35b6103e960048036038101906103e49190613afb565b611426565b6040516103f6919061304f565b60405180910390f35b61041960048036038101906104149190613b3b565b6114c3565b005b60006104278383611557565b905092915050565b600061044b8261043d61162a565b61165790919063ffffffff16565b9050919050565b61045a6116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e290613c1e565b60405180910390fd5b6104f4816116ef565b50565b606060008383905067ffffffffffffffff81111561051857610517613085565b5b6040519080825280602002602001820160405280156105465781602001602082028036833780820191505090505b50905060005b848490508110156105b9576000600601600086868481811061057157610570613c3e565b5b9050602002013581526020019081526020016000205482828151811061059a57610599613c3e565b5b60200260200101818152505080806105b190613c9c565b91505061054c565b508091505092915050565b606060006105d0611712565b9050600081600101600085815260200190815260200160002080546105f490613d14565b80601f016020809104026020016040519081016040528092919081815260200182805461062090613d14565b801561066d5780601f106106425761010080835404028352916020019161066d565b820191906000526020600020905b81548152906001019060200180831161065057829003601f168201915b50505050509050600082600001805461068590613d14565b80601f01602080910402602001604051908101604052809291908181526020018280546106b190613d14565b80156106fe5780601f106106d3576101008083540402835291602001916106fe565b820191906000526020600020905b8154815290600101906020018083116106e157829003601f168201915b5050505050905060008151141561071a57819350505050610780565b600082511115610750578082604051602001610737929190613d82565b6040516020818303038152906040529350505050610780565b8061075a8661173f565b60405160200161076b929190613d82565b60405160208183030381529060405293505050505b919050565b61078d6118a0565b60000160019054906101000a900460ff166107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d490613e18565b60405180910390fd5b80600060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180604001604052806108346116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001606461ffff168152506000800160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548161ffff021916908361ffff16021790555090505050565b6000806000806000016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900461ffff1661ffff1661ffff168152505090508060000151612710826020015161ffff16866109989190613e38565b6109a29190613ec1565b92509250509250929050565b600080608083901c905060008390506109c782826118cd565b92505050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610a105750610a0f8533611426565b5b610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4690613f64565b60405180910390fd5b610a5d338686868686611a64565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60608151835114610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac990613ff6565b60405180910390fd5b6000610adc611a88565b60000190506000845167ffffffffffffffff811115610afe57610afd613085565b5b604051908082528060200260200182016040528015610b2c5781602001602082028036833780820191505090505b50905060005b8551811015610c7557600073ffffffffffffffffffffffffffffffffffffffff16868281518110610b6657610b65613c3e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbc90614088565b60405180910390fd5b826000868381518110610bdb57610bda613c3e565b5b602002602001015181526020019081526020016000206000878381518110610c0657610c05613c3e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610c5c57610c5b613c3e565b5b6020026020010181815250508080600101915050610b32565b50809250505092915050565b610c896116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1190613c1e565b60405180910390fd5b600060030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16118015610d8e575060006201518085610d7a91906140a8565b6fffffffffffffffffffffffffffffffff16145b610dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc490614125565b60405180910390fd5b83600060030160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508260006004016000866fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060005b6007816fffffffffffffffffffffffffffffffff161015610ee35783600060050160006201518084610e7d9190614145565b88610e88919061418f565b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ec991906141d5565b925050819055508080610edb9061422b565b915050610e4b565b50610f36823083600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611ab5909392919063ffffffff16565b82846fffffffffffffffffffffffffffffffff167ff9007d0dcd21bf7a26f5ec3bd5cf96e721c6e0faf320db4629dcd0895dcbeefb60405160405180910390a350505050565b610f846116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611015576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100c90613c1e565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018261ffff168152506000800160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548161ffff021916908361ffff1602179055509050507f577133166751d165db2e7f4c7b9f50ef67bf80781894fc7f4d53df1067a39df1816040516110e49190614273565b60405180910390a15050565b60008060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806006016000838152602001908152602001600020549050919050565b6111436116c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cb90613c1e565b60405180910390fd5b6112827f0000000000000000000000000000000000000000000000000000000000000000868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505084611b3e565b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90614300565b60405180910390fd5b80611301611a88565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113f2919061304f565b60405180910390a35050565b60008060030160009054906101000a90046fffffffffffffffffffffffffffffffff16905090565b6000611430611a88565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061150357506115028533611426565b5b611542576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153990613f64565b60405180910390fd5b611550338686868686611b5f565b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bf90614392565b60405180910390fd5b6115d0611a88565b600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b6000807f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090508091505090565b806116f8611712565b600001908051906020019061170e929190612dfa565b5050565b6000807f4281b61aefbe70b3d3f684b428efca5f33077bc240e76f2808f9177c307617f490508091505090565b60606000821415611787576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061189b565b600082905060005b600082146117b95780806117a290613c9c565b915050600a826117b29190613ec1565b915061178f565b60008167ffffffffffffffff8111156117d5576117d4613085565b5b6040519080825280601f01601f1916602001820160405280156118075781602001600182028036833780820191505090505b5090505b600085146118945760018261182091906143b2565b9150600a8561182f91906143e6565b603061183b91906141d5565b60f81b81838151811061185157611850613c3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561188d9190613ec1565b945061180b565b8093505050505b919050565b6000807f2ae1e818fc317b4c150084d41bf7468a28b0861c8b85a3e58e4bb4d5dbbc6aa190508091505090565b60006201518083836118df9190614417565b6fffffffffffffffffffffffffffffffff1614156119395760006004016000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020549050611a5e565b62093a8083836119499190614417565b6fffffffffffffffffffffffffffffffff1614156119a35760006005016000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001908152602001600020549050611a5d565b6212750083836119b39190614417565b6fffffffffffffffffffffffffffffffff161415611a5c576000600501600062093a80846119e19190614417565b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019081526020016000205460006005016000846fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200190815260200160002054611a5991906141d5565b90505b5b5b92915050565b611a72868686868686611b83565b611a80868686868686611e8f565b505050505050565b6000807f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b90508091505090565b611b38846323b872dd60e01b858585604051602401611ad69392919061444b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612067565b50505050565b611b4a8484848461212e565b611b5933600086868686611e8f565b50505050565b611b6d868686868686612340565b611b7b8686868686866125b8565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bea906144f4565b60405180910390fd5b8151835114611c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2e90614586565b60405180910390fd5b611c45868686868686612790565b6000611c4f611a88565b600001905060005b8451811015611e07576000858281518110611c7557611c74613c3e565b5b602002602001015190506000858381518110611c9457611c93613c3e565b5b60200260200101519050600084600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2c90614618565b60405180910390fd5b81810385600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508084600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611deb91906141d5565b9250508190555050508080611dff90613c9c565b915050611c57565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e7e929190614638565b60405180910390a450505050505050565b611eae8473ffffffffffffffffffffffffffffffffffffffff16612b0c565b1561205f578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611ef49594939291906146c4565b6020604051808303816000875af1925050508015611f3057506040513d601f19601f82011682018060405250810190611f2d9190614741565b60015b611fd657611f3c61477b565b806308c379a01415611f995750611f5161479d565b80611f5c5750611f9b565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f90919061343b565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcd906148a5565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461205d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205490614937565b60405180910390fd5b505b505050505050565b60006120c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612b1f9092919063ffffffff16565b905060008151111561212957808060200190518101906120e9919061496c565b612128576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211f90614a0b565b60405180910390fd5b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561219e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219590614a9d565b60405180910390fd5b81518351146121e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d990614586565b60405180910390fd5b6121f133600086868686612790565b60006121fb611a88565b600001905060005b84518110156122b95783818151811061221f5761221e613c3e565b5b602002602001015182600087848151811061223d5761223c613c3e565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461229f91906141d5565b9250508190555080806122b190613c9c565b915050612203565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612331929190614638565b60405180910390a45050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156123b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a7906144f4565b60405180910390fd5b6123ce8686866123bf87612b37565b6123c887612b37565b86612790565b60006123d8611a88565b6000019050600081600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246b90614618565b60405180910390fd5b83810382600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508281600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461252a91906141d5565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516125a7929190614abd565b60405180910390a450505050505050565b6125d78473ffffffffffffffffffffffffffffffffffffffff16612b0c565b15612788578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161261d959493929190614ae6565b6020604051808303816000875af192505050801561265957506040513d601f19601f820116820180604052508101906126569190614741565b60015b6126ff5761266561477b565b806308c379a014156126c2575061267a61479d565b8061268557506126c4565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b9919061343b565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f6906148a5565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277d90614937565b60405180910390fd5b505b505050505050565b600260006002015414156127d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d090614b8c565b60405180910390fd5b60026000600201819055506127f2868686868686612bb1565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156128ad5760005b83518110156128a75782818151811061284657612845613c3e565b5b60200260200101516000600601600086848151811061286857612867613c3e565b5b60200260200101518152602001908152602001600020600082825461288d91906141d5565b92505081905550808061289f90613c9c565b91505061282a565b50612af9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612af857612909612bb9565b60000160009054906101000a900460ff161561295a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295190614bf8565b60405180910390fd5b600080600060030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060005b8551811015612a4c5760008682815181106129b4576129b3613c3e565b5b6020026020010151905082816fffffffffffffffffffffffffffffffff1611612a3857600060808884815181106129ee576129ed613c3e565b5b6020026020010151901c9050612a0481836118cd565b878481518110612a1757612a16613c3e565b5b6020026020010151612a299190613e38565b85612a3491906141d5565b9450505b508080612a4490613c9c565b915050612996565b506000821115612af557612aa68783600060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612be69092919063ffffffff16565b8673ffffffffffffffffffffffffffffffffffffffff167fe9df6fe73a4a0b4ca42668b18744091a48a640da4eccde958e65747c9b85606b83604051612aec9190612f94565b60405180910390a25b50505b5b6001600060020181905550505050505050565b600080823b905060008111915050919050565b6060612b2e8484600085612c6c565b90509392505050565b60606000600167ffffffffffffffff811115612b5657612b55613085565b5b604051908082528060200260200182016040528015612b845781602001602082028036833780820191505090505b5090508281600081518110612b9c57612b9b613c3e565b5b60200260200101818152505080915050919050565b505050505050565b6000807f68721c0bbf2c02a4d65000340d1370666be06a630022208d4baa9bd7a4b6fea890508091505090565b612c678363a9059cbb60e01b8484604051602401612c059291906134d9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612067565b505050565b606082471015612cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ca890614c8a565b60405180910390fd5b612cba85612d80565b612cf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf090614cf6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612d229190614d52565b60006040518083038185875af1925050503d8060008114612d5f576040519150601f19603f3d011682016040523d82523d6000602084013e612d64565b606091505b5091509150612d74828286612d93565b92505050949350505050565b600080823b905060008111915050919050565b60608315612da357829050612df3565b600083511115612db65782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dea919061343b565b60405180910390fd5b9392505050565b828054612e0690613d14565b90600052602060002090601f016020900481019282612e285760008555612e6f565b82601f10612e4157805160ff1916838001178555612e6f565b82800160010185558215612e6f579182015b82811115612e6e578251825591602001919060010190612e53565b5b509050612e7c9190612e80565b5090565b5b80821115612e99576000816000905550600101612e81565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612edc82612eb1565b9050919050565b612eec81612ed1565b8114612ef757600080fd5b50565b600081359050612f0981612ee3565b92915050565b6000819050919050565b612f2281612f0f565b8114612f2d57600080fd5b50565b600081359050612f3f81612f19565b92915050565b60008060408385031215612f5c57612f5b612ea7565b5b6000612f6a85828601612efa565b9250506020612f7b85828601612f30565b9150509250929050565b612f8e81612f0f565b82525050565b6000602082019050612fa96000830184612f85565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612fe481612faf565b8114612fef57600080fd5b50565b60008135905061300181612fdb565b92915050565b60006020828403121561301d5761301c612ea7565b5b600061302b84828501612ff2565b91505092915050565b60008115159050919050565b61304981613034565b82525050565b60006020820190506130646000830184613040565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6130bd82613074565b810181811067ffffffffffffffff821117156130dc576130db613085565b5b80604052505050565b60006130ef612e9d565b90506130fb82826130b4565b919050565b600067ffffffffffffffff82111561311b5761311a613085565b5b61312482613074565b9050602081019050919050565b82818337600083830152505050565b600061315361314e84613100565b6130e5565b90508281526020810184848401111561316f5761316e61306f565b5b61317a848285613131565b509392505050565b600082601f8301126131975761319661306a565b5b81356131a7848260208601613140565b91505092915050565b6000602082840312156131c6576131c5612ea7565b5b600082013567ffffffffffffffff8111156131e4576131e3612eac565b5b6131f084828501613182565b91505092915050565b600080fd5b600080fd5b60008083601f8401126132195761321861306a565b5b8235905067ffffffffffffffff811115613236576132356131f9565b5b602083019150836020820283011115613252576132516131fe565b5b9250929050565b600080602083850312156132705761326f612ea7565b5b600083013567ffffffffffffffff81111561328e5761328d612eac565b5b61329a85828601613203565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6132db81612f0f565b82525050565b60006132ed83836132d2565b60208301905092915050565b6000602082019050919050565b6000613311826132a6565b61331b81856132b1565b9350613326836132c2565b8060005b8381101561335757815161333e88826132e1565b9750613349836132f9565b92505060018101905061332a565b5085935050505092915050565b6000602082019050818103600083015261337e8184613306565b905092915050565b60006020828403121561339c5761339b612ea7565b5b60006133aa84828501612f30565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156133ed5780820151818401526020810190506133d2565b838111156133fc576000848401525b50505050565b600061340d826133b3565b61341781856133be565b93506134278185602086016133cf565b61343081613074565b840191505092915050565b600060208201905081810360008301526134558184613402565b905092915050565b60006020828403121561347357613472612ea7565b5b600061348184828501612efa565b91505092915050565b600080604083850312156134a1576134a0612ea7565b5b60006134af85828601612f30565b92505060206134c085828601612f30565b9150509250929050565b6134d381612ed1565b82525050565b60006040820190506134ee60008301856134ca565b6134fb6020830184612f85565b9392505050565b600067ffffffffffffffff82111561351d5761351c613085565b5b602082029050602081019050919050565b600061354161353c84613502565b6130e5565b90508083825260208201905060208402830185811115613564576135636131fe565b5b835b8181101561358d57806135798882612f30565b845260208401935050602081019050613566565b5050509392505050565b600082601f8301126135ac576135ab61306a565b5b81356135bc84826020860161352e565b91505092915050565b600067ffffffffffffffff8211156135e0576135df613085565b5b6135e982613074565b9050602081019050919050565b6000613609613604846135c5565b6130e5565b9050828152602081018484840111156136255761362461306f565b5b613630848285613131565b509392505050565b600082601f83011261364d5761364c61306a565b5b813561365d8482602086016135f6565b91505092915050565b600080600080600060a0868803121561368257613681612ea7565b5b600061369088828901612efa565b95505060206136a188828901612efa565b945050604086013567ffffffffffffffff8111156136c2576136c1612eac565b5b6136ce88828901613597565b935050606086013567ffffffffffffffff8111156136ef576136ee612eac565b5b6136fb88828901613597565b925050608086013567ffffffffffffffff81111561371c5761371b612eac565b5b61372888828901613638565b9150509295509295909350565b600060208201905061374a60008301846134ca565b92915050565b600067ffffffffffffffff82111561376b5761376a613085565b5b602082029050602081019050919050565b600061378f61378a84613750565b6130e5565b905080838252602082019050602084028301858111156137b2576137b16131fe565b5b835b818110156137db57806137c78882612efa565b8452602084019350506020810190506137b4565b5050509392505050565b600082601f8301126137fa576137f961306a565b5b813561380a84826020860161377c565b91505092915050565b6000806040838503121561382a57613829612ea7565b5b600083013567ffffffffffffffff81111561384857613847612eac565b5b613854858286016137e5565b925050602083013567ffffffffffffffff81111561387557613874612eac565b5b61388185828601613597565b9150509250929050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6138b08161388b565b81146138bb57600080fd5b50565b6000813590506138cd816138a7565b92915050565b600080600080608085870312156138ed576138ec612ea7565b5b60006138fb878288016138be565b945050602061390c87828801612f30565b935050604061391d87828801612efa565b925050606061392e87828801612f30565b91505092959194509250565b600061ffff82169050919050565b6139518161393a565b811461395c57600080fd5b50565b60008135905061396e81613948565b92915050565b6000806040838503121561398b5761398a612ea7565b5b600061399985828601612efa565b92505060206139aa8582860161395f565b9150509250929050565b6000806000806000606086880312156139d0576139cf612ea7565b5b600086013567ffffffffffffffff8111156139ee576139ed612eac565b5b6139fa88828901613203565b9550955050602086013567ffffffffffffffff811115613a1d57613a1c612eac565b5b613a2988828901613203565b9350935050604086013567ffffffffffffffff811115613a4c57613a4b612eac565b5b613a5888828901613638565b9150509295509295909350565b613a6e81613034565b8114613a7957600080fd5b50565b600081359050613a8b81613a65565b92915050565b60008060408385031215613aa857613aa7612ea7565b5b6000613ab685828601612efa565b9250506020613ac785828601613a7c565b9150509250929050565b613ada8161388b565b82525050565b6000602082019050613af56000830184613ad1565b92915050565b60008060408385031215613b1257613b11612ea7565b5b6000613b2085828601612efa565b9250506020613b3185828601612efa565b9150509250929050565b600080600080600060a08688031215613b5757613b56612ea7565b5b6000613b6588828901612efa565b9550506020613b7688828901612efa565b9450506040613b8788828901612f30565b9350506060613b9888828901612f30565b925050608086013567ffffffffffffffff811115613bb957613bb8612eac565b5b613bc588828901613638565b9150509295509295909350565b7f4f776e61626c653a2073656e646572206d757374206265206f776e6572000000600082015250565b6000613c08601d836133be565b9150613c1382613bd2565b602082019050919050565b60006020820190508181036000830152613c3781613bfb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ca782612f0f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613cda57613cd9613c6d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613d2c57607f821691505b60208210811415613d4057613d3f613ce5565b5b50919050565b600081905092915050565b6000613d5c826133b3565b613d668185613d46565b9350613d768185602086016133cf565b80840191505092915050565b6000613d8e8285613d51565b9150613d9a8284613d51565b91508190509392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613e02602b836133be565b9150613e0d82613da6565b604082019050919050565b60006020820190508181036000830152613e3181613df5565b9050919050565b6000613e4382612f0f565b9150613e4e83612f0f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e8757613e86613c6d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ecc82612f0f565b9150613ed783612f0f565b925082613ee757613ee6613e92565b5b828204905092915050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000613f4e6029836133be565b9150613f5982613ef2565b604082019050919050565b60006020820190508181036000830152613f7d81613f41565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613fe06029836133be565b9150613feb82613f84565b604082019050919050565b6000602082019050818103600083015261400f81613fd3565b9050919050565b7f455243313135353a2062617463682062616c616e636520717565727920666f7260008201527f20746865207a65726f2061646472657373000000000000000000000000000000602082015250565b60006140726031836133be565b915061407d82614016565b604082019050919050565b600060208201905081810360008301526140a181614065565b9050919050565b60006140b38261388b565b91506140be8361388b565b9250826140ce576140cd613e92565b5b828206905092915050565b7f44654d696e654e46543a20696e76616c69642074696d657374616d7000000000600082015250565b600061410f601c836133be565b915061411a826140d9565b602082019050919050565b6000602082019050818103600083015261413e81614102565b9050919050565b60006141508261388b565b915061415b8361388b565b9250816fffffffffffffffffffffffffffffffff048311821515161561418457614183613c6d565b5b828202905092915050565b600061419a8261388b565b91506141a58361388b565b9250826fffffffffffffffffffffffffffffffff038211156141ca576141c9613c6d565b5b828201905092915050565b60006141e082612f0f565b91506141eb83612f0f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142205761421f613c6d565b5b828201905092915050565b60006142368261388b565b91506fffffffffffffffffffffffffffffffff82141561425957614258613c6d565b5b600182019050919050565b61426d8161393a565b82525050565b60006020820190506142886000830184614264565b92915050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006142ea6029836133be565b91506142f58261428e565b604082019050919050565b60006020820190508181036000830152614319816142dd565b9050919050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b600061437c602b836133be565b915061438782614320565b604082019050919050565b600060208201905081810360008301526143ab8161436f565b9050919050565b60006143bd82612f0f565b91506143c883612f0f565b9250828210156143db576143da613c6d565b5b828203905092915050565b60006143f182612f0f565b91506143fc83612f0f565b92508261440c5761440b613e92565b5b828206905092915050565b60006144228261388b565b915061442d8361388b565b9250828210156144405761443f613c6d565b5b828203905092915050565b600060608201905061446060008301866134ca565b61446d60208301856134ca565b61447a6040830184612f85565b949350505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006144de6025836133be565b91506144e982614482565b604082019050919050565b6000602082019050818103600083015261450d816144d1565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006145706028836133be565b915061457b82614514565b604082019050919050565b6000602082019050818103600083015261459f81614563565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636573206660008201527f6f72207472616e73666572000000000000000000000000000000000000000000602082015250565b6000614602602b836133be565b915061460d826145a6565b604082019050919050565b60006020820190508181036000830152614631816145f5565b9050919050565b600060408201905081810360008301526146528185613306565b905081810360208301526146668184613306565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60006146968261466f565b6146a0818561467a565b93506146b08185602086016133cf565b6146b981613074565b840191505092915050565b600060a0820190506146d960008301886134ca565b6146e660208301876134ca565b81810360408301526146f88186613306565b9050818103606083015261470c8185613306565b90508181036080830152614720818461468b565b90509695505050505050565b60008151905061473b81612fdb565b92915050565b60006020828403121561475757614756612ea7565b5b60006147658482850161472c565b91505092915050565b60008160e01c9050919050565b600060033d111561479a5760046000803e61479760005161476e565b90505b90565b600060443d10156147ad57614830565b6147b5612e9d565b60043d036004823e80513d602482011167ffffffffffffffff821117156147dd575050614830565b808201805167ffffffffffffffff8111156147fb5750505050614830565b80602083010160043d038501811115614818575050505050614830565b614827826020018501866130b4565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061488f6034836133be565b915061489a82614833565b604082019050919050565b600060208201905081810360008301526148be81614882565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006149216028836133be565b915061492c826148c5565b604082019050919050565b6000602082019050818103600083015261495081614914565b9050919050565b60008151905061496681613a65565b92915050565b60006020828403121561498257614981612ea7565b5b600061499084828501614957565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006149f5602a836133be565b9150614a0082614999565b604082019050919050565b60006020820190508181036000830152614a24816149e8565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614a876021836133be565b9150614a9282614a2b565b604082019050919050565b60006020820190508181036000830152614ab681614a7a565b9050919050565b6000604082019050614ad26000830185612f85565b614adf6020830184612f85565b9392505050565b600060a082019050614afb60008301886134ca565b614b0860208301876134ca565b614b156040830186612f85565b614b226060830185612f85565b8181036080830152614b34818461468b565b90509695505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614b76601f836133be565b9150614b8182614b40565b602082019050919050565b60006020820190508181036000830152614ba581614b69565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614be26010836133be565b9150614bed82614bac565b602082019050919050565b60006020820190508181036000830152614c1181614bd5565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614c746026836133be565b9150614c7f82614c18565b604082019050919050565b60006020820190508181036000830152614ca381614c67565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614ce0601d836133be565b9150614ceb82614caa565b602082019050919050565b60006020820190508181036000830152614d0f81614cd3565b9050919050565b600081905092915050565b6000614d2c8261466f565b614d368185614d16565b9350614d468185602086016133cf565b80840191505092915050565b6000614d5e8284614d21565b91508190509291505056fea2646970667358221220080f6e97ef1742b38fa004567b4d485d95cff0f9268e852736887406e4c5479064736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "uri(uint256)": {
        "notice": "inheritdoc IERC1155Metadata"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10277,
        "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)10960_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint128,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AppStorage)10960_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 10941,
            "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
            "label": "royalty",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(RoyaltyInfo)10938_storage"
          },
          {
            "astId": 10943,
            "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
            "label": "earningToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10945,
            "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10947,
            "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
            "label": "finalized",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 10951,
            "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
            "label": "daily",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint128,t_uint256)"
          },
          {
            "astId": 10955,
            "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
            "label": "weekly",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint128,t_uint256)"
          },
          {
            "astId": 10959,
            "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
            "label": "supply",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoyaltyInfo)10938_storage": {
        "encoding": "inplace",
        "label": "struct RoyaltyInfo",
        "members": [
          {
            "astId": 10935,
            "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10937,
            "contract": "contracts/nft/facets/ERC1155Facet.sol:ERC1155Facet",
            "label": "bps",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}